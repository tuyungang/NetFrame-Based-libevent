!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARRAY_SIZE	Common.h	198;"	d
Accept	ServerWorker.cpp	/^    void ServerWorker::Accept(int fd, struct sockaddr_in *sa) {  $/;"	f	class:NAME_SPACE::ServerWorker	signature:(int fd, struct sockaddr_in *sa)
Accept	ServerWorker.h	/^        void Accept(int fd, struct sockaddr_in *sa);  $/;"	p	class:NAME_SPACE::ServerWorker	access:public	signature:(int fd, struct sockaddr_in *sa)
AcceptError	ServerWorker.cpp	/^    void ServerWorker::AcceptError(int fd, EM_NET_EVENT msg) {  $/;"	f	class:NAME_SPACE::ServerWorker	signature:(int fd, EM_NET_EVENT msg)
AcceptError	ServerWorker.h	/^        void AcceptError(int fd, EM_NET_EVENT msg);  $/;"	p	class:NAME_SPACE::ServerWorker	access:public	signature:(int fd, EM_NET_EVENT msg)
AcquireLockExclusive	RWLock.cpp	/^    void RWLock::AcquireLockExclusive() {$/;"	f	class:NAME_SPACE::RWLock	signature:()
AcquireLockExclusive	RWLock.h	/^        void AcquireLockExclusive();$/;"	p	class:NAME_SPACE::RWLock	access:public	signature:()
AcquireLockShared	RWLock.cpp	/^    void RWLock::AcquireLockShared() {$/;"	f	class:NAME_SPACE::RWLock	signature:()
AcquireLockShared	RWLock.h	/^        void AcquireLockShared();$/;"	p	class:NAME_SPACE::RWLock	access:public	signature:()
ActiveTCPClient	ActiveTCPClient.cpp	/^    ActiveTCPClient::ActiveTCPClient(std::string host_name, unsigned short host_port, short heart_time)  $/;"	f	class:NAME_SPACE::ActiveTCPClient	signature:(std::string host_name, unsigned short host_port, short heart_time)
ActiveTCPClient	ActiveTCPClient.h	/^        explicit ActiveTCPClient(std::string host_name,  $/;"	p	class:NAME_SPACE::ActiveTCPClient	access:public	signature:(std::string host_name, unsigned short host_port, short heart_time = 10)
ActiveTCPClient	ActiveTCPClient.h	/^    class ActiveTCPClient {  $/;"	c	namespace:NAME_SPACE
ActiveTCPEventCb	ActiveTCPClient.cpp	/^    void ActiveTCPEventCb(struct bufferevent *bev, short events, void *data) {  $/;"	f	namespace:NAME_SPACE	signature:(struct bufferevent *bev, short events, void *data)
ActiveTCPReadEventCb	ActiveTCPClient.cpp	/^    void ActiveTCPReadEventCb(struct bufferevent *bev, void *data) {  $/;"	f	namespace:NAME_SPACE	signature:(struct bufferevent *bev, void *data)
ActiveTCPTimeOutEventCb	ActiveTCPClient.cpp	/^    void ActiveTCPTimeOutEventCb(evutil_socket_t fd, short, void *data) {  $/;"	f	namespace:NAME_SPACE	signature:(evutil_socket_t fd, short, void *data)
CFLAGS	Makefile	/^CFLAGS = -I$(INCLUDE_PATH)$/;"	m
CXX	Makefile	/^CXX = g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = $(GOOGLE_LOG_LIBS) -levent_core -levent_extra -levent_pthreads -levent -ldl -lpthread -lz -lm$/;"	m
ConditionVariable	ConditionVariable.cpp	/^    ConditionVariable::ConditionVariable()$/;"	f	class:NAME_SPACE::ConditionVariable	signature:()
ConditionVariable	ConditionVariable.h	/^        ConditionVariable();$/;"	p	class:NAME_SPACE::ConditionVariable	access:private	signature:()
ConditionVariable	ConditionVariable.h	/^    class ConditionVariable {$/;"	c	namespace:NAME_SPACE
Construct	ConditionVariable.cpp	/^    int ConditionVariable::Construct()$/;"	f	class:NAME_SPACE::ConditionVariable	signature:()
Construct	ConditionVariable.h	/^        int Construct();$/;"	p	class:NAME_SPACE::ConditionVariable	access:private	signature:()
Create	ConditionVariable.cpp	/^    ConditionVariable* ConditionVariable::Create()$/;"	f	class:NAME_SPACE::ConditionVariable	signature:()
Create	ConditionVariable.h	/^        static ConditionVariable* Create();$/;"	p	class:NAME_SPACE::ConditionVariable	access:public	signature:()
Create	RWLock.cpp	/^    RWLock* RWLock::Create() {$/;"	f	class:NAME_SPACE::RWLock	signature:()
Create	RWLock.h	/^        static RWLock* Create();$/;"	p	class:NAME_SPACE::RWLock	access:public	signature:()
CriticalSection	CriticalSection.cpp	/^    CriticalSection::CriticalSection() {$/;"	f	class:NAME_SPACE::CriticalSection	signature:()
CriticalSection	CriticalSection.h	/^        CriticalSection();$/;"	p	class:NAME_SPACE::CriticalSection	access:public	signature:()
CriticalSection	CriticalSection.h	/^    class CriticalSection {$/;"	c	namespace:NAME_SPACE
CriticalSectionScoped	CriticalSection.h	/^        explicit CriticalSectionScoped(CriticalSection* critsec)$/;"	f	class:NAME_SPACE::CriticalSectionScoped	access:public	signature:(CriticalSection* critsec)
CriticalSectionScoped	CriticalSection.h	/^    class CriticalSectionScoped {$/;"	c	namespace:NAME_SPACE
Current	Thread.cpp	/^    Thread* Thread::Current() {$/;"	f	class:NAME_SPACE::Thread	signature:()
Current	Thread.h	/^        static Thread* Current();$/;"	p	class:NAME_SPACE::Thread	access:public	signature:()
CurrentThread	Thread.cpp	/^    Thread *ThreadManager::CurrentThread() {$/;"	f	class:NAME_SPACE::ThreadManager	signature:()
CurrentThread	Thread.h	/^        Thread* CurrentThread();$/;"	p	class:NAME_SPACE::ThreadManager	access:public	signature:()
DIRS	Makefile	/^DIRS = .$/;"	m
DISALLOW_ASSIGN	Common.h	27;"	d
DISALLOW_COPY_AND_ASSIGN	Common.h	30;"	d
DISALLOW_COPY_AND_ASSIGN	Thread.h	/^        DISALLOW_COPY_AND_ASSIGN(Runnable);$/;"	p	class:NAME_SPACE::Runnable	access:private	signature:(Runnable)
DISALLOW_COPY_AND_ASSIGN	Thread.h	/^        DISALLOW_COPY_AND_ASSIGN(Thread);$/;"	p	class:NAME_SPACE::Thread	access:private	signature:(Thread)
DISALLOW_COPY_AND_ASSIGN	Thread.h	/^        DISALLOW_COPY_AND_ASSIGN(ThreadManager);$/;"	p	class:NAME_SPACE::ThreadManager	access:private	signature:(ThreadManager)
DISALLOW_EVIL_CONSTRUCTORS	Common.h	34;"	d
DISALLOW_EVIL_CONSTRUCTORS	NetFrame.h	/^        DISALLOW_EVIL_CONSTRUCTORS(NetFrame);  $/;"	p	class:NAME_SPACE::NetFrame	access:private	signature:(NetFrame)
DISALLOW_IMPLICIT_CONSTRUCTORS	Common.h	37;"	d
DISALLOW_IMPLICIT_CONSTRUCTORS	Common.h	38;"	d
EM_NET_EVENT	Common.h	/^    }EM_NET_EVENT;    $/;"	t	namespace:NAME_SPACE	typeref:enum:NAME_SPACE::emNetEvent
ENE_ACCEPT_ERROR	Common.h	/^        ENE_ACCEPT_ERROR,\/\/ 鐩戝惉澶辫触$/;"	e	enum:NAME_SPACE::emNetEvent
ENE_CLOSE	Common.h	/^        ENE_CLOSE\/\/ 杩炴帴鍏抽棴$/;"	e	enum:NAME_SPACE::emNetEvent
ENE_CONNECTED	Common.h	/^        ENE_CONNECTED = 0,\/\/ 杩炴帴寤虹珛$/;"	e	enum:NAME_SPACE::emNetEvent
ENE_HEART	Common.h	/^        ENE_HEART,\/\/ 蹇冭烦$/;"	e	enum:NAME_SPACE::emNetEvent
ENE_HEART_TIMEOUT	Common.h	/^        ENE_HEART_TIMEOUT,\/\/ 蹇冭烦妫€娴嬭秴鏃?$/;"	e	enum:NAME_SPACE::emNetEvent
EVE_UNKNOWN	Common.h	/^        EVE_UNKNOWN = -1,\/\/ 鏈煡閿欒$/;"	e	enum:NAME_SPACE::emNetEvent
Enter	CriticalSection.cpp	/^    void CriticalSection::Enter() {$/;"	f	class:NAME_SPACE::CriticalSection	signature:()
Enter	CriticalSection.h	/^        void Enter();$/;"	p	class:NAME_SPACE::CriticalSection	access:public	signature:()
Event	Event.cpp	/^    Event::Event(bool manual_reset, bool initially_signaled)$/;"	f	class:NAME_SPACE::Event	signature:(bool manual_reset, bool initially_signaled)
Event	Event.h	/^        Event(bool manual_reset, bool initially_signaled);$/;"	p	class:NAME_SPACE::Event	access:public	signature:(bool manual_reset, bool initially_signaled)
Event	Event.h	/^    class Event {$/;"	c	namespace:NAME_SPACE
Event	main.cpp	/^    void Event(SOCKET fd, EM_NET_EVENT msg) {  $/;"	f	class:TestClient	access:public	signature:(SOCKET fd, EM_NET_EVENT msg)
FUNC_FAILED	Common.h	206;"	d
FUNC_SUCCESS	Common.h	202;"	d
GOOGLE_LOG	Makefile	/^GOOGLE_LOG = \/usr\/local$/;"	m
GOOGLE_LOG_LIBS	Makefile	/^GOOGLE_LOG_LIBS = -lglog$/;"	m
Get8	Common.h	/^    inline uint8 Get8(const void* memory, size_t offset) {$/;"	f	namespace:NAME_SPACE	signature:(const void* memory, size_t offset)
GetBE16	Common.h	/^    inline uint16 GetBE16(const void* memory) {$/;"	f	namespace:NAME_SPACE	signature:(const void* memory)
GetBE32	Common.h	/^    inline uint32 GetBE32(const void* memory) {$/;"	f	namespace:NAME_SPACE	signature:(const void* memory)
GetBE64	Common.h	/^    inline uint64 GetBE64(const void* memory) {$/;"	f	namespace:NAME_SPACE	signature:(const void* memory)
GetFd	ActiveTCPClient.h	/^        SOCKET GetFd() { return _fd; }  $/;"	f	class:NAME_SPACE::ActiveTCPClient	access:public	signature:()
GetFd	PassiveTCPClient.h	/^        SOCKET GetFd() { return _fd; }  $/;"	f	class:NAME_SPACE::PassiveTCPClient	access:public	signature:()
GetFd	ServerWorker.h	/^        SOCKET GetFd() { return _listen_fd; }  $/;"	f	class:NAME_SPACE::ServerWorker	access:public	signature:()
GetHeartFlg	ActiveTCPClient.h	/^        bool GetHeartFlg() { return _heart_flg; }  $/;"	f	class:NAME_SPACE::ActiveTCPClient	access:public	signature:()
GetHeartFlg	PassiveTCPClient.h	/^        bool GetHeartFlg() { return _heart_flg; }  $/;"	f	class:NAME_SPACE::PassiveTCPClient	access:public	signature:()
GetLE16	Common.h	/^    inline uint16 GetLE16(const void* memory) {$/;"	f	namespace:NAME_SPACE	signature:(const void* memory)
GetLE32	Common.h	/^    inline uint32 GetLE32(const void* memory) {$/;"	f	namespace:NAME_SPACE	signature:(const void* memory)
GetLE64	Common.h	/^    inline uint64 GetLE64(const void* memory) {$/;"	f	namespace:NAME_SPACE	signature:(const void* memory)
GetPThread	Thread.h	/^        pthread_t GetPThread() { return thread_; }$/;"	f	class:NAME_SPACE::Thread	access:public	signature:()
HostToNetwork16	Common.h	/^    inline uint16 HostToNetwork16(uint16 n) {$/;"	f	namespace:NAME_SPACE	signature:(uint16 n)
HostToNetwork32	Common.h	/^    inline uint32 HostToNetwork32(uint32 n) {$/;"	f	namespace:NAME_SPACE	signature:(uint32 n)
HostToNetwork64	Common.h	/^    inline uint64 HostToNetwork64(uint64 n) {$/;"	f	namespace:NAME_SPACE	signature:(uint64 n)
INCLUDE_PATH	Makefile	/^INCLUDE_PATH = $(GOOGLE_LOG)\/include\/$/;"	m
INVALID_SOCKET	Common.h	221;"	d
IP_MTU	Common.h	210;"	d
ImplicitCastToBool	Common.h	/^    inline bool ImplicitCastToBool(bool result) { return result; }$/;"	f	namespace:NAME_SPACE	signature:(bool result)
Init	RWLock.cpp	/^    bool RWLock::Init() {$/;"	f	class:NAME_SPACE::RWLock	signature:()
Init	RWLock.h	/^        bool Init();$/;"	p	class:NAME_SPACE::RWLock	access:private	signature:()
Instance	NetFrame.cpp	/^    NetFrame* NetFrame::Instance() {  $/;"	f	class:NAME_SPACE::NetFrame	signature:()
Instance	NetFrame.h	/^        static NetFrame* Instance();  $/;"	p	class:NAME_SPACE::NetFrame	access:public	signature:()
Instance	Thread.cpp	/^    ThreadManager* ThreadManager::Instance() {$/;"	f	class:NAME_SPACE::ThreadManager	signature:()
Instance	Thread.h	/^        static ThreadManager* Instance();$/;"	p	class:NAME_SPACE::ThreadManager	access:public	signature:()
IsConnect	ActiveTCPClient.h	/^        bool IsConnect() { return _connect_flg == 2;}  $/;"	f	class:NAME_SPACE::ActiveTCPClient	access:public	signature:()
IsCurrent	Thread.h	/^        bool IsCurrent() const { return Current() == this;}$/;"	f	class:NAME_SPACE::Thread	access:public	signature:() const
IsHostBigEndian	Common.h	/^    inline bool IsHostBigEndian() {$/;"	f	namespace:NAME_SPACE	signature:()
IsOwned	Thread.cpp	/^    bool Thread::IsOwned() {$/;"	f	class:NAME_SPACE::Thread	signature:()
IsOwned	Thread.h	/^        bool IsOwned();$/;"	p	class:NAME_SPACE::Thread	access:public	signature:()
Join	Thread.cpp	/^    void Thread::Join() {$/;"	f	class:NAME_SPACE::Thread	signature:()
Join	Thread.h	/^        void Join();$/;"	p	class:NAME_SPACE::Thread	access:protected	signature:()
LAST_SYSTEM_ERROR	Common.h	233;"	d
LIBJINGLE_DEFINE_STATIC_LOCAL	Common.h	42;"	d
Leave	CriticalSection.cpp	/^    void CriticalSection::Leave() {$/;"	f	class:NAME_SPACE::CriticalSection	signature:()
Leave	CriticalSection.h	/^        void Leave();$/;"	p	class:NAME_SPACE::CriticalSection	access:public	signature:()
ListenerErrorCb	ServerWorker.cpp	/^    static void ListenerErrorCb(struct evconnlistener *listener, void *user_data) {  $/;"	f	namespace:NAME_SPACE	signature:(struct evconnlistener *listener, void *user_data)
ListenerEventCb	ServerWorker.cpp	/^    static void ListenerEventCb(evconnlistener *listener, evutil_socket_t fd,  $/;"	f	namespace:NAME_SPACE	signature:(evconnlistener *listener, evutil_socket_t fd, sockaddr *sa, int socklen, void *user_data)
MULTI_MT_POLICY	Sigslot.h	18;"	d
NAME_SPACE	ActiveTCPClient.cpp	/^namespace NAME_SPACE {  $/;"	n	file:
NAME_SPACE	ActiveTCPClient.h	/^namespace NAME_SPACE {  $/;"	n
NAME_SPACE	Common.h	/^namespace NAME_SPACE {$/;"	n
NAME_SPACE	Common.h	22;"	d
NAME_SPACE	ConditionVariable.cpp	/^namespace NAME_SPACE {$/;"	n	file:
NAME_SPACE	ConditionVariable.h	/^namespace NAME_SPACE {$/;"	n
NAME_SPACE	CriticalSection.cpp	/^namespace NAME_SPACE {$/;"	n	file:
NAME_SPACE	CriticalSection.h	/^namespace NAME_SPACE {$/;"	n
NAME_SPACE	Event.cpp	/^namespace NAME_SPACE {$/;"	n	file:
NAME_SPACE	Event.h	/^namespace NAME_SPACE {$/;"	n
NAME_SPACE	NetFrame.cpp	/^namespace NAME_SPACE {  $/;"	n	file:
NAME_SPACE	NetFrame.h	/^namespace NAME_SPACE {  $/;"	n
NAME_SPACE	NetSignal.h	/^namespace NAME_SPACE {  $/;"	n
NAME_SPACE	PassiveTCPClient.cpp	/^namespace NAME_SPACE {  $/;"	n	file:
NAME_SPACE	PassiveTCPClient.h	/^namespace NAME_SPACE {  $/;"	n
NAME_SPACE	RWLock.cpp	/^namespace NAME_SPACE {$/;"	n	file:
NAME_SPACE	RWLock.h	/^namespace NAME_SPACE {$/;"	n
NAME_SPACE	ServerWorker.cpp	/^namespace NAME_SPACE {  $/;"	n	file:
NAME_SPACE	ServerWorker.h	/^namespace NAME_SPACE {  $/;"	n
NAME_SPACE	Thread.cpp	/^namespace NAME_SPACE {$/;"	n	file:
NAME_SPACE	Thread.h	/^namespace NAME_SPACE {$/;"	n
NAME_SPACE::ActiveTCPClient	ActiveTCPClient.h	/^    class ActiveTCPClient {  $/;"	c	namespace:NAME_SPACE
NAME_SPACE::ActiveTCPClient::ActiveTCPClient	ActiveTCPClient.cpp	/^    ActiveTCPClient::ActiveTCPClient(std::string host_name, unsigned short host_port, short heart_time)  $/;"	f	class:NAME_SPACE::ActiveTCPClient	signature:(std::string host_name, unsigned short host_port, short heart_time)
NAME_SPACE::ActiveTCPClient::ActiveTCPClient	ActiveTCPClient.h	/^        explicit ActiveTCPClient(std::string host_name,  $/;"	p	class:NAME_SPACE::ActiveTCPClient	access:public	signature:(std::string host_name, unsigned short host_port, short heart_time = 10)
NAME_SPACE::ActiveTCPClient::GetFd	ActiveTCPClient.h	/^        SOCKET GetFd() { return _fd; }  $/;"	f	class:NAME_SPACE::ActiveTCPClient	access:public	signature:()
NAME_SPACE::ActiveTCPClient::GetHeartFlg	ActiveTCPClient.h	/^        bool GetHeartFlg() { return _heart_flg; }  $/;"	f	class:NAME_SPACE::ActiveTCPClient	access:public	signature:()
NAME_SPACE::ActiveTCPClient::IsConnect	ActiveTCPClient.h	/^        bool IsConnect() { return _connect_flg == 2;}  $/;"	f	class:NAME_SPACE::ActiveTCPClient	access:public	signature:()
NAME_SPACE::ActiveTCPClient::ProcEvent	ActiveTCPClient.cpp	/^    void ActiveTCPClient::ProcEvent(short events) {  $/;"	f	class:NAME_SPACE::ActiveTCPClient	signature:(short events)
NAME_SPACE::ActiveTCPClient::ProcEvent	ActiveTCPClient.h	/^        void ProcEvent(short events);  $/;"	p	class:NAME_SPACE::ActiveTCPClient	access:public	signature:(short events)
NAME_SPACE::ActiveTCPClient::PutRecvData	ActiveTCPClient.cpp	/^    void ActiveTCPClient::PutRecvData(void* data, size_t len) {  $/;"	f	class:NAME_SPACE::ActiveTCPClient	signature:(void* data, size_t len)
NAME_SPACE::ActiveTCPClient::PutRecvData	ActiveTCPClient.h	/^        void PutRecvData(void*, size_t);  $/;"	p	class:NAME_SPACE::ActiveTCPClient	access:public	signature:(void*, size_t)
NAME_SPACE::ActiveTCPClient::SendData	ActiveTCPClient.cpp	/^    int ActiveTCPClient::SendData(void* pdata, size_t len) {  $/;"	f	class:NAME_SPACE::ActiveTCPClient	signature:(void* pdata, size_t len)
NAME_SPACE::ActiveTCPClient::SendData	ActiveTCPClient.h	/^        int SendData(void* pdata, size_t len);  $/;"	p	class:NAME_SPACE::ActiveTCPClient	access:public	signature:(void* pdata, size_t len)
NAME_SPACE::ActiveTCPClient::SetHeartFlg	ActiveTCPClient.h	/^        void SetHeartFlg(bool flg) { _heart_flg = flg; }  $/;"	f	class:NAME_SPACE::ActiveTCPClient	access:public	signature:(bool flg)
NAME_SPACE::ActiveTCPClient::SetTCPClientSignal	ActiveTCPClient.h	/^        void SetTCPClientSignal(TCPClientSignal* pTCPClientSignal) { _pTCPClientSignal = pTCPClientSignal;}  $/;"	f	class:NAME_SPACE::ActiveTCPClient	access:public	signature:(TCPClientSignal* pTCPClientSignal)
NAME_SPACE::ActiveTCPClient::StartWork	ActiveTCPClient.cpp	/^    bool ActiveTCPClient::StartWork() {  $/;"	f	class:NAME_SPACE::ActiveTCPClient	signature:()
NAME_SPACE::ActiveTCPClient::StartWork	ActiveTCPClient.h	/^        bool StartWork();  $/;"	p	class:NAME_SPACE::ActiveTCPClient	access:public	signature:()
NAME_SPACE::ActiveTCPClient::StopWork	ActiveTCPClient.cpp	/^    void ActiveTCPClient::StopWork() {  $/;"	f	class:NAME_SPACE::ActiveTCPClient	signature:()
NAME_SPACE::ActiveTCPClient::StopWork	ActiveTCPClient.h	/^        void StopWork();  $/;"	p	class:NAME_SPACE::ActiveTCPClient	access:public	signature:()
NAME_SPACE::ActiveTCPClient::_bev	ActiveTCPClient.h	/^        struct bufferevent *_bev;  $/;"	m	class:NAME_SPACE::ActiveTCPClient	typeref:struct:NAME_SPACE::ActiveTCPClient::bufferevent	access:private
NAME_SPACE::ActiveTCPClient::_connect_flg	ActiveTCPClient.h	/^        volatile unsigned char _connect_flg;  $/;"	m	class:NAME_SPACE::ActiveTCPClient	access:private
NAME_SPACE::ActiveTCPClient::_event	ActiveTCPClient.h	/^        struct event *_event;  $/;"	m	class:NAME_SPACE::ActiveTCPClient	typeref:struct:NAME_SPACE::ActiveTCPClient::event	access:private
NAME_SPACE::ActiveTCPClient::_fd	ActiveTCPClient.h	/^        SOCKET _fd;  $/;"	m	class:NAME_SPACE::ActiveTCPClient	access:private
NAME_SPACE::ActiveTCPClient::_heart_flg	ActiveTCPClient.h	/^        volatile bool _heart_flg;  $/;"	m	class:NAME_SPACE::ActiveTCPClient	access:private
NAME_SPACE::ActiveTCPClient::_heart_time	ActiveTCPClient.h	/^        short _heart_time;  $/;"	m	class:NAME_SPACE::ActiveTCPClient	access:private
NAME_SPACE::ActiveTCPClient::_host_name	ActiveTCPClient.h	/^        std::string _host_name;  $/;"	m	class:NAME_SPACE::ActiveTCPClient	access:private
NAME_SPACE::ActiveTCPClient::_host_port	ActiveTCPClient.h	/^        unsigned short _host_port;  $/;"	m	class:NAME_SPACE::ActiveTCPClient	access:private
NAME_SPACE::ActiveTCPClient::_m_rw_loacl	ActiveTCPClient.h	/^        RWLock* _m_rw_loacl;  $/;"	m	class:NAME_SPACE::ActiveTCPClient	access:private
NAME_SPACE::ActiveTCPClient::_pTCPClientSignal	ActiveTCPClient.h	/^        TCPClientSignal* _pTCPClientSignal;  $/;"	m	class:NAME_SPACE::ActiveTCPClient	access:public
NAME_SPACE::ActiveTCPClient::~ActiveTCPClient	ActiveTCPClient.cpp	/^    ActiveTCPClient::~ActiveTCPClient() {  $/;"	f	class:NAME_SPACE::ActiveTCPClient	signature:()
NAME_SPACE::ActiveTCPClient::~ActiveTCPClient	ActiveTCPClient.h	/^        ~ActiveTCPClient();  $/;"	p	class:NAME_SPACE::ActiveTCPClient	access:public	signature:()
NAME_SPACE::ActiveTCPEventCb	ActiveTCPClient.cpp	/^    void ActiveTCPEventCb(struct bufferevent *bev, short events, void *data) {  $/;"	f	namespace:NAME_SPACE	signature:(struct bufferevent *bev, short events, void *data)
NAME_SPACE::ActiveTCPReadEventCb	ActiveTCPClient.cpp	/^    void ActiveTCPReadEventCb(struct bufferevent *bev, void *data) {  $/;"	f	namespace:NAME_SPACE	signature:(struct bufferevent *bev, void *data)
NAME_SPACE::ActiveTCPTimeOutEventCb	ActiveTCPClient.cpp	/^    void ActiveTCPTimeOutEventCb(evutil_socket_t fd, short, void *data) {  $/;"	f	namespace:NAME_SPACE	signature:(evutil_socket_t fd, short, void *data)
NAME_SPACE::ConditionVariable	ConditionVariable.h	/^    class ConditionVariable {$/;"	c	namespace:NAME_SPACE
NAME_SPACE::ConditionVariable::ConditionVariable	ConditionVariable.cpp	/^    ConditionVariable::ConditionVariable()$/;"	f	class:NAME_SPACE::ConditionVariable	signature:()
NAME_SPACE::ConditionVariable::ConditionVariable	ConditionVariable.h	/^        ConditionVariable();$/;"	p	class:NAME_SPACE::ConditionVariable	access:private	signature:()
NAME_SPACE::ConditionVariable::Construct	ConditionVariable.cpp	/^    int ConditionVariable::Construct()$/;"	f	class:NAME_SPACE::ConditionVariable	signature:()
NAME_SPACE::ConditionVariable::Construct	ConditionVariable.h	/^        int Construct();$/;"	p	class:NAME_SPACE::ConditionVariable	access:private	signature:()
NAME_SPACE::ConditionVariable::Create	ConditionVariable.cpp	/^    ConditionVariable* ConditionVariable::Create()$/;"	f	class:NAME_SPACE::ConditionVariable	signature:()
NAME_SPACE::ConditionVariable::Create	ConditionVariable.h	/^        static ConditionVariable* Create();$/;"	p	class:NAME_SPACE::ConditionVariable	access:public	signature:()
NAME_SPACE::ConditionVariable::SleepCS	ConditionVariable.cpp	/^    bool ConditionVariable::SleepCS(CriticalSection& crit_sect, unsigned long max_time_inMS)$/;"	f	class:NAME_SPACE::ConditionVariable	signature:(CriticalSection& crit_sect, unsigned long max_time_inMS)
NAME_SPACE::ConditionVariable::SleepCS	ConditionVariable.cpp	/^    void ConditionVariable::SleepCS(CriticalSection& crit_sect) {$/;"	f	class:NAME_SPACE::ConditionVariable	signature:(CriticalSection& crit_sect)
NAME_SPACE::ConditionVariable::SleepCS	ConditionVariable.h	/^        bool SleepCS(CriticalSection& crit_sect, unsigned long max_time_in_ms);$/;"	p	class:NAME_SPACE::ConditionVariable	access:public	signature:(CriticalSection& crit_sect, unsigned long max_time_in_ms)
NAME_SPACE::ConditionVariable::SleepCS	ConditionVariable.h	/^        void SleepCS(CriticalSection& crit_sect);$/;"	p	class:NAME_SPACE::ConditionVariable	access:public	signature:(CriticalSection& crit_sect)
NAME_SPACE::ConditionVariable::Wake	ConditionVariable.cpp	/^    void ConditionVariable::Wake() {$/;"	f	class:NAME_SPACE::ConditionVariable	signature:()
NAME_SPACE::ConditionVariable::Wake	ConditionVariable.h	/^        void Wake();$/;"	p	class:NAME_SPACE::ConditionVariable	access:public	signature:()
NAME_SPACE::ConditionVariable::WakeAll	ConditionVariable.cpp	/^    void ConditionVariable::WakeAll() {$/;"	f	class:NAME_SPACE::ConditionVariable	signature:()
NAME_SPACE::ConditionVariable::WakeAll	ConditionVariable.h	/^        void WakeAll();$/;"	p	class:NAME_SPACE::ConditionVariable	access:public	signature:()
NAME_SPACE::ConditionVariable::cond_	ConditionVariable.h	/^        pthread_cond_t cond_;$/;"	m	class:NAME_SPACE::ConditionVariable	access:private
NAME_SPACE::ConditionVariable::~ConditionVariable	ConditionVariable.cpp	/^    ConditionVariable::~ConditionVariable() {$/;"	f	class:NAME_SPACE::ConditionVariable	signature:()
NAME_SPACE::ConditionVariable::~ConditionVariable	ConditionVariable.h	/^        ~ConditionVariable();$/;"	p	class:NAME_SPACE::ConditionVariable	access:public	signature:()
NAME_SPACE::CriticalSection	CriticalSection.h	/^    class CriticalSection {$/;"	c	namespace:NAME_SPACE
NAME_SPACE::CriticalSection::CriticalSection	CriticalSection.cpp	/^    CriticalSection::CriticalSection() {$/;"	f	class:NAME_SPACE::CriticalSection	signature:()
NAME_SPACE::CriticalSection::CriticalSection	CriticalSection.h	/^        CriticalSection();$/;"	p	class:NAME_SPACE::CriticalSection	access:public	signature:()
NAME_SPACE::CriticalSection::Enter	CriticalSection.cpp	/^    void CriticalSection::Enter() {$/;"	f	class:NAME_SPACE::CriticalSection	signature:()
NAME_SPACE::CriticalSection::Enter	CriticalSection.h	/^        void Enter();$/;"	p	class:NAME_SPACE::CriticalSection	access:public	signature:()
NAME_SPACE::CriticalSection::Leave	CriticalSection.cpp	/^    void CriticalSection::Leave() {$/;"	f	class:NAME_SPACE::CriticalSection	signature:()
NAME_SPACE::CriticalSection::Leave	CriticalSection.h	/^        void Leave();$/;"	p	class:NAME_SPACE::CriticalSection	access:public	signature:()
NAME_SPACE::CriticalSection::mutex_	CriticalSection.h	/^        pthread_mutex_t mutex_;$/;"	m	class:NAME_SPACE::CriticalSection	access:private
NAME_SPACE::CriticalSection::~CriticalSection	CriticalSection.cpp	/^    CriticalSection::~CriticalSection() {$/;"	f	class:NAME_SPACE::CriticalSection	signature:()
NAME_SPACE::CriticalSection::~CriticalSection	CriticalSection.h	/^        ~CriticalSection();$/;"	p	class:NAME_SPACE::CriticalSection	access:public	signature:()
NAME_SPACE::CriticalSectionScoped	CriticalSection.h	/^    class CriticalSectionScoped {$/;"	c	namespace:NAME_SPACE
NAME_SPACE::CriticalSectionScoped::CriticalSectionScoped	CriticalSection.h	/^        explicit CriticalSectionScoped(CriticalSection* critsec)$/;"	f	class:NAME_SPACE::CriticalSectionScoped	access:public	signature:(CriticalSection* critsec)
NAME_SPACE::CriticalSectionScoped::ptr_crit_sec_	CriticalSection.h	/^        CriticalSection* ptr_crit_sec_;$/;"	m	class:NAME_SPACE::CriticalSectionScoped	access:private
NAME_SPACE::CriticalSectionScoped::~CriticalSectionScoped	CriticalSection.h	/^        ~CriticalSectionScoped() { ptr_crit_sec_->Leave(); }$/;"	f	class:NAME_SPACE::CriticalSectionScoped	access:public	signature:()
NAME_SPACE::EM_NET_EVENT	Common.h	/^    }EM_NET_EVENT;    $/;"	t	namespace:NAME_SPACE	typeref:enum:NAME_SPACE::emNetEvent
NAME_SPACE::ENE_ACCEPT_ERROR	Common.h	/^        ENE_ACCEPT_ERROR,\/\/ 鐩戝惉澶辫触$/;"	e	enum:NAME_SPACE::emNetEvent
NAME_SPACE::ENE_CLOSE	Common.h	/^        ENE_CLOSE\/\/ 杩炴帴鍏抽棴$/;"	e	enum:NAME_SPACE::emNetEvent
NAME_SPACE::ENE_CONNECTED	Common.h	/^        ENE_CONNECTED = 0,\/\/ 杩炴帴寤虹珛$/;"	e	enum:NAME_SPACE::emNetEvent
NAME_SPACE::ENE_HEART	Common.h	/^        ENE_HEART,\/\/ 蹇冭烦$/;"	e	enum:NAME_SPACE::emNetEvent
NAME_SPACE::ENE_HEART_TIMEOUT	Common.h	/^        ENE_HEART_TIMEOUT,\/\/ 蹇冭烦妫€娴嬭秴鏃?$/;"	e	enum:NAME_SPACE::emNetEvent
NAME_SPACE::EVE_UNKNOWN	Common.h	/^        EVE_UNKNOWN = -1,\/\/ 鏈煡閿欒$/;"	e	enum:NAME_SPACE::emNetEvent
NAME_SPACE::Event	Event.h	/^    class Event {$/;"	c	namespace:NAME_SPACE
NAME_SPACE::Event::Event	Event.cpp	/^    Event::Event(bool manual_reset, bool initially_signaled)$/;"	f	class:NAME_SPACE::Event	signature:(bool manual_reset, bool initially_signaled)
NAME_SPACE::Event::Event	Event.h	/^        Event(bool manual_reset, bool initially_signaled);$/;"	p	class:NAME_SPACE::Event	access:public	signature:(bool manual_reset, bool initially_signaled)
NAME_SPACE::Event::Reset	Event.cpp	/^    void Event::Reset() {$/;"	f	class:NAME_SPACE::Event	signature:()
NAME_SPACE::Event::Reset	Event.h	/^        void Reset();$/;"	p	class:NAME_SPACE::Event	access:public	signature:()
NAME_SPACE::Event::Set	Event.cpp	/^    void Event::Set() {$/;"	f	class:NAME_SPACE::Event	signature:()
NAME_SPACE::Event::Set	Event.h	/^        void Set();$/;"	p	class:NAME_SPACE::Event	access:public	signature:()
NAME_SPACE::Event::Wait	Event.cpp	/^    bool Event::Wait(int milliseconds)$/;"	f	class:NAME_SPACE::Event	signature:(int milliseconds)
NAME_SPACE::Event::Wait	Event.h	/^        bool Wait(int milliseconds);$/;"	p	class:NAME_SPACE::Event	access:public	signature:(int milliseconds)
NAME_SPACE::Event::event_cond_	Event.h	/^        pthread_cond_t event_cond_;$/;"	m	class:NAME_SPACE::Event	access:private
NAME_SPACE::Event::event_mutex_	Event.h	/^        pthread_mutex_t event_mutex_;$/;"	m	class:NAME_SPACE::Event	access:private
NAME_SPACE::Event::event_status_	Event.h	/^        bool event_status_;$/;"	m	class:NAME_SPACE::Event	access:private
NAME_SPACE::Event::is_manual_reset_	Event.h	/^        const bool is_manual_reset_;$/;"	m	class:NAME_SPACE::Event	access:private
NAME_SPACE::Event::kForever	Event.h	/^        static const int kForever = -1;$/;"	m	class:NAME_SPACE::Event	access:public
NAME_SPACE::Event::~Event	Event.cpp	/^    Event::~Event() {$/;"	f	class:NAME_SPACE::Event	signature:()
NAME_SPACE::Event::~Event	Event.h	/^        ~Event();$/;"	p	class:NAME_SPACE::Event	access:public	signature:()
NAME_SPACE::Get8	Common.h	/^    inline uint8 Get8(const void* memory, size_t offset) {$/;"	f	namespace:NAME_SPACE	signature:(const void* memory, size_t offset)
NAME_SPACE::GetBE16	Common.h	/^    inline uint16 GetBE16(const void* memory) {$/;"	f	namespace:NAME_SPACE	signature:(const void* memory)
NAME_SPACE::GetBE32	Common.h	/^    inline uint32 GetBE32(const void* memory) {$/;"	f	namespace:NAME_SPACE	signature:(const void* memory)
NAME_SPACE::GetBE64	Common.h	/^    inline uint64 GetBE64(const void* memory) {$/;"	f	namespace:NAME_SPACE	signature:(const void* memory)
NAME_SPACE::GetLE16	Common.h	/^    inline uint16 GetLE16(const void* memory) {$/;"	f	namespace:NAME_SPACE	signature:(const void* memory)
NAME_SPACE::GetLE32	Common.h	/^    inline uint32 GetLE32(const void* memory) {$/;"	f	namespace:NAME_SPACE	signature:(const void* memory)
NAME_SPACE::GetLE64	Common.h	/^    inline uint64 GetLE64(const void* memory) {$/;"	f	namespace:NAME_SPACE	signature:(const void* memory)
NAME_SPACE::HostToNetwork16	Common.h	/^    inline uint16 HostToNetwork16(uint16 n) {$/;"	f	namespace:NAME_SPACE	signature:(uint16 n)
NAME_SPACE::HostToNetwork32	Common.h	/^    inline uint32 HostToNetwork32(uint32 n) {$/;"	f	namespace:NAME_SPACE	signature:(uint32 n)
NAME_SPACE::HostToNetwork64	Common.h	/^    inline uint64 HostToNetwork64(uint64 n) {$/;"	f	namespace:NAME_SPACE	signature:(uint64 n)
NAME_SPACE::ImplicitCastToBool	Common.h	/^    inline bool ImplicitCastToBool(bool result) { return result; }$/;"	f	namespace:NAME_SPACE	signature:(bool result)
NAME_SPACE::IsHostBigEndian	Common.h	/^    inline bool IsHostBigEndian() {$/;"	f	namespace:NAME_SPACE	signature:()
NAME_SPACE::ListenerErrorCb	ServerWorker.cpp	/^    static void ListenerErrorCb(struct evconnlistener *listener, void *user_data) {  $/;"	f	namespace:NAME_SPACE	signature:(struct evconnlistener *listener, void *user_data)
NAME_SPACE::ListenerEventCb	ServerWorker.cpp	/^    static void ListenerEventCb(evconnlistener *listener, evutil_socket_t fd,  $/;"	f	namespace:NAME_SPACE	signature:(evconnlistener *listener, evutil_socket_t fd, sockaddr *sa, int socklen, void *user_data)
NAME_SPACE::NativeSocket	Common.h	/^    typedef int NativeSocket;$/;"	t	namespace:NAME_SPACE
NAME_SPACE::NetFrame	NetFrame.h	/^    class NetFrame {  $/;"	c	namespace:NAME_SPACE
NAME_SPACE::NetFrame::DISALLOW_EVIL_CONSTRUCTORS	NetFrame.h	/^        DISALLOW_EVIL_CONSTRUCTORS(NetFrame);  $/;"	p	class:NAME_SPACE::NetFrame	access:private	signature:(NetFrame)
NAME_SPACE::NetFrame::Instance	NetFrame.cpp	/^    NetFrame* NetFrame::Instance() {  $/;"	f	class:NAME_SPACE::NetFrame	signature:()
NAME_SPACE::NetFrame::Instance	NetFrame.h	/^        static NetFrame* Instance();  $/;"	p	class:NAME_SPACE::NetFrame	access:public	signature:()
NAME_SPACE::NetFrame::NetFrame	NetFrame.cpp	/^    NetFrame::NetFrame():_run_flg(false){}  $/;"	f	class:NAME_SPACE::NetFrame	signature:()
NAME_SPACE::NetFrame::NetFrame	NetFrame.h	/^        NetFrame();  $/;"	p	class:NAME_SPACE::NetFrame	access:protected	signature:()
NAME_SPACE::NetFrame::NetRunnable	NetFrame.h	/^        class NetRunnable:public Runnable {  $/;"	c	class:NAME_SPACE::NetFrame	inherits:Runnable	access:private
NAME_SPACE::NetFrame::NetRunnable::NetRunnable	NetFrame.cpp	/^    NetFrame::NetRunnable::NetRunnable() {}  $/;"	f	class:NAME_SPACE::NetFrame::NetRunnable	signature:()
NAME_SPACE::NetFrame::NetRunnable::NetRunnable	NetFrame.h	/^            NetRunnable();  $/;"	p	class:NAME_SPACE::NetFrame::NetRunnable	access:public	signature:()
NAME_SPACE::NetFrame::NetRunnable::Run	NetFrame.cpp	/^    void NetFrame::NetRunnable::Run(void* arg) {  $/;"	f	class:NAME_SPACE::NetFrame::NetRunnable	signature:(void* arg)
NAME_SPACE::NetFrame::NetRunnable::Run	NetFrame.h	/^            virtual void Run(void*);  $/;"	p	class:NAME_SPACE::NetFrame::NetRunnable	access:protected	signature:(void*)
NAME_SPACE::NetFrame::NetRunnable::~NetRunnable	NetFrame.cpp	/^    NetFrame::NetRunnable::~NetRunnable() {}  $/;"	f	class:NAME_SPACE::NetFrame::NetRunnable	signature:()
NAME_SPACE::NetFrame::NetRunnable::~NetRunnable	NetFrame.h	/^            ~NetRunnable();  $/;"	p	class:NAME_SPACE::NetFrame::NetRunnable	access:public	signature:()
NAME_SPACE::NetFrame::NetWorkExit	NetFrame.cpp	/^    int NetFrame::NetWorkExit() {  $/;"	f	class:NAME_SPACE::NetFrame	signature:()
NAME_SPACE::NetFrame::NetWorkExit	NetFrame.h	/^        int NetWorkExit();  $/;"	p	class:NAME_SPACE::NetFrame	access:public	signature:()
NAME_SPACE::NetFrame::NetWorkInit	NetFrame.cpp	/^    int NetFrame::NetWorkInit() {  $/;"	f	class:NAME_SPACE::NetFrame	signature:()
NAME_SPACE::NetFrame::NetWorkInit	NetFrame.h	/^        int NetWorkInit();  $/;"	p	class:NAME_SPACE::NetFrame	access:public	signature:()
NAME_SPACE::NetFrame::_base	NetFrame.cpp	/^    struct event_base* NetFrame::_base = nullptr;  $/;"	m	class:NAME_SPACE::NetFrame	typeref:struct:NAME_SPACE::NetFrame::	file:
NAME_SPACE::NetFrame::_base	NetFrame.h	/^        static struct event_base* _base;  $/;"	m	class:NAME_SPACE::NetFrame	typeref:struct:NAME_SPACE::NetFrame::event_base	access:public
NAME_SPACE::NetFrame::_main_loop_thread	NetFrame.h	/^        Thread _main_loop_thread;  $/;"	m	class:NAME_SPACE::NetFrame	access:private
NAME_SPACE::NetFrame::_run_flg	NetFrame.h	/^        volatile bool _run_flg;  $/;"	m	class:NAME_SPACE::NetFrame	access:private
NAME_SPACE::NetFrame::_runnable	NetFrame.h	/^        NetRunnable _runnable;  $/;"	m	class:NAME_SPACE::NetFrame	access:private
NAME_SPACE::NetFrame::~NetFrame	NetFrame.cpp	/^    NetFrame::~NetFrame(){  $/;"	f	class:NAME_SPACE::NetFrame	signature:()
NAME_SPACE::NetFrame::~NetFrame	NetFrame.h	/^        ~NetFrame();  $/;"	p	class:NAME_SPACE::NetFrame	access:protected	signature:()
NAME_SPACE::NetworkToHost16	Common.h	/^    inline uint16 NetworkToHost16(uint16 n) {$/;"	f	namespace:NAME_SPACE	signature:(uint16 n)
NAME_SPACE::NetworkToHost32	Common.h	/^    inline uint32 NetworkToHost32(uint32 n) {$/;"	f	namespace:NAME_SPACE	signature:(uint32 n)
NAME_SPACE::NetworkToHost64	Common.h	/^    inline uint64 NetworkToHost64(uint64 n) {$/;"	f	namespace:NAME_SPACE	signature:(uint64 n)
NAME_SPACE::PRIORITY_ABOVE_NORMAL	Thread.h	/^        PRIORITY_ABOVE_NORMAL = 1,$/;"	e	enum:NAME_SPACE::ThreadPriority
NAME_SPACE::PRIORITY_HIGH	Thread.h	/^        PRIORITY_HIGH = 2,$/;"	e	enum:NAME_SPACE::ThreadPriority
NAME_SPACE::PRIORITY_IDLE	Thread.h	/^        PRIORITY_IDLE = -1,$/;"	e	enum:NAME_SPACE::ThreadPriority
NAME_SPACE::PRIORITY_NORMAL	Thread.h	/^        PRIORITY_NORMAL = 0,$/;"	e	enum:NAME_SPACE::ThreadPriority
NAME_SPACE::PacketLength	Common.h	/^typedef uint16 PacketLength;$/;"	t	namespace:NAME_SPACE
NAME_SPACE::PassiveTCPClient	PassiveTCPClient.h	/^    class PassiveTCPClient {  $/;"	c	namespace:NAME_SPACE
NAME_SPACE::PassiveTCPClient::GetFd	PassiveTCPClient.h	/^        SOCKET GetFd() { return _fd; }  $/;"	f	class:NAME_SPACE::PassiveTCPClient	access:public	signature:()
NAME_SPACE::PassiveTCPClient::GetHeartFlg	PassiveTCPClient.h	/^        bool GetHeartFlg() { return _heart_flg; }  $/;"	f	class:NAME_SPACE::PassiveTCPClient	access:public	signature:()
NAME_SPACE::PassiveTCPClient::PassiveTCPClient	PassiveTCPClient.cpp	/^    PassiveTCPClient::PassiveTCPClient(SOCKET fd, struct sockaddr_in* sa, short heart_time)  $/;"	f	class:NAME_SPACE::PassiveTCPClient	signature:(SOCKET fd, struct sockaddr_in* sa, short heart_time)
NAME_SPACE::PassiveTCPClient::PassiveTCPClient	PassiveTCPClient.h	/^        PassiveTCPClient(SOCKET fd, struct sockaddr_in* sa, short heart_time = 10);  $/;"	p	class:NAME_SPACE::PassiveTCPClient	access:public	signature:(SOCKET fd, struct sockaddr_in* sa, short heart_time = 10)
NAME_SPACE::PassiveTCPClient::ProcEvent	PassiveTCPClient.cpp	/^    void PassiveTCPClient::ProcEvent(short events) {  $/;"	f	class:NAME_SPACE::PassiveTCPClient	signature:(short events)
NAME_SPACE::PassiveTCPClient::ProcEvent	PassiveTCPClient.h	/^        void ProcEvent(short events);  $/;"	p	class:NAME_SPACE::PassiveTCPClient	access:public	signature:(short events)
NAME_SPACE::PassiveTCPClient::PutRecvData	PassiveTCPClient.cpp	/^    void PassiveTCPClient::PutRecvData(void* data, size_t len) {  $/;"	f	class:NAME_SPACE::PassiveTCPClient	signature:(void* data, size_t len)
NAME_SPACE::PassiveTCPClient::PutRecvData	PassiveTCPClient.h	/^        void PutRecvData(void*, size_t);  $/;"	p	class:NAME_SPACE::PassiveTCPClient	access:public	signature:(void*, size_t)
NAME_SPACE::PassiveTCPClient::SendData	PassiveTCPClient.cpp	/^    int PassiveTCPClient::SendData(void* pdata, size_t len) {  $/;"	f	class:NAME_SPACE::PassiveTCPClient	signature:(void* pdata, size_t len)
NAME_SPACE::PassiveTCPClient::SendData	PassiveTCPClient.h	/^        int SendData(void* pdata, size_t len);  $/;"	p	class:NAME_SPACE::PassiveTCPClient	access:public	signature:(void* pdata, size_t len)
NAME_SPACE::PassiveTCPClient::SetHeartFlg	PassiveTCPClient.h	/^        void SetHeartFlg(bool flg) { _heart_flg = flg; }  $/;"	f	class:NAME_SPACE::PassiveTCPClient	access:public	signature:(bool flg)
NAME_SPACE::PassiveTCPClient::StartWork	PassiveTCPClient.cpp	/^    bool PassiveTCPClient::StartWork(TCPClientSignal* pTCPClientSignal) {  $/;"	f	class:NAME_SPACE::PassiveTCPClient	signature:(TCPClientSignal* pTCPClientSignal)
NAME_SPACE::PassiveTCPClient::StartWork	PassiveTCPClient.h	/^        bool StartWork(TCPClientSignal*);  $/;"	p	class:NAME_SPACE::PassiveTCPClient	access:public	signature:(TCPClientSignal*)
NAME_SPACE::PassiveTCPClient::StopWork	PassiveTCPClient.cpp	/^    void PassiveTCPClient::StopWork() {  $/;"	f	class:NAME_SPACE::PassiveTCPClient	signature:()
NAME_SPACE::PassiveTCPClient::StopWork	PassiveTCPClient.h	/^        void StopWork();  $/;"	p	class:NAME_SPACE::PassiveTCPClient	access:public	signature:()
NAME_SPACE::PassiveTCPClient::_bev	PassiveTCPClient.h	/^        struct bufferevent *_bev;  $/;"	m	class:NAME_SPACE::PassiveTCPClient	typeref:struct:NAME_SPACE::PassiveTCPClient::bufferevent	access:private
NAME_SPACE::PassiveTCPClient::_client_ip	PassiveTCPClient.h	/^        std::string _client_ip;  $/;"	m	class:NAME_SPACE::PassiveTCPClient	access:private
NAME_SPACE::PassiveTCPClient::_client_port	PassiveTCPClient.h	/^        unsigned short _client_port;  $/;"	m	class:NAME_SPACE::PassiveTCPClient	access:private
NAME_SPACE::PassiveTCPClient::_event	PassiveTCPClient.h	/^        struct event *_event;  $/;"	m	class:NAME_SPACE::PassiveTCPClient	typeref:struct:NAME_SPACE::PassiveTCPClient::event	access:private
NAME_SPACE::PassiveTCPClient::_fd	PassiveTCPClient.h	/^        SOCKET _fd;  $/;"	m	class:NAME_SPACE::PassiveTCPClient	access:private
NAME_SPACE::PassiveTCPClient::_heart_flg	PassiveTCPClient.h	/^        volatile bool _heart_flg;  $/;"	m	class:NAME_SPACE::PassiveTCPClient	access:private
NAME_SPACE::PassiveTCPClient::_heart_time	PassiveTCPClient.h	/^        short _heart_time;  $/;"	m	class:NAME_SPACE::PassiveTCPClient	access:private
NAME_SPACE::PassiveTCPClient::_pTCPClientSignal	PassiveTCPClient.h	/^        TCPClientSignal* _pTCPClientSignal;  $/;"	m	class:NAME_SPACE::PassiveTCPClient	access:public
NAME_SPACE::PassiveTCPClient::~PassiveTCPClient	PassiveTCPClient.cpp	/^    PassiveTCPClient::~PassiveTCPClient() {  $/;"	f	class:NAME_SPACE::PassiveTCPClient	signature:()
NAME_SPACE::PassiveTCPClient::~PassiveTCPClient	PassiveTCPClient.h	/^        ~PassiveTCPClient();  $/;"	p	class:NAME_SPACE::PassiveTCPClient	access:public	signature:()
NAME_SPACE::PassiveTCPEventCb	PassiveTCPClient.cpp	/^    void PassiveTCPEventCb(struct bufferevent *bev, short events, void *data) {  $/;"	f	namespace:NAME_SPACE	signature:(struct bufferevent *bev, short events, void *data)
NAME_SPACE::PassiveTCPReadEventCb	PassiveTCPClient.cpp	/^    void PassiveTCPReadEventCb(struct bufferevent *bev, void *data) {  $/;"	f	namespace:NAME_SPACE	signature:(struct bufferevent *bev, void *data)
NAME_SPACE::PassiveTCPTimeOutEventCb	PassiveTCPClient.cpp	/^    void PassiveTCPTimeOutEventCb(evutil_socket_t fd, short, void *data) {  $/;"	f	namespace:NAME_SPACE	signature:(evutil_socket_t fd, short, void *data)
NAME_SPACE::RWLock	RWLock.h	/^    class RWLock$/;"	c	namespace:NAME_SPACE
NAME_SPACE::RWLock::AcquireLockExclusive	RWLock.cpp	/^    void RWLock::AcquireLockExclusive() {$/;"	f	class:NAME_SPACE::RWLock	signature:()
NAME_SPACE::RWLock::AcquireLockExclusive	RWLock.h	/^        void AcquireLockExclusive();$/;"	p	class:NAME_SPACE::RWLock	access:public	signature:()
NAME_SPACE::RWLock::AcquireLockShared	RWLock.cpp	/^    void RWLock::AcquireLockShared() {$/;"	f	class:NAME_SPACE::RWLock	signature:()
NAME_SPACE::RWLock::AcquireLockShared	RWLock.h	/^        void AcquireLockShared();$/;"	p	class:NAME_SPACE::RWLock	access:public	signature:()
NAME_SPACE::RWLock::Create	RWLock.cpp	/^    RWLock* RWLock::Create() {$/;"	f	class:NAME_SPACE::RWLock	signature:()
NAME_SPACE::RWLock::Create	RWLock.h	/^        static RWLock* Create();$/;"	p	class:NAME_SPACE::RWLock	access:public	signature:()
NAME_SPACE::RWLock::Init	RWLock.cpp	/^    bool RWLock::Init() {$/;"	f	class:NAME_SPACE::RWLock	signature:()
NAME_SPACE::RWLock::Init	RWLock.h	/^        bool Init();$/;"	p	class:NAME_SPACE::RWLock	access:private	signature:()
NAME_SPACE::RWLock::RWLock	RWLock.cpp	/^    RWLock::RWLock():lock_() {$/;"	f	class:NAME_SPACE::RWLock	signature:()
NAME_SPACE::RWLock::RWLock	RWLock.h	/^        RWLock();$/;"	p	class:NAME_SPACE::RWLock	access:private	signature:()
NAME_SPACE::RWLock::ReleaseLockExclusive	RWLock.cpp	/^    void RWLock::ReleaseLockExclusive() {$/;"	f	class:NAME_SPACE::RWLock	signature:()
NAME_SPACE::RWLock::ReleaseLockExclusive	RWLock.h	/^        void ReleaseLockExclusive();$/;"	p	class:NAME_SPACE::RWLock	access:public	signature:()
NAME_SPACE::RWLock::ReleaseLockShared	RWLock.cpp	/^    void RWLock::ReleaseLockShared() {$/;"	f	class:NAME_SPACE::RWLock	signature:()
NAME_SPACE::RWLock::ReleaseLockShared	RWLock.h	/^        void ReleaseLockShared();$/;"	p	class:NAME_SPACE::RWLock	access:public	signature:()
NAME_SPACE::RWLock::lock_	RWLock.h	/^        pthread_rwlock_t lock_;$/;"	m	class:NAME_SPACE::RWLock	access:private
NAME_SPACE::RWLock::~RWLock	RWLock.cpp	/^    RWLock::~RWLock() {$/;"	f	class:NAME_SPACE::RWLock	signature:()
NAME_SPACE::RWLock::~RWLock	RWLock.h	/^        ~RWLock();$/;"	p	class:NAME_SPACE::RWLock	access:public	signature:()
NAME_SPACE::ReadLockScoped	RWLock.h	/^    class ReadLockScoped$/;"	c	namespace:NAME_SPACE
NAME_SPACE::ReadLockScoped::ReadLockScoped	RWLock.h	/^        ReadLockScoped(RWLock& rw_lock):rw_lock_(rw_lock) {$/;"	f	class:NAME_SPACE::ReadLockScoped	access:public	signature:(RWLock& rw_lock)
NAME_SPACE::ReadLockScoped::rw_lock_	RWLock.h	/^        RWLock& rw_lock_;$/;"	m	class:NAME_SPACE::ReadLockScoped	access:private
NAME_SPACE::ReadLockScoped::~ReadLockScoped	RWLock.h	/^        ~ReadLockScoped() {$/;"	f	class:NAME_SPACE::ReadLockScoped	access:public	signature:()
NAME_SPACE::Runnable	Thread.h	/^    class Runnable {$/;"	c	namespace:NAME_SPACE
NAME_SPACE::Runnable::DISALLOW_COPY_AND_ASSIGN	Thread.h	/^        DISALLOW_COPY_AND_ASSIGN(Runnable);$/;"	p	class:NAME_SPACE::Runnable	access:private	signature:(Runnable)
NAME_SPACE::Runnable::Run	Thread.h	/^        virtual void Run(void*) = 0;$/;"	p	class:NAME_SPACE::Runnable	access:public	signature:(void*)
NAME_SPACE::Runnable::Runnable	Thread.h	/^        Runnable() {}$/;"	f	class:NAME_SPACE::Runnable	access:protected	signature:()
NAME_SPACE::Runnable::~Runnable	Thread.h	/^        virtual ~Runnable() {}$/;"	f	class:NAME_SPACE::Runnable	access:public	signature:()
NAME_SPACE::ServerWorker	ServerWorker.h	/^    class ServerWorker {  $/;"	c	namespace:NAME_SPACE
NAME_SPACE::ServerWorker::Accept	ServerWorker.cpp	/^    void ServerWorker::Accept(int fd, struct sockaddr_in *sa) {  $/;"	f	class:NAME_SPACE::ServerWorker	signature:(int fd, struct sockaddr_in *sa)
NAME_SPACE::ServerWorker::Accept	ServerWorker.h	/^        void Accept(int fd, struct sockaddr_in *sa);  $/;"	p	class:NAME_SPACE::ServerWorker	access:public	signature:(int fd, struct sockaddr_in *sa)
NAME_SPACE::ServerWorker::AcceptError	ServerWorker.cpp	/^    void ServerWorker::AcceptError(int fd, EM_NET_EVENT msg) {  $/;"	f	class:NAME_SPACE::ServerWorker	signature:(int fd, EM_NET_EVENT msg)
NAME_SPACE::ServerWorker::AcceptError	ServerWorker.h	/^        void AcceptError(int fd, EM_NET_EVENT msg);  $/;"	p	class:NAME_SPACE::ServerWorker	access:public	signature:(int fd, EM_NET_EVENT msg)
NAME_SPACE::ServerWorker::GetFd	ServerWorker.h	/^        SOCKET GetFd() { return _listen_fd; }  $/;"	f	class:NAME_SPACE::ServerWorker	access:public	signature:()
NAME_SPACE::ServerWorker::ServerWorker	ServerWorker.cpp	/^    ServerWorker::ServerWorker(int listen_port)  $/;"	f	class:NAME_SPACE::ServerWorker	signature:(int listen_port)
NAME_SPACE::ServerWorker::ServerWorker	ServerWorker.cpp	/^    ServerWorker::ServerWorker(std::string listen_ip, int listen_port)  $/;"	f	class:NAME_SPACE::ServerWorker	signature:(std::string listen_ip, int listen_port)
NAME_SPACE::ServerWorker::ServerWorker	ServerWorker.h	/^        ServerWorker(int listen_port);  $/;"	p	class:NAME_SPACE::ServerWorker	access:public	signature:(int listen_port)
NAME_SPACE::ServerWorker::ServerWorker	ServerWorker.h	/^        ServerWorker(std::string listen_ip, int listen_port);  $/;"	p	class:NAME_SPACE::ServerWorker	access:public	signature:(std::string listen_ip, int listen_port)
NAME_SPACE::ServerWorker::StartWork	ServerWorker.cpp	/^    bool ServerWorker::StartWork(TCPServerSignal* pTCPServerSignal) {  $/;"	f	class:NAME_SPACE::ServerWorker	signature:(TCPServerSignal* pTCPServerSignal)
NAME_SPACE::ServerWorker::StartWork	ServerWorker.h	/^        bool StartWork(TCPServerSignal* pTCPServerSignal);  $/;"	p	class:NAME_SPACE::ServerWorker	access:public	signature:(TCPServerSignal* pTCPServerSignal)
NAME_SPACE::ServerWorker::StopWork	ServerWorker.cpp	/^    void ServerWorker::StopWork()  $/;"	f	class:NAME_SPACE::ServerWorker	signature:()
NAME_SPACE::ServerWorker::StopWork	ServerWorker.h	/^        void StopWork();  $/;"	p	class:NAME_SPACE::ServerWorker	access:public	signature:()
NAME_SPACE::ServerWorker::_listen_fd	ServerWorker.h	/^        SOCKET _listen_fd;  $/;"	m	class:NAME_SPACE::ServerWorker	access:private
NAME_SPACE::ServerWorker::_listen_ip	ServerWorker.h	/^        std::string _listen_ip;  $/;"	m	class:NAME_SPACE::ServerWorker	access:private
NAME_SPACE::ServerWorker::_listen_port	ServerWorker.h	/^        unsigned short _listen_port;  $/;"	m	class:NAME_SPACE::ServerWorker	access:private
NAME_SPACE::ServerWorker::_listener	ServerWorker.h	/^        evconnlistener* _listener;  $/;"	m	class:NAME_SPACE::ServerWorker	access:private
NAME_SPACE::ServerWorker::_pTCPServerSignal	ServerWorker.h	/^        TCPServerSignal* _pTCPServerSignal;  $/;"	m	class:NAME_SPACE::ServerWorker	access:private
NAME_SPACE::ServerWorker::~ServerWorker	ServerWorker.h	/^        ~ServerWorker();  $/;"	p	class:NAME_SPACE::ServerWorker	access:public	signature:()
NAME_SPACE::Set8	Common.h	/^    inline void Set8(void* memory, size_t offset, uint8 v) {$/;"	f	namespace:NAME_SPACE	signature:(void* memory, size_t offset, uint8 v)
NAME_SPACE::SetBE16	Common.h	/^    inline void SetBE16(void* memory, uint16 v) {$/;"	f	namespace:NAME_SPACE	signature:(void* memory, uint16 v)
NAME_SPACE::SetBE32	Common.h	/^    inline void SetBE32(void* memory, uint32 v) {$/;"	f	namespace:NAME_SPACE	signature:(void* memory, uint32 v)
NAME_SPACE::SetBE64	Common.h	/^    inline void SetBE64(void* memory, uint64 v) {$/;"	f	namespace:NAME_SPACE	signature:(void* memory, uint64 v)
NAME_SPACE::SetLE16	Common.h	/^    inline void SetLE16(void* memory, uint16 v) {$/;"	f	namespace:NAME_SPACE	signature:(void* memory, uint16 v)
NAME_SPACE::SetLE32	Common.h	/^    inline void SetLE32(void* memory, uint32 v) {$/;"	f	namespace:NAME_SPACE	signature:(void* memory, uint32 v)
NAME_SPACE::SetLE64	Common.h	/^    inline void SetLE64(void* memory, uint64 v) {$/;"	f	namespace:NAME_SPACE	signature:(void* memory, uint64 v)
NAME_SPACE::SockOptArg	Common.h	/^    typedef void* SockOptArg;$/;"	t	namespace:NAME_SPACE
NAME_SPACE::TCPClientSignal	NetSignal.h	/^    class TCPClientSignal {  $/;"	c	namespace:NAME_SPACE
NAME_SPACE::TCPClientSignal::SignalEvent	NetSignal.h	/^        sigslot::signal2<SOCKET, EM_NET_EVENT> SignalEvent;  $/;"	m	class:NAME_SPACE::TCPClientSignal	access:public
NAME_SPACE::TCPClientSignal::SignalRecvData	NetSignal.h	/^        sigslot::signal3<SOCKET, void*, size_t> SignalRecvData;  $/;"	m	class:NAME_SPACE::TCPClientSignal	access:public
NAME_SPACE::TCPClientSignal::TCPClientSignal	NetSignal.h	/^        TCPClientSignal() {}  $/;"	f	class:NAME_SPACE::TCPClientSignal	access:public	signature:()
NAME_SPACE::TCPClientSignal::~TCPClientSignal	NetSignal.h	/^        ~TCPClientSignal() {}  $/;"	f	class:NAME_SPACE::TCPClientSignal	access:public	signature:()
NAME_SPACE::TCPServerSignal	NetSignal.h	/^    class TCPServerSignal {  $/;"	c	namespace:NAME_SPACE
NAME_SPACE::TCPServerSignal::SignalAccept	NetSignal.h	/^        sigslot::signal2<SOCKET , struct sockaddr_in*> SignalAccept;  $/;"	m	class:NAME_SPACE::TCPServerSignal	access:public
NAME_SPACE::TCPServerSignal::SignalAcceptError	NetSignal.h	/^        sigslot::signal2<SOCKET , EM_NET_EVENT> SignalAcceptError;  $/;"	m	class:NAME_SPACE::TCPServerSignal	access:public
NAME_SPACE::TCPServerSignal::TCPServerSignal	NetSignal.h	/^        TCPServerSignal() {}  $/;"	f	class:NAME_SPACE::TCPServerSignal	access:public	signature:()
NAME_SPACE::TCPServerSignal::~TCPServerSignal	NetSignal.h	/^        ~TCPServerSignal() {}  $/;"	f	class:NAME_SPACE::TCPServerSignal	access:public	signature:()
NAME_SPACE::Thread	Thread.h	/^    class Thread {$/;"	c	namespace:NAME_SPACE
NAME_SPACE::Thread::Current	Thread.cpp	/^    Thread* Thread::Current() {$/;"	f	class:NAME_SPACE::Thread	signature:()
NAME_SPACE::Thread::Current	Thread.h	/^        static Thread* Current();$/;"	p	class:NAME_SPACE::Thread	access:public	signature:()
NAME_SPACE::Thread::DISALLOW_COPY_AND_ASSIGN	Thread.h	/^        DISALLOW_COPY_AND_ASSIGN(Thread);$/;"	p	class:NAME_SPACE::Thread	access:private	signature:(Thread)
NAME_SPACE::Thread::GetPThread	Thread.h	/^        pthread_t GetPThread() { return thread_; }$/;"	f	class:NAME_SPACE::Thread	access:public	signature:()
NAME_SPACE::Thread::IsCurrent	Thread.h	/^        bool IsCurrent() const { return Current() == this;}$/;"	f	class:NAME_SPACE::Thread	access:public	signature:() const
NAME_SPACE::Thread::IsOwned	Thread.cpp	/^    bool Thread::IsOwned() {$/;"	f	class:NAME_SPACE::Thread	signature:()
NAME_SPACE::Thread::IsOwned	Thread.h	/^        bool IsOwned();$/;"	p	class:NAME_SPACE::Thread	access:public	signature:()
NAME_SPACE::Thread::Join	Thread.cpp	/^    void Thread::Join() {$/;"	f	class:NAME_SPACE::Thread	signature:()
NAME_SPACE::Thread::Join	Thread.h	/^        void Join();$/;"	p	class:NAME_SPACE::Thread	access:protected	signature:()
NAME_SPACE::Thread::PreRun	Thread.cpp	/^    void* Thread::PreRun(void* pv) {$/;"	f	class:NAME_SPACE::Thread	signature:(void* pv)
NAME_SPACE::Thread::PreRun	Thread.h	/^        static void *PreRun(void *pv);$/;"	p	class:NAME_SPACE::Thread	access:private	signature:(void *pv)
NAME_SPACE::Thread::SetName	Thread.cpp	/^    bool Thread::SetName(const std::string& name, const void* obj) {$/;"	f	class:NAME_SPACE::Thread	signature:(const std::string& name, const void* obj)
NAME_SPACE::Thread::SetName	Thread.h	/^        bool SetName(const std::string& name, const void* obj);$/;"	p	class:NAME_SPACE::Thread	access:public	signature:(const std::string& name, const void* obj)
NAME_SPACE::Thread::SetPriority	Thread.cpp	/^    bool Thread::SetPriority(ThreadPriority priority) {$/;"	f	class:NAME_SPACE::Thread	signature:(ThreadPriority priority)
NAME_SPACE::Thread::SetPriority	Thread.h	/^        bool SetPriority(ThreadPriority priority);$/;"	p	class:NAME_SPACE::Thread	access:public	signature:(ThreadPriority priority)
NAME_SPACE::Thread::SleepMs	Thread.cpp	/^    bool Thread::SleepMs(int milliseconds) {$/;"	f	class:NAME_SPACE::Thread	signature:(int milliseconds)
NAME_SPACE::Thread::SleepMs	Thread.h	/^        static bool SleepMs(int millis);$/;"	p	class:NAME_SPACE::Thread	access:public	signature:(int millis)
NAME_SPACE::Thread::Start	Thread.cpp	/^    bool Thread::Start(Runnable* runnable, void* userdata) {$/;"	f	class:NAME_SPACE::Thread	signature:(Runnable* runnable, void* userdata)
NAME_SPACE::Thread::Start	Thread.h	/^        bool Start(Runnable* runnable,void* userdata=nullptr);$/;"	p	class:NAME_SPACE::Thread	access:public	signature:(Runnable* runnable,void* userdata=nullptr)
NAME_SPACE::Thread::Stop	Thread.cpp	/^    void Thread::Stop() {$/;"	f	class:NAME_SPACE::Thread	signature:()
NAME_SPACE::Thread::Stop	Thread.h	/^        virtual void Stop();$/;"	p	class:NAME_SPACE::Thread	access:public	signature:()
NAME_SPACE::Thread::Thread	Thread.cpp	/^    Thread::Thread():priority_(PRIORITY_NORMAL),running_(true, false),owned_(true) {$/;"	f	class:NAME_SPACE::Thread	signature:()
NAME_SPACE::Thread::Thread	Thread.h	/^        Thread();$/;"	p	class:NAME_SPACE::Thread	access:public	signature:()
NAME_SPACE::Thread::UnwrapCurrent	Thread.h	/^        void UnwrapCurrent();$/;"	p	class:NAME_SPACE::Thread	access:public	signature:()
NAME_SPACE::Thread::WrapCurrent	Thread.h	/^        bool WrapCurrent();$/;"	p	class:NAME_SPACE::Thread	access:public	signature:()
NAME_SPACE::Thread::WrapCurrentWithThreadManager	Thread.h	/^        bool WrapCurrentWithThreadManager(ThreadManager* thread_manager);$/;"	p	class:NAME_SPACE::Thread	access:private	signature:(ThreadManager* thread_manager)
NAME_SPACE::Thread::name	Thread.h	/^        const std::string& name() const { return name_;}$/;"	f	class:NAME_SPACE::Thread	access:public	signature:() const
NAME_SPACE::Thread::name_	Thread.h	/^        std::string name_;$/;"	m	class:NAME_SPACE::Thread	access:private
NAME_SPACE::Thread::owned_	Thread.h	/^        bool owned_;$/;"	m	class:NAME_SPACE::Thread	access:private
NAME_SPACE::Thread::priority	Thread.h	/^        ThreadPriority priority() const { return priority_; }$/;"	f	class:NAME_SPACE::Thread	access:public	signature:() const
NAME_SPACE::Thread::priority_	Thread.h	/^        ThreadPriority priority_;$/;"	m	class:NAME_SPACE::Thread	access:private
NAME_SPACE::Thread::running	Thread.h	/^        bool running() { return running_.Wait(0); }$/;"	f	class:NAME_SPACE::Thread	access:private	signature:()
NAME_SPACE::Thread::running_	Thread.h	/^        Event running_;  \/\/ Signalled means running.$/;"	m	class:NAME_SPACE::Thread	access:private
NAME_SPACE::Thread::thread_	Thread.h	/^        pthread_t thread_;$/;"	m	class:NAME_SPACE::Thread	access:private
NAME_SPACE::Thread::~Thread	Thread.h	/^        virtual ~Thread() { Stop(); }$/;"	f	class:NAME_SPACE::Thread	access:public	signature:()
NAME_SPACE::ThreadInit	Thread.cpp	/^    struct ThreadInit {$/;"	s	namespace:NAME_SPACE	file:
NAME_SPACE::ThreadInit::runnable	Thread.cpp	/^        Runnable* runnable;$/;"	m	struct:NAME_SPACE::ThreadInit	file:	access:public
NAME_SPACE::ThreadInit::thread	Thread.cpp	/^        Thread* thread;$/;"	m	struct:NAME_SPACE::ThreadInit	file:	access:public
NAME_SPACE::ThreadInit::userdata	Thread.cpp	/^        void* userdata;$/;"	m	struct:NAME_SPACE::ThreadInit	file:	access:public
NAME_SPACE::ThreadManager	Thread.h	/^    class ThreadManager {$/;"	c	namespace:NAME_SPACE
NAME_SPACE::ThreadManager::CurrentThread	Thread.cpp	/^    Thread *ThreadManager::CurrentThread() {$/;"	f	class:NAME_SPACE::ThreadManager	signature:()
NAME_SPACE::ThreadManager::CurrentThread	Thread.h	/^        Thread* CurrentThread();$/;"	p	class:NAME_SPACE::ThreadManager	access:public	signature:()
NAME_SPACE::ThreadManager::DISALLOW_COPY_AND_ASSIGN	Thread.h	/^        DISALLOW_COPY_AND_ASSIGN(ThreadManager);$/;"	p	class:NAME_SPACE::ThreadManager	access:private	signature:(ThreadManager)
NAME_SPACE::ThreadManager::Instance	Thread.cpp	/^    ThreadManager* ThreadManager::Instance() {$/;"	f	class:NAME_SPACE::ThreadManager	signature:()
NAME_SPACE::ThreadManager::Instance	Thread.h	/^        static ThreadManager* Instance();$/;"	p	class:NAME_SPACE::ThreadManager	access:public	signature:()
NAME_SPACE::ThreadManager::SetCurrentThread	Thread.cpp	/^    void ThreadManager::SetCurrentThread(Thread *thread) {$/;"	f	class:NAME_SPACE::ThreadManager	signature:(Thread *thread)
NAME_SPACE::ThreadManager::SetCurrentThread	Thread.h	/^        void SetCurrentThread(Thread* thread);$/;"	p	class:NAME_SPACE::ThreadManager	access:public	signature:(Thread* thread)
NAME_SPACE::ThreadManager::ThreadManager	Thread.cpp	/^    ThreadManager::ThreadManager() {$/;"	f	class:NAME_SPACE::ThreadManager	signature:()
NAME_SPACE::ThreadManager::ThreadManager	Thread.h	/^        ThreadManager();$/;"	p	class:NAME_SPACE::ThreadManager	access:public	signature:()
NAME_SPACE::ThreadManager::kForever	Thread.h	/^        static const int kForever = -1;$/;"	m	class:NAME_SPACE::ThreadManager	access:public
NAME_SPACE::ThreadManager::key_	Thread.h	/^        pthread_key_t key_;$/;"	m	class:NAME_SPACE::ThreadManager	access:private
NAME_SPACE::ThreadManager::~ThreadManager	Thread.cpp	/^    ThreadManager::~ThreadManager() {$/;"	f	class:NAME_SPACE::ThreadManager	signature:()
NAME_SPACE::ThreadManager::~ThreadManager	Thread.h	/^        ~ThreadManager();$/;"	p	class:NAME_SPACE::ThreadManager	access:public	signature:()
NAME_SPACE::ThreadPriority	Thread.h	/^    enum ThreadPriority {$/;"	g	namespace:NAME_SPACE
NAME_SPACE::WriteLockScoped	RWLock.h	/^    class WriteLockScoped$/;"	c	namespace:NAME_SPACE
NAME_SPACE::WriteLockScoped::WriteLockScoped	RWLock.h	/^        WriteLockScoped(RWLock& rw_lock):rw_lock_(rw_lock) {$/;"	f	class:NAME_SPACE::WriteLockScoped	access:public	signature:(RWLock& rw_lock)
NAME_SPACE::WriteLockScoped::rw_lock_	RWLock.h	/^        RWLock& rw_lock_;$/;"	m	class:NAME_SPACE::WriteLockScoped	access:private
NAME_SPACE::WriteLockScoped::~WriteLockScoped	RWLock.h	/^        ~WriteLockScoped() {$/;"	f	class:NAME_SPACE::WriteLockScoped	access:public	signature:()
NAME_SPACE::emNetEvent	Common.h	/^    typedef enum emNetEvent {$/;"	g	namespace:NAME_SPACE
NAME_SPACE::int16	Common.h	/^    typedef short int16;  \/\/ NOLINT$/;"	t	namespace:NAME_SPACE
NAME_SPACE::int32	Common.h	/^    typedef int int32;$/;"	t	namespace:NAME_SPACE
NAME_SPACE::int64	Common.h	/^    typedef int64_t int64;$/;"	t	namespace:NAME_SPACE
NAME_SPACE::int8	Common.h	/^    typedef char int8;$/;"	t	namespace:NAME_SPACE
NAME_SPACE::kPacketLenSize	Common.h	/^static const size_t kPacketLenSize = sizeof(PacketLength);$/;"	m	namespace:NAME_SPACE
NAME_SPACE::uint16	Common.h	/^    typedef unsigned short uint16;  \/\/ NOLINT$/;"	t	namespace:NAME_SPACE
NAME_SPACE::uint32	Common.h	/^    typedef unsigned int uint32;$/;"	t	namespace:NAME_SPACE
NAME_SPACE::uint64	Common.h	/^    typedef uint64_t uint64;$/;"	t	namespace:NAME_SPACE
NAME_SPACE::uint8	Common.h	/^    typedef unsigned char uint8;$/;"	t	namespace:NAME_SPACE
NativeSocket	Common.h	/^    typedef int NativeSocket;$/;"	t	namespace:NAME_SPACE
NetFrame	NetFrame.cpp	/^    NetFrame::NetFrame():_run_flg(false){}  $/;"	f	class:NAME_SPACE::NetFrame	signature:()
NetFrame	NetFrame.h	/^        NetFrame();  $/;"	p	class:NAME_SPACE::NetFrame	access:protected	signature:()
NetFrame	NetFrame.h	/^    class NetFrame {  $/;"	c	namespace:NAME_SPACE
NetRunnable	NetFrame.cpp	/^    NetFrame::NetRunnable::NetRunnable() {}  $/;"	f	class:NAME_SPACE::NetFrame::NetRunnable	signature:()
NetRunnable	NetFrame.h	/^            NetRunnable();  $/;"	p	class:NAME_SPACE::NetFrame::NetRunnable	access:public	signature:()
NetRunnable	NetFrame.h	/^        class NetRunnable:public Runnable {  $/;"	c	class:NAME_SPACE::NetFrame	inherits:Runnable	access:private
NetWorkExit	NetFrame.cpp	/^    int NetFrame::NetWorkExit() {  $/;"	f	class:NAME_SPACE::NetFrame	signature:()
NetWorkExit	NetFrame.h	/^        int NetWorkExit();  $/;"	p	class:NAME_SPACE::NetFrame	access:public	signature:()
NetWorkInit	NetFrame.cpp	/^    int NetFrame::NetWorkInit() {  $/;"	f	class:NAME_SPACE::NetFrame	signature:()
NetWorkInit	NetFrame.h	/^        int NetWorkInit();  $/;"	p	class:NAME_SPACE::NetFrame	access:public	signature:()
NetworkToHost16	Common.h	/^    inline uint16 NetworkToHost16(uint16 n) {$/;"	f	namespace:NAME_SPACE	signature:(uint16 n)
NetworkToHost32	Common.h	/^    inline uint32 NetworkToHost32(uint32 n) {$/;"	f	namespace:NAME_SPACE	signature:(uint32 n)
NetworkToHost64	Common.h	/^    inline uint64 NetworkToHost64(uint64 n) {$/;"	f	namespace:NAME_SPACE	signature:(uint64 n)
OBJS	Makefile	/^OBJS = $(patsubst %.cpp, %.o, $(OBJS_FILES))$/;"	m
OBJS_FILES	Makefile	/^OBJS_FILES = $(foreach dir, $(DIRS), $(wildcard $(dir)\/*.cpp))$/;"	m
PRIORITY_ABOVE_NORMAL	Thread.h	/^        PRIORITY_ABOVE_NORMAL = 1,$/;"	e	enum:NAME_SPACE::ThreadPriority
PRIORITY_HIGH	Thread.h	/^        PRIORITY_HIGH = 2,$/;"	e	enum:NAME_SPACE::ThreadPriority
PRIORITY_IDLE	Thread.h	/^        PRIORITY_IDLE = -1,$/;"	e	enum:NAME_SPACE::ThreadPriority
PRIORITY_NORMAL	Thread.h	/^        PRIORITY_NORMAL = 0,$/;"	e	enum:NAME_SPACE::ThreadPriority
PacketLength	Common.h	/^typedef uint16 PacketLength;$/;"	t	namespace:NAME_SPACE
PassiveTCPClient	PassiveTCPClient.cpp	/^    PassiveTCPClient::PassiveTCPClient(SOCKET fd, struct sockaddr_in* sa, short heart_time)  $/;"	f	class:NAME_SPACE::PassiveTCPClient	signature:(SOCKET fd, struct sockaddr_in* sa, short heart_time)
PassiveTCPClient	PassiveTCPClient.h	/^        PassiveTCPClient(SOCKET fd, struct sockaddr_in* sa, short heart_time = 10);  $/;"	p	class:NAME_SPACE::PassiveTCPClient	access:public	signature:(SOCKET fd, struct sockaddr_in* sa, short heart_time = 10)
PassiveTCPClient	PassiveTCPClient.h	/^    class PassiveTCPClient {  $/;"	c	namespace:NAME_SPACE
PassiveTCPEventCb	PassiveTCPClient.cpp	/^    void PassiveTCPEventCb(struct bufferevent *bev, short events, void *data) {  $/;"	f	namespace:NAME_SPACE	signature:(struct bufferevent *bev, short events, void *data)
PassiveTCPReadEventCb	PassiveTCPClient.cpp	/^    void PassiveTCPReadEventCb(struct bufferevent *bev, void *data) {  $/;"	f	namespace:NAME_SPACE	signature:(struct bufferevent *bev, void *data)
PassiveTCPTimeOutEventCb	PassiveTCPClient.cpp	/^    void PassiveTCPTimeOutEventCb(evutil_socket_t fd, short, void *data) {  $/;"	f	namespace:NAME_SPACE	signature:(evutil_socket_t fd, short, void *data)
PreRun	Thread.cpp	/^    void* Thread::PreRun(void* pv) {$/;"	f	class:NAME_SPACE::Thread	signature:(void* pv)
PreRun	Thread.h	/^        static void *PreRun(void *pv);$/;"	p	class:NAME_SPACE::Thread	access:private	signature:(void *pv)
ProcEvent	ActiveTCPClient.cpp	/^    void ActiveTCPClient::ProcEvent(short events) {  $/;"	f	class:NAME_SPACE::ActiveTCPClient	signature:(short events)
ProcEvent	ActiveTCPClient.h	/^        void ProcEvent(short events);  $/;"	p	class:NAME_SPACE::ActiveTCPClient	access:public	signature:(short events)
ProcEvent	PassiveTCPClient.cpp	/^    void PassiveTCPClient::ProcEvent(short events) {  $/;"	f	class:NAME_SPACE::PassiveTCPClient	signature:(short events)
ProcEvent	PassiveTCPClient.h	/^        void ProcEvent(short events);  $/;"	p	class:NAME_SPACE::PassiveTCPClient	access:public	signature:(short events)
PutRecvData	ActiveTCPClient.cpp	/^    void ActiveTCPClient::PutRecvData(void* data, size_t len) {  $/;"	f	class:NAME_SPACE::ActiveTCPClient	signature:(void* data, size_t len)
PutRecvData	ActiveTCPClient.h	/^        void PutRecvData(void*, size_t);  $/;"	p	class:NAME_SPACE::ActiveTCPClient	access:public	signature:(void*, size_t)
PutRecvData	PassiveTCPClient.cpp	/^    void PassiveTCPClient::PutRecvData(void* data, size_t len) {  $/;"	f	class:NAME_SPACE::PassiveTCPClient	signature:(void* data, size_t len)
PutRecvData	PassiveTCPClient.h	/^        void PutRecvData(void*, size_t);  $/;"	p	class:NAME_SPACE::PassiveTCPClient	access:public	signature:(void*, size_t)
RM	Makefile	/^RM = rm -f$/;"	m
RWLock	RWLock.cpp	/^    RWLock::RWLock():lock_() {$/;"	f	class:NAME_SPACE::RWLock	signature:()
RWLock	RWLock.h	/^        RWLock();$/;"	p	class:NAME_SPACE::RWLock	access:private	signature:()
RWLock	RWLock.h	/^    class RWLock$/;"	c	namespace:NAME_SPACE
ReadLockScoped	RWLock.h	/^        ReadLockScoped(RWLock& rw_lock):rw_lock_(rw_lock) {$/;"	f	class:NAME_SPACE::ReadLockScoped	access:public	signature:(RWLock& rw_lock)
ReadLockScoped	RWLock.h	/^    class ReadLockScoped$/;"	c	namespace:NAME_SPACE
RecvData	main.cpp	/^    void RecvData(SOCKET fd, void* data, size_t len) {  $/;"	f	class:TestClient	access:public	signature:(SOCKET fd, void* data, size_t len)
ReleaseLockExclusive	RWLock.cpp	/^    void RWLock::ReleaseLockExclusive() {$/;"	f	class:NAME_SPACE::RWLock	signature:()
ReleaseLockExclusive	RWLock.h	/^        void ReleaseLockExclusive();$/;"	p	class:NAME_SPACE::RWLock	access:public	signature:()
ReleaseLockShared	RWLock.cpp	/^    void RWLock::ReleaseLockShared() {$/;"	f	class:NAME_SPACE::RWLock	signature:()
ReleaseLockShared	RWLock.h	/^        void ReleaseLockShared();$/;"	p	class:NAME_SPACE::RWLock	access:public	signature:()
Reset	Event.cpp	/^    void Event::Reset() {$/;"	f	class:NAME_SPACE::Event	signature:()
Reset	Event.h	/^        void Reset();$/;"	p	class:NAME_SPACE::Event	access:public	signature:()
Run	NetFrame.cpp	/^    void NetFrame::NetRunnable::Run(void* arg) {  $/;"	f	class:NAME_SPACE::NetFrame::NetRunnable	signature:(void* arg)
Run	NetFrame.h	/^            virtual void Run(void*);  $/;"	p	class:NAME_SPACE::NetFrame::NetRunnable	access:protected	signature:(void*)
Run	Thread.h	/^        virtual void Run(void*) = 0;$/;"	p	class:NAME_SPACE::Runnable	access:public	signature:(void*)
Run	main.cpp	/^    virtual void Run(void* arg) {  $/;"	f	class:TestClient	access:protected	signature:(void* arg)
Runnable	Thread.h	/^        Runnable() {}$/;"	f	class:NAME_SPACE::Runnable	access:protected	signature:()
Runnable	Thread.h	/^    class Runnable {$/;"	c	namespace:NAME_SPACE
SIGSLOT_DEFAULT_MT_POLICY	Sigslot.h	17;"	d
SOCKET	Common.h	209;"	d
SOCKET_ERROR	Common.h	217;"	d
SendData	ActiveTCPClient.cpp	/^    int ActiveTCPClient::SendData(void* pdata, size_t len) {  $/;"	f	class:NAME_SPACE::ActiveTCPClient	signature:(void* pdata, size_t len)
SendData	ActiveTCPClient.h	/^        int SendData(void* pdata, size_t len);  $/;"	p	class:NAME_SPACE::ActiveTCPClient	access:public	signature:(void* pdata, size_t len)
SendData	PassiveTCPClient.cpp	/^    int PassiveTCPClient::SendData(void* pdata, size_t len) {  $/;"	f	class:NAME_SPACE::PassiveTCPClient	signature:(void* pdata, size_t len)
SendData	PassiveTCPClient.h	/^        int SendData(void* pdata, size_t len);  $/;"	p	class:NAME_SPACE::PassiveTCPClient	access:public	signature:(void* pdata, size_t len)
SendData	main.cpp	/^    int SendData(void* data,size_t len) {  $/;"	f	class:TestClient	access:public	signature:(void* data,size_t len)
ServerWorker	ServerWorker.cpp	/^    ServerWorker::ServerWorker(int listen_port)  $/;"	f	class:NAME_SPACE::ServerWorker	signature:(int listen_port)
ServerWorker	ServerWorker.cpp	/^    ServerWorker::ServerWorker(std::string listen_ip, int listen_port)  $/;"	f	class:NAME_SPACE::ServerWorker	signature:(std::string listen_ip, int listen_port)
ServerWorker	ServerWorker.h	/^        ServerWorker(int listen_port);  $/;"	p	class:NAME_SPACE::ServerWorker	access:public	signature:(int listen_port)
ServerWorker	ServerWorker.h	/^        ServerWorker(std::string listen_ip, int listen_port);  $/;"	p	class:NAME_SPACE::ServerWorker	access:public	signature:(std::string listen_ip, int listen_port)
ServerWorker	ServerWorker.h	/^    class ServerWorker {  $/;"	c	namespace:NAME_SPACE
Set	Event.cpp	/^    void Event::Set() {$/;"	f	class:NAME_SPACE::Event	signature:()
Set	Event.h	/^        void Set();$/;"	p	class:NAME_SPACE::Event	access:public	signature:()
Set8	Common.h	/^    inline void Set8(void* memory, size_t offset, uint8 v) {$/;"	f	namespace:NAME_SPACE	signature:(void* memory, size_t offset, uint8 v)
SetBE16	Common.h	/^    inline void SetBE16(void* memory, uint16 v) {$/;"	f	namespace:NAME_SPACE	signature:(void* memory, uint16 v)
SetBE32	Common.h	/^    inline void SetBE32(void* memory, uint32 v) {$/;"	f	namespace:NAME_SPACE	signature:(void* memory, uint32 v)
SetBE64	Common.h	/^    inline void SetBE64(void* memory, uint64 v) {$/;"	f	namespace:NAME_SPACE	signature:(void* memory, uint64 v)
SetCurrentThread	Thread.cpp	/^    void ThreadManager::SetCurrentThread(Thread *thread) {$/;"	f	class:NAME_SPACE::ThreadManager	signature:(Thread *thread)
SetCurrentThread	Thread.h	/^        void SetCurrentThread(Thread* thread);$/;"	p	class:NAME_SPACE::ThreadManager	access:public	signature:(Thread* thread)
SetHeartFlg	ActiveTCPClient.h	/^        void SetHeartFlg(bool flg) { _heart_flg = flg; }  $/;"	f	class:NAME_SPACE::ActiveTCPClient	access:public	signature:(bool flg)
SetHeartFlg	PassiveTCPClient.h	/^        void SetHeartFlg(bool flg) { _heart_flg = flg; }  $/;"	f	class:NAME_SPACE::PassiveTCPClient	access:public	signature:(bool flg)
SetLE16	Common.h	/^    inline void SetLE16(void* memory, uint16 v) {$/;"	f	namespace:NAME_SPACE	signature:(void* memory, uint16 v)
SetLE32	Common.h	/^    inline void SetLE32(void* memory, uint32 v) {$/;"	f	namespace:NAME_SPACE	signature:(void* memory, uint32 v)
SetLE64	Common.h	/^    inline void SetLE64(void* memory, uint64 v) {$/;"	f	namespace:NAME_SPACE	signature:(void* memory, uint64 v)
SetName	Thread.cpp	/^    bool Thread::SetName(const std::string& name, const void* obj) {$/;"	f	class:NAME_SPACE::Thread	signature:(const std::string& name, const void* obj)
SetName	Thread.h	/^        bool SetName(const std::string& name, const void* obj);$/;"	p	class:NAME_SPACE::Thread	access:public	signature:(const std::string& name, const void* obj)
SetPriority	Thread.cpp	/^    bool Thread::SetPriority(ThreadPriority priority) {$/;"	f	class:NAME_SPACE::Thread	signature:(ThreadPriority priority)
SetPriority	Thread.h	/^        bool SetPriority(ThreadPriority priority);$/;"	p	class:NAME_SPACE::Thread	access:public	signature:(ThreadPriority priority)
SetTCPClientSignal	ActiveTCPClient.h	/^        void SetTCPClientSignal(TCPClientSignal* pTCPClientSignal) { _pTCPClientSignal = pTCPClientSignal;}  $/;"	f	class:NAME_SPACE::ActiveTCPClient	access:public	signature:(TCPClientSignal* pTCPClientSignal)
SignalAccept	NetSignal.h	/^        sigslot::signal2<SOCKET , struct sockaddr_in*> SignalAccept;  $/;"	m	class:NAME_SPACE::TCPServerSignal	access:public
SignalAcceptError	NetSignal.h	/^        sigslot::signal2<SOCKET , EM_NET_EVENT> SignalAcceptError;  $/;"	m	class:NAME_SPACE::TCPServerSignal	access:public
SignalEvent	NetSignal.h	/^        sigslot::signal2<SOCKET, EM_NET_EVENT> SignalEvent;  $/;"	m	class:NAME_SPACE::TCPClientSignal	access:public
SignalRecvData	NetSignal.h	/^        sigslot::signal3<SOCKET, void*, size_t> SignalRecvData;  $/;"	m	class:NAME_SPACE::TCPClientSignal	access:public
SleepCS	ConditionVariable.cpp	/^    bool ConditionVariable::SleepCS(CriticalSection& crit_sect, unsigned long max_time_inMS)$/;"	f	class:NAME_SPACE::ConditionVariable	signature:(CriticalSection& crit_sect, unsigned long max_time_inMS)
SleepCS	ConditionVariable.cpp	/^    void ConditionVariable::SleepCS(CriticalSection& crit_sect) {$/;"	f	class:NAME_SPACE::ConditionVariable	signature:(CriticalSection& crit_sect)
SleepCS	ConditionVariable.h	/^        bool SleepCS(CriticalSection& crit_sect, unsigned long max_time_in_ms);$/;"	p	class:NAME_SPACE::ConditionVariable	access:public	signature:(CriticalSection& crit_sect, unsigned long max_time_in_ms)
SleepCS	ConditionVariable.h	/^        void SleepCS(CriticalSection& crit_sect);$/;"	p	class:NAME_SPACE::ConditionVariable	access:public	signature:(CriticalSection& crit_sect)
SleepMs	Thread.cpp	/^    bool Thread::SleepMs(int milliseconds) {$/;"	f	class:NAME_SPACE::Thread	signature:(int milliseconds)
SleepMs	Thread.h	/^        static bool SleepMs(int millis);$/;"	p	class:NAME_SPACE::Thread	access:public	signature:(int millis)
SockOptArg	Common.h	/^    typedef void* SockOptArg;$/;"	t	namespace:NAME_SPACE
Start	Thread.cpp	/^    bool Thread::Start(Runnable* runnable, void* userdata) {$/;"	f	class:NAME_SPACE::Thread	signature:(Runnable* runnable, void* userdata)
Start	Thread.h	/^        bool Start(Runnable* runnable,void* userdata=nullptr);$/;"	p	class:NAME_SPACE::Thread	access:public	signature:(Runnable* runnable,void* userdata=nullptr)
Start	main.cpp	/^    int Start() {  $/;"	f	class:TestClient	access:public	signature:()
StartWork	ActiveTCPClient.cpp	/^    bool ActiveTCPClient::StartWork() {  $/;"	f	class:NAME_SPACE::ActiveTCPClient	signature:()
StartWork	ActiveTCPClient.h	/^        bool StartWork();  $/;"	p	class:NAME_SPACE::ActiveTCPClient	access:public	signature:()
StartWork	PassiveTCPClient.cpp	/^    bool PassiveTCPClient::StartWork(TCPClientSignal* pTCPClientSignal) {  $/;"	f	class:NAME_SPACE::PassiveTCPClient	signature:(TCPClientSignal* pTCPClientSignal)
StartWork	PassiveTCPClient.h	/^        bool StartWork(TCPClientSignal*);  $/;"	p	class:NAME_SPACE::PassiveTCPClient	access:public	signature:(TCPClientSignal*)
StartWork	ServerWorker.cpp	/^    bool ServerWorker::StartWork(TCPServerSignal* pTCPServerSignal) {  $/;"	f	class:NAME_SPACE::ServerWorker	signature:(TCPServerSignal* pTCPServerSignal)
StartWork	ServerWorker.h	/^        bool StartWork(TCPServerSignal* pTCPServerSignal);  $/;"	p	class:NAME_SPACE::ServerWorker	access:public	signature:(TCPServerSignal* pTCPServerSignal)
Stop	Thread.cpp	/^    void Thread::Stop() {$/;"	f	class:NAME_SPACE::Thread	signature:()
Stop	Thread.h	/^        virtual void Stop();$/;"	p	class:NAME_SPACE::Thread	access:public	signature:()
Stop	main.cpp	/^    void Stop() {  $/;"	f	class:TestClient	access:public	signature:()
StopWork	ActiveTCPClient.cpp	/^    void ActiveTCPClient::StopWork() {  $/;"	f	class:NAME_SPACE::ActiveTCPClient	signature:()
StopWork	ActiveTCPClient.h	/^        void StopWork();  $/;"	p	class:NAME_SPACE::ActiveTCPClient	access:public	signature:()
StopWork	PassiveTCPClient.cpp	/^    void PassiveTCPClient::StopWork() {  $/;"	f	class:NAME_SPACE::PassiveTCPClient	signature:()
StopWork	PassiveTCPClient.h	/^        void StopWork();  $/;"	p	class:NAME_SPACE::PassiveTCPClient	access:public	signature:()
StopWork	ServerWorker.cpp	/^    void ServerWorker::StopWork()  $/;"	f	class:NAME_SPACE::ServerWorker	signature:()
StopWork	ServerWorker.h	/^        void StopWork();  $/;"	p	class:NAME_SPACE::ServerWorker	access:public	signature:()
TARGET	Makefile	/^TARGET = client_frame$/;"	m
TCPClientSignal	NetSignal.h	/^        TCPClientSignal() {}  $/;"	f	class:NAME_SPACE::TCPClientSignal	access:public	signature:()
TCPClientSignal	NetSignal.h	/^    class TCPClientSignal {  $/;"	c	namespace:NAME_SPACE
TCPServerSignal	NetSignal.h	/^        TCPServerSignal() {}  $/;"	f	class:NAME_SPACE::TCPServerSignal	access:public	signature:()
TCPServerSignal	NetSignal.h	/^    class TCPServerSignal {  $/;"	c	namespace:NAME_SPACE
TestClient	main.cpp	/^    TestClient():_is_run_flg(false) {  $/;"	f	class:TestClient	access:public	signature:()
TestClient	main.cpp	/^class TestClient : public sigslot::has_slots<>, public TCPClientSignal, public Runnable {  $/;"	c	file:	inherits:sigslot::has_slots,TCPClientSignal,Runnable
TestClient::Event	main.cpp	/^    void Event(SOCKET fd, EM_NET_EVENT msg) {  $/;"	f	class:TestClient	access:public	signature:(SOCKET fd, EM_NET_EVENT msg)
TestClient::RecvData	main.cpp	/^    void RecvData(SOCKET fd, void* data, size_t len) {  $/;"	f	class:TestClient	access:public	signature:(SOCKET fd, void* data, size_t len)
TestClient::Run	main.cpp	/^    virtual void Run(void* arg) {  $/;"	f	class:TestClient	access:protected	signature:(void* arg)
TestClient::SendData	main.cpp	/^    int SendData(void* data,size_t len) {  $/;"	f	class:TestClient	access:public	signature:(void* data,size_t len)
TestClient::Start	main.cpp	/^    int Start() {  $/;"	f	class:TestClient	access:public	signature:()
TestClient::Stop	main.cpp	/^    void Stop() {  $/;"	f	class:TestClient	access:public	signature:()
TestClient::TestClient	main.cpp	/^    TestClient():_is_run_flg(false) {  $/;"	f	class:TestClient	access:public	signature:()
TestClient::_connect_thread	main.cpp	/^    Thread _connect_thread;  $/;"	m	class:TestClient	file:	access:private
TestClient::_is_run_flg	main.cpp	/^    volatile bool _is_run_flg;  $/;"	m	class:TestClient	file:	access:private
TestClient::_pActiveTCPClient	main.cpp	/^    ActiveTCPClient* _pActiveTCPClient;  $/;"	m	class:TestClient	file:	access:private
TestClient::~TestClient	main.cpp	/^    ~TestClient() {  $/;"	f	class:TestClient	access:public	signature:()
Thread	Thread.cpp	/^    Thread::Thread():priority_(PRIORITY_NORMAL),running_(true, false),owned_(true) {$/;"	f	class:NAME_SPACE::Thread	signature:()
Thread	Thread.h	/^        Thread();$/;"	p	class:NAME_SPACE::Thread	access:public	signature:()
Thread	Thread.h	/^    class Thread {$/;"	c	namespace:NAME_SPACE
ThreadInit	Thread.cpp	/^    struct ThreadInit {$/;"	s	namespace:NAME_SPACE	file:
ThreadManager	Thread.cpp	/^    ThreadManager::ThreadManager() {$/;"	f	class:NAME_SPACE::ThreadManager	signature:()
ThreadManager	Thread.h	/^        ThreadManager();$/;"	p	class:NAME_SPACE::ThreadManager	access:public	signature:()
ThreadManager	Thread.h	/^    class ThreadManager {$/;"	c	namespace:NAME_SPACE
ThreadPriority	Thread.h	/^    enum ThreadPriority {$/;"	g	namespace:NAME_SPACE
UnwrapCurrent	Thread.h	/^        void UnwrapCurrent();$/;"	p	class:NAME_SPACE::Thread	access:public	signature:()
VERIFY	Common.h	230;"	d
Wait	Event.cpp	/^    bool Event::Wait(int milliseconds)$/;"	f	class:NAME_SPACE::Event	signature:(int milliseconds)
Wait	Event.h	/^        bool Wait(int milliseconds);$/;"	p	class:NAME_SPACE::Event	access:public	signature:(int milliseconds)
Wake	ConditionVariable.cpp	/^    void ConditionVariable::Wake() {$/;"	f	class:NAME_SPACE::ConditionVariable	signature:()
Wake	ConditionVariable.h	/^        void Wake();$/;"	p	class:NAME_SPACE::ConditionVariable	access:public	signature:()
WakeAll	ConditionVariable.cpp	/^    void ConditionVariable::WakeAll() {$/;"	f	class:NAME_SPACE::ConditionVariable	signature:()
WakeAll	ConditionVariable.h	/^        void WakeAll();$/;"	p	class:NAME_SPACE::ConditionVariable	access:public	signature:()
WrapCurrent	Thread.h	/^        bool WrapCurrent();$/;"	p	class:NAME_SPACE::Thread	access:public	signature:()
WrapCurrentWithThreadManager	Thread.h	/^        bool WrapCurrentWithThreadManager(ThreadManager* thread_manager);$/;"	p	class:NAME_SPACE::Thread	access:private	signature:(ThreadManager* thread_manager)
WriteLockScoped	RWLock.h	/^        WriteLockScoped(RWLock& rw_lock):rw_lock_(rw_lock) {$/;"	f	class:NAME_SPACE::WriteLockScoped	access:public	signature:(RWLock& rw_lock)
WriteLockScoped	RWLock.h	/^    class WriteLockScoped$/;"	c	namespace:NAME_SPACE
_COMMON_H_	Common.h	2;"	d
__ActiveTCPClient_H_	ActiveTCPClient.h	10;"	d
__CRITICAL_SEXTION_H_	CriticalSection.h	10;"	d
__EVENT_H_	Event.h	10;"	d
__Frame__ConditionVariable__	ConditionVariable.h	10;"	d
__Frame__NetFrame__	NetFrame.h	10;"	d
__Frame__RWLock__	RWLock.h	10;"	d
__NetSignal_H_	NetSignal.h	10;"	d
__PassiveTCPClient_H_	PassiveTCPClient.h	10;"	d
__ServerWorker_H_	ServerWorker.h	10;"	d
__Sigslot_H_	Sigslot.h	10;"	d
__THREAD_H_	Thread.h	10;"	d
_base	NetFrame.cpp	/^    struct event_base* NetFrame::_base = nullptr;  $/;"	m	class:NAME_SPACE::NetFrame	typeref:struct:NAME_SPACE::NetFrame::	file:
_base	NetFrame.h	/^        static struct event_base* _base;  $/;"	m	class:NAME_SPACE::NetFrame	typeref:struct:NAME_SPACE::NetFrame::event_base	access:public
_bev	ActiveTCPClient.h	/^        struct bufferevent *_bev;  $/;"	m	class:NAME_SPACE::ActiveTCPClient	typeref:struct:NAME_SPACE::ActiveTCPClient::bufferevent	access:private
_bev	PassiveTCPClient.h	/^        struct bufferevent *_bev;  $/;"	m	class:NAME_SPACE::PassiveTCPClient	typeref:struct:NAME_SPACE::PassiveTCPClient::bufferevent	access:private
_client_ip	PassiveTCPClient.h	/^        std::string _client_ip;  $/;"	m	class:NAME_SPACE::PassiveTCPClient	access:private
_client_port	PassiveTCPClient.h	/^        unsigned short _client_port;  $/;"	m	class:NAME_SPACE::PassiveTCPClient	access:private
_connect_flg	ActiveTCPClient.h	/^        volatile unsigned char _connect_flg;  $/;"	m	class:NAME_SPACE::ActiveTCPClient	access:private
_connect_thread	main.cpp	/^    Thread _connect_thread;  $/;"	m	class:TestClient	file:	access:private
_connection0	Sigslot.h	/^        _connection0()$/;"	f	class:sigslot::_connection0	access:public	signature:()
_connection0	Sigslot.h	/^        _connection0(dest_type* pobject, void (dest_type::*pmemfun)())$/;"	f	class:sigslot::_connection0	access:public	signature:(dest_type* pobject, void (dest_type::*pmemfun)())
_connection0	Sigslot.h	/^    class _connection0 : public _connection_base0<mt_policy>$/;"	c	namespace:sigslot	inherits:_connection_base0
_connection1	Sigslot.h	/^        _connection1()$/;"	f	class:sigslot::_connection1	access:public	signature:()
_connection1	Sigslot.h	/^        _connection1(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type))$/;"	f	class:sigslot::_connection1	access:public	signature:(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type))
_connection1	Sigslot.h	/^    class _connection1 : public _connection_base1<arg1_type, mt_policy>$/;"	c	namespace:sigslot	inherits:_connection_base1
_connection2	Sigslot.h	/^        _connection2()$/;"	f	class:sigslot::_connection2	access:public	signature:()
_connection2	Sigslot.h	/^        _connection2(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type,$/;"	f	class:sigslot::_connection2	access:public	signature:(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type, arg2_type))
_connection2	Sigslot.h	/^    class _connection2 : public _connection_base2<arg1_type, arg2_type, mt_policy>$/;"	c	namespace:sigslot	inherits:_connection_base2
_connection3	Sigslot.h	/^        _connection3()$/;"	f	class:sigslot::_connection3	access:public	signature:()
_connection3	Sigslot.h	/^        _connection3(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type,$/;"	f	class:sigslot::_connection3	access:public	signature:(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type, arg2_type, arg3_type))
_connection3	Sigslot.h	/^    class _connection3 : public _connection_base3<arg1_type, arg2_type, arg3_type, mt_policy>$/;"	c	namespace:sigslot	inherits:_connection_base3
_connection4	Sigslot.h	/^        _connection4()$/;"	f	class:sigslot::_connection4	access:public	signature:()
_connection4	Sigslot.h	/^        _connection4(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type,$/;"	f	class:sigslot::_connection4	access:public	signature:(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type))
_connection4	Sigslot.h	/^    class _connection4 : public _connection_base4<arg1_type, arg2_type,$/;"	c	namespace:sigslot	inherits:_connection_base4
_connection5	Sigslot.h	/^        _connection5()$/;"	f	class:sigslot::_connection5	access:public	signature:()
_connection5	Sigslot.h	/^        _connection5(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type,$/;"	f	class:sigslot::_connection5	access:public	signature:(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type))
_connection5	Sigslot.h	/^    class _connection5 : public _connection_base5<arg1_type, arg2_type,$/;"	c	namespace:sigslot	inherits:_connection_base5
_connection6	Sigslot.h	/^        _connection6()$/;"	f	class:sigslot::_connection6	access:public	signature:()
_connection6	Sigslot.h	/^        _connection6(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type,$/;"	f	class:sigslot::_connection6	access:public	signature:(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type))
_connection6	Sigslot.h	/^    class _connection6 : public _connection_base6<arg1_type, arg2_type,$/;"	c	namespace:sigslot	inherits:_connection_base6
_connection7	Sigslot.h	/^        _connection7()$/;"	f	class:sigslot::_connection7	access:public	signature:()
_connection7	Sigslot.h	/^        _connection7(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type,$/;"	f	class:sigslot::_connection7	access:public	signature:(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, arg7_type))
_connection7	Sigslot.h	/^    class _connection7 : public _connection_base7<arg1_type, arg2_type,$/;"	c	namespace:sigslot	inherits:_connection_base7
_connection8	Sigslot.h	/^        _connection8()$/;"	f	class:sigslot::_connection8	access:public	signature:()
_connection8	Sigslot.h	/^        _connection8(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type,$/;"	f	class:sigslot::_connection8	access:public	signature:(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, arg7_type, arg8_type))
_connection8	Sigslot.h	/^    class _connection8 : public _connection_base8<arg1_type, arg2_type,$/;"	c	namespace:sigslot	inherits:_connection_base8
_connection_base0	Sigslot.h	/^    class _connection_base0$/;"	c	namespace:sigslot
_connection_base1	Sigslot.h	/^    class _connection_base1$/;"	c	namespace:sigslot
_connection_base2	Sigslot.h	/^    class _connection_base2$/;"	c	namespace:sigslot
_connection_base3	Sigslot.h	/^    class _connection_base3$/;"	c	namespace:sigslot
_connection_base4	Sigslot.h	/^    class _connection_base4$/;"	c	namespace:sigslot
_connection_base5	Sigslot.h	/^    class _connection_base5$/;"	c	namespace:sigslot
_connection_base6	Sigslot.h	/^    class _connection_base6$/;"	c	namespace:sigslot
_connection_base7	Sigslot.h	/^    class _connection_base7$/;"	c	namespace:sigslot
_connection_base8	Sigslot.h	/^    class _connection_base8$/;"	c	namespace:sigslot
_event	ActiveTCPClient.h	/^        struct event *_event;  $/;"	m	class:NAME_SPACE::ActiveTCPClient	typeref:struct:NAME_SPACE::ActiveTCPClient::event	access:private
_event	PassiveTCPClient.h	/^        struct event *_event;  $/;"	m	class:NAME_SPACE::PassiveTCPClient	typeref:struct:NAME_SPACE::PassiveTCPClient::event	access:private
_fd	ActiveTCPClient.h	/^        SOCKET _fd;  $/;"	m	class:NAME_SPACE::ActiveTCPClient	access:private
_fd	PassiveTCPClient.h	/^        SOCKET _fd;  $/;"	m	class:NAME_SPACE::PassiveTCPClient	access:private
_heart_flg	ActiveTCPClient.h	/^        volatile bool _heart_flg;  $/;"	m	class:NAME_SPACE::ActiveTCPClient	access:private
_heart_flg	PassiveTCPClient.h	/^        volatile bool _heart_flg;  $/;"	m	class:NAME_SPACE::PassiveTCPClient	access:private
_heart_time	ActiveTCPClient.h	/^        short _heart_time;  $/;"	m	class:NAME_SPACE::ActiveTCPClient	access:private
_heart_time	PassiveTCPClient.h	/^        short _heart_time;  $/;"	m	class:NAME_SPACE::PassiveTCPClient	access:private
_host_name	ActiveTCPClient.h	/^        std::string _host_name;  $/;"	m	class:NAME_SPACE::ActiveTCPClient	access:private
_host_port	ActiveTCPClient.h	/^        unsigned short _host_port;  $/;"	m	class:NAME_SPACE::ActiveTCPClient	access:private
_is_run_flg	main.cpp	/^    volatile bool _is_run_flg;  $/;"	m	class:TestClient	file:	access:private
_listen_fd	ServerWorker.h	/^        SOCKET _listen_fd;  $/;"	m	class:NAME_SPACE::ServerWorker	access:private
_listen_ip	ServerWorker.h	/^        std::string _listen_ip;  $/;"	m	class:NAME_SPACE::ServerWorker	access:private
_listen_port	ServerWorker.h	/^        unsigned short _listen_port;  $/;"	m	class:NAME_SPACE::ServerWorker	access:private
_listener	ServerWorker.h	/^        evconnlistener* _listener;  $/;"	m	class:NAME_SPACE::ServerWorker	access:private
_m_rw_loacl	ActiveTCPClient.h	/^        RWLock* _m_rw_loacl;  $/;"	m	class:NAME_SPACE::ActiveTCPClient	access:private
_main_loop_thread	NetFrame.h	/^        Thread _main_loop_thread;  $/;"	m	class:NAME_SPACE::NetFrame	access:private
_pActiveTCPClient	main.cpp	/^    ActiveTCPClient* _pActiveTCPClient;  $/;"	m	class:TestClient	file:	access:private
_pTCPClientSignal	ActiveTCPClient.h	/^        TCPClientSignal* _pTCPClientSignal;  $/;"	m	class:NAME_SPACE::ActiveTCPClient	access:public
_pTCPClientSignal	PassiveTCPClient.h	/^        TCPClientSignal* _pTCPClientSignal;  $/;"	m	class:NAME_SPACE::PassiveTCPClient	access:public
_pTCPServerSignal	ServerWorker.h	/^        TCPServerSignal* _pTCPServerSignal;  $/;"	m	class:NAME_SPACE::ServerWorker	access:private
_run_flg	NetFrame.h	/^        volatile bool _run_flg;  $/;"	m	class:NAME_SPACE::NetFrame	access:private
_runnable	NetFrame.h	/^        NetRunnable _runnable;  $/;"	m	class:NAME_SPACE::NetFrame	access:private
_signal_base	Sigslot.h	/^    class _signal_base : public _signal_base_interface, public mt_policy$/;"	c	namespace:sigslot	inherits:_signal_base_interface,mt_policy
_signal_base0	Sigslot.h	/^        _signal_base0()$/;"	f	class:sigslot::_signal_base0	access:public	signature:()
_signal_base0	Sigslot.h	/^        _signal_base0(const _signal_base0& s)$/;"	f	class:sigslot::_signal_base0	access:public	signature:(const _signal_base0& s)
_signal_base0	Sigslot.h	/^    class _signal_base0 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base
_signal_base1	Sigslot.h	/^        _signal_base1()$/;"	f	class:sigslot::_signal_base1	access:public	signature:()
_signal_base1	Sigslot.h	/^        _signal_base1(const _signal_base1<arg1_type, mt_policy>& s)$/;"	f	class:sigslot::_signal_base1	access:public	signature:(const _signal_base1<arg1_type, mt_policy>& s)
_signal_base1	Sigslot.h	/^    class _signal_base1 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base
_signal_base2	Sigslot.h	/^        _signal_base2()$/;"	f	class:sigslot::_signal_base2	access:public	signature:()
_signal_base2	Sigslot.h	/^        _signal_base2(const _signal_base2<arg1_type, arg2_type, mt_policy>& s)$/;"	f	class:sigslot::_signal_base2	access:public	signature:(const _signal_base2<arg1_type, arg2_type, mt_policy>& s)
_signal_base2	Sigslot.h	/^    class _signal_base2 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base
_signal_base3	Sigslot.h	/^        _signal_base3()$/;"	f	class:sigslot::_signal_base3	access:public	signature:()
_signal_base3	Sigslot.h	/^        _signal_base3(const _signal_base3<arg1_type, arg2_type, arg3_type, mt_policy>& s)$/;"	f	class:sigslot::_signal_base3	access:public	signature:(const _signal_base3<arg1_type, arg2_type, arg3_type, mt_policy>& s)
_signal_base3	Sigslot.h	/^    class _signal_base3 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base
_signal_base4	Sigslot.h	/^        _signal_base4()$/;"	f	class:sigslot::_signal_base4	access:public	signature:()
_signal_base4	Sigslot.h	/^        _signal_base4(const _signal_base4<arg1_type, arg2_type, arg3_type, arg4_type, mt_policy>& s)$/;"	f	class:sigslot::_signal_base4	access:public	signature:(const _signal_base4<arg1_type, arg2_type, arg3_type, arg4_type, mt_policy>& s)
_signal_base4	Sigslot.h	/^    class _signal_base4 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base
_signal_base5	Sigslot.h	/^        _signal_base5()$/;"	f	class:sigslot::_signal_base5	access:public	signature:()
_signal_base5	Sigslot.h	/^        _signal_base5(const _signal_base5<arg1_type, arg2_type, arg3_type, arg4_type,$/;"	f	class:sigslot::_signal_base5	access:public	signature:(const _signal_base5<arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, mt_policy>& s)
_signal_base5	Sigslot.h	/^    class _signal_base5 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base
_signal_base6	Sigslot.h	/^        _signal_base6()$/;"	f	class:sigslot::_signal_base6	access:public	signature:()
_signal_base6	Sigslot.h	/^        _signal_base6(const _signal_base6<arg1_type, arg2_type, arg3_type, arg4_type,$/;"	f	class:sigslot::_signal_base6	access:public	signature:(const _signal_base6<arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, mt_policy>& s)
_signal_base6	Sigslot.h	/^    class _signal_base6 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base
_signal_base7	Sigslot.h	/^        _signal_base7()$/;"	f	class:sigslot::_signal_base7	access:public	signature:()
_signal_base7	Sigslot.h	/^        _signal_base7(const _signal_base7<arg1_type, arg2_type, arg3_type, arg4_type,$/;"	f	class:sigslot::_signal_base7	access:public	signature:(const _signal_base7<arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, arg7_type, mt_policy>& s)
_signal_base7	Sigslot.h	/^    class _signal_base7 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base
_signal_base8	Sigslot.h	/^        _signal_base8()$/;"	f	class:sigslot::_signal_base8	access:public	signature:()
_signal_base8	Sigslot.h	/^        _signal_base8(const _signal_base8<arg1_type, arg2_type, arg3_type, arg4_type,$/;"	f	class:sigslot::_signal_base8	access:public	signature:(const _signal_base8<arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, arg7_type, arg8_type, mt_policy>& s)
_signal_base8	Sigslot.h	/^    class _signal_base8 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base
_signal_base_interface	Sigslot.h	/^    class _signal_base_interface$/;"	c	namespace:sigslot
base	Sigslot.h	/^        arg5_type, arg6_type, arg7_type, arg8_type, mt_policy> base;$/;"	t	class:sigslot::signal8	access:public
base	Sigslot.h	/^        arg5_type, arg6_type, arg7_type, mt_policy> base;$/;"	t	class:sigslot::signal7	access:public
base	Sigslot.h	/^        typedef _signal_base0<mt_policy> base;$/;"	t	class:sigslot::signal0	access:public
base	Sigslot.h	/^        typedef _signal_base1<arg1_type, mt_policy> base;$/;"	t	class:sigslot::signal1	access:public
base	Sigslot.h	/^        typedef _signal_base2<arg1_type, arg2_type, mt_policy> base;$/;"	t	class:sigslot::signal2	access:public
base	Sigslot.h	/^        typedef _signal_base3<arg1_type, arg2_type, arg3_type, mt_policy> base;$/;"	t	class:sigslot::signal3	access:public
base	Sigslot.h	/^        typedef _signal_base4<arg1_type, arg2_type, arg3_type, arg4_type, mt_policy> base;$/;"	t	class:sigslot::signal4	access:public
base	Sigslot.h	/^        typedef _signal_base5<arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, mt_policy> base;$/;"	t	class:sigslot::signal5	access:public
base	Sigslot.h	/^        typedef _signal_base6<arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, mt_policy> base;$/;"	t	class:sigslot::signal6	access:public
clone	Sigslot.h	/^        arg5_type, arg6_type, arg7_type, arg8_type, mt_policy>* clone() = 0;$/;"	p	class:sigslot::_connection_base8	access:public	signature:()
clone	Sigslot.h	/^        arg5_type, arg6_type, arg7_type, arg8_type, mt_policy>* clone()$/;"	f	class:sigslot::_connection8	access:public	signature:()
clone	Sigslot.h	/^        arg5_type, arg6_type, arg7_type, mt_policy>* clone() = 0;$/;"	p	class:sigslot::_connection_base7	access:public	signature:()
clone	Sigslot.h	/^        arg5_type, arg6_type, arg7_type, mt_policy>* clone()$/;"	f	class:sigslot::_connection7	access:public	signature:()
clone	Sigslot.h	/^        arg5_type, arg6_type, mt_policy>* clone() = 0;$/;"	p	class:sigslot::_connection_base6	access:public	signature:()
clone	Sigslot.h	/^        arg5_type, arg6_type, mt_policy>* clone()$/;"	f	class:sigslot::_connection6	access:public	signature:()
clone	Sigslot.h	/^        arg5_type, mt_policy>* clone() = 0;$/;"	p	class:sigslot::_connection_base5	access:public	signature:()
clone	Sigslot.h	/^        arg5_type, mt_policy>* clone()$/;"	f	class:sigslot::_connection5	access:public	signature:()
clone	Sigslot.h	/^        virtual _connection_base0* clone() = 0;$/;"	p	class:sigslot::_connection_base0	access:public	signature:()
clone	Sigslot.h	/^        virtual _connection_base0<mt_policy>* clone()$/;"	f	class:sigslot::_connection0	access:public	signature:()
clone	Sigslot.h	/^        virtual _connection_base1<arg1_type, mt_policy>* clone() = 0;$/;"	p	class:sigslot::_connection_base1	access:public	signature:()
clone	Sigslot.h	/^        virtual _connection_base1<arg1_type, mt_policy>* clone()$/;"	f	class:sigslot::_connection1	access:public	signature:()
clone	Sigslot.h	/^        virtual _connection_base2<arg1_type, arg2_type, mt_policy>* clone() = 0;$/;"	p	class:sigslot::_connection_base2	access:public	signature:()
clone	Sigslot.h	/^        virtual _connection_base2<arg1_type, arg2_type, mt_policy>* clone()$/;"	f	class:sigslot::_connection2	access:public	signature:()
clone	Sigslot.h	/^        virtual _connection_base3<arg1_type, arg2_type, arg3_type, mt_policy>* clone() = 0;$/;"	p	class:sigslot::_connection_base3	access:public	signature:()
clone	Sigslot.h	/^        virtual _connection_base3<arg1_type, arg2_type, arg3_type, mt_policy>* clone()$/;"	f	class:sigslot::_connection3	access:public	signature:()
clone	Sigslot.h	/^        virtual _connection_base4<arg1_type, arg2_type, arg3_type, arg4_type, mt_policy>* clone() = 0;$/;"	p	class:sigslot::_connection_base4	access:public	signature:()
clone	Sigslot.h	/^        virtual _connection_base4<arg1_type, arg2_type, arg3_type, arg4_type, mt_policy>* clone()$/;"	f	class:sigslot::_connection4	access:public	signature:()
closesocket	Common.h	213;"	d
cond_	ConditionVariable.h	/^        pthread_cond_t cond_;$/;"	m	class:NAME_SPACE::ConditionVariable	access:private
connect	Sigslot.h	/^        void connect(desttype* pclass, void (desttype::*pmemfun)())$/;"	f	class:sigslot::signal0	access:public	signature:(desttype* pclass, void (desttype::*pmemfun)())
connect	Sigslot.h	/^        void connect(desttype* pclass, void (desttype::*pmemfun)(arg1_type))$/;"	f	class:sigslot::signal1	access:public	signature:(desttype* pclass, void (desttype::*pmemfun)(arg1_type))
connect	Sigslot.h	/^        void connect(desttype* pclass, void (desttype::*pmemfun)(arg1_type,$/;"	f	class:sigslot::signal2	access:public	signature:(desttype* pclass, void (desttype::*pmemfun)(arg1_type, arg2_type))
connect	Sigslot.h	/^        void connect(desttype* pclass, void (desttype::*pmemfun)(arg1_type,$/;"	f	class:sigslot::signal3	access:public	signature:(desttype* pclass, void (desttype::*pmemfun)(arg1_type, arg2_type, arg3_type))
connect	Sigslot.h	/^        void connect(desttype* pclass, void (desttype::*pmemfun)(arg1_type,$/;"	f	class:sigslot::signal4	access:public	signature:(desttype* pclass, void (desttype::*pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type))
connect	Sigslot.h	/^        void connect(desttype* pclass, void (desttype::*pmemfun)(arg1_type,$/;"	f	class:sigslot::signal5	access:public	signature:(desttype* pclass, void (desttype::*pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type))
connect	Sigslot.h	/^        void connect(desttype* pclass, void (desttype::*pmemfun)(arg1_type,$/;"	f	class:sigslot::signal6	access:public	signature:(desttype* pclass, void (desttype::*pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type))
connect	Sigslot.h	/^        void connect(desttype* pclass, void (desttype::*pmemfun)(arg1_type,$/;"	f	class:sigslot::signal7	access:public	signature:(desttype* pclass, void (desttype::*pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, arg7_type))
connect	Sigslot.h	/^        void connect(desttype* pclass, void (desttype::*pmemfun)(arg1_type,$/;"	f	class:sigslot::signal8	access:public	signature:(desttype* pclass, void (desttype::*pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, arg7_type, arg8_type))
connected	Sigslot.h	/^        bool connected(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base0	access:public	signature:(has_slots_interface* pclass)
connected	Sigslot.h	/^        bool connected(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base1	access:public	signature:(has_slots_interface* pclass)
connected	Sigslot.h	/^        bool connected(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base2	access:public	signature:(has_slots_interface* pclass)
connected	Sigslot.h	/^        bool connected(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base3	access:public	signature:(has_slots_interface* pclass)
connected	Sigslot.h	/^        bool connected(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base4	access:public	signature:(has_slots_interface* pclass)
connected	Sigslot.h	/^        bool connected(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base5	access:public	signature:(has_slots_interface* pclass)
connected	Sigslot.h	/^        bool connected(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base6	access:public	signature:(has_slots_interface* pclass)
connected	Sigslot.h	/^        bool connected(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base7	access:public	signature:(has_slots_interface* pclass)
connected	Sigslot.h	/^        bool connected(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base8	access:public	signature:(has_slots_interface* pclass)
connections_list	Sigslot.h	/^        arg4_type, arg5_type, arg6_type, arg7_type, mt_policy> *>  connections_list;$/;"	t	class:sigslot::_signal_base7	access:public
connections_list	Sigslot.h	/^        arg4_type, arg5_type, arg6_type, mt_policy> *>  connections_list;$/;"	t	class:sigslot::_signal_base6	access:public
connections_list	Sigslot.h	/^        arg4_type, arg5_type, mt_policy> *>  connections_list;$/;"	t	class:sigslot::_signal_base5	access:public
connections_list	Sigslot.h	/^        arg4_type, mt_policy> *>  connections_list;$/;"	t	class:sigslot::_signal_base4	access:public
connections_list	Sigslot.h	/^        connections_list;$/;"	t	class:sigslot::_signal_base2	access:public
connections_list	Sigslot.h	/^        connections_list;$/;"	t	class:sigslot::_signal_base3	access:public
connections_list	Sigslot.h	/^        connections_list;$/;"	t	class:sigslot::_signal_base8	access:public
connections_list	Sigslot.h	/^        typedef std::list<_connection_base0<mt_policy> *>  connections_list;$/;"	t	class:sigslot::_signal_base0	access:public
connections_list	Sigslot.h	/^        typedef std::list<_connection_base1<arg1_type, mt_policy> *>  connections_list;$/;"	t	class:sigslot::_signal_base1	access:public
connections_list	Sigslot.h	/^        typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal0	access:public
connections_list	Sigslot.h	/^        typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal1	access:public
connections_list	Sigslot.h	/^        typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal2	access:public
connections_list	Sigslot.h	/^        typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal3	access:public
connections_list	Sigslot.h	/^        typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal4	access:public
connections_list	Sigslot.h	/^        typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal5	access:public
connections_list	Sigslot.h	/^        typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal6	access:public
connections_list	Sigslot.h	/^        typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal7	access:public
connections_list	Sigslot.h	/^        typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal8	access:public
const_iterator	Sigslot.h	/^        typedef sender_set::const_iterator const_iterator;$/;"	t	class:sigslot::has_slots	access:private
disconnect	Sigslot.h	/^        void disconnect(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base0	access:public	signature:(has_slots_interface* pclass)
disconnect	Sigslot.h	/^        void disconnect(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base1	access:public	signature:(has_slots_interface* pclass)
disconnect	Sigslot.h	/^        void disconnect(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base2	access:public	signature:(has_slots_interface* pclass)
disconnect	Sigslot.h	/^        void disconnect(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base3	access:public	signature:(has_slots_interface* pclass)
disconnect	Sigslot.h	/^        void disconnect(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base4	access:public	signature:(has_slots_interface* pclass)
disconnect	Sigslot.h	/^        void disconnect(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base5	access:public	signature:(has_slots_interface* pclass)
disconnect	Sigslot.h	/^        void disconnect(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base6	access:public	signature:(has_slots_interface* pclass)
disconnect	Sigslot.h	/^        void disconnect(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base7	access:public	signature:(has_slots_interface* pclass)
disconnect	Sigslot.h	/^        void disconnect(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base8	access:public	signature:(has_slots_interface* pclass)
disconnect_all	Sigslot.h	/^        virtual void disconnect_all() = 0;$/;"	p	class:sigslot::has_slots_interface	access:public	signature:()
disconnect_all	Sigslot.h	/^        void disconnect_all()$/;"	f	class:sigslot::_signal_base0	access:public	signature:()
disconnect_all	Sigslot.h	/^        void disconnect_all()$/;"	f	class:sigslot::_signal_base1	access:public	signature:()
disconnect_all	Sigslot.h	/^        void disconnect_all()$/;"	f	class:sigslot::_signal_base2	access:public	signature:()
disconnect_all	Sigslot.h	/^        void disconnect_all()$/;"	f	class:sigslot::_signal_base3	access:public	signature:()
disconnect_all	Sigslot.h	/^        void disconnect_all()$/;"	f	class:sigslot::_signal_base4	access:public	signature:()
disconnect_all	Sigslot.h	/^        void disconnect_all()$/;"	f	class:sigslot::_signal_base5	access:public	signature:()
disconnect_all	Sigslot.h	/^        void disconnect_all()$/;"	f	class:sigslot::_signal_base6	access:public	signature:()
disconnect_all	Sigslot.h	/^        void disconnect_all()$/;"	f	class:sigslot::_signal_base7	access:public	signature:()
disconnect_all	Sigslot.h	/^        void disconnect_all()$/;"	f	class:sigslot::_signal_base8	access:public	signature:()
disconnect_all	Sigslot.h	/^        void disconnect_all()$/;"	f	class:sigslot::has_slots	access:public	signature:()
duplicate	Sigslot.h	/^        arg5_type, arg6_type, arg7_type, arg8_type, mt_policy>* duplicate(has_slots_interface* pnewdest) = 0;$/;"	p	class:sigslot::_connection_base8	access:public	signature:(has_slots_interface* pnewdest)
duplicate	Sigslot.h	/^        arg5_type, arg6_type, arg7_type, arg8_type, mt_policy>* duplicate(has_slots_interface* pnewdest)$/;"	f	class:sigslot::_connection8	access:public	signature:(has_slots_interface* pnewdest)
duplicate	Sigslot.h	/^        arg5_type, arg6_type, arg7_type, mt_policy>* duplicate(has_slots_interface* pnewdest) = 0;$/;"	p	class:sigslot::_connection_base7	access:public	signature:(has_slots_interface* pnewdest)
duplicate	Sigslot.h	/^        arg5_type, arg6_type, arg7_type, mt_policy>* duplicate(has_slots_interface* pnewdest)$/;"	f	class:sigslot::_connection7	access:public	signature:(has_slots_interface* pnewdest)
duplicate	Sigslot.h	/^        arg5_type, arg6_type, mt_policy>* duplicate(has_slots_interface* pnewdest) = 0;$/;"	p	class:sigslot::_connection_base6	access:public	signature:(has_slots_interface* pnewdest)
duplicate	Sigslot.h	/^        arg5_type, arg6_type, mt_policy>* duplicate(has_slots_interface* pnewdest)$/;"	f	class:sigslot::_connection6	access:public	signature:(has_slots_interface* pnewdest)
duplicate	Sigslot.h	/^        arg5_type, mt_policy>* duplicate(has_slots_interface* pnewdest) = 0;$/;"	p	class:sigslot::_connection_base5	access:public	signature:(has_slots_interface* pnewdest)
duplicate	Sigslot.h	/^        arg5_type, mt_policy>* duplicate(has_slots_interface* pnewdest)$/;"	f	class:sigslot::_connection5	access:public	signature:(has_slots_interface* pnewdest)
duplicate	Sigslot.h	/^        virtual _connection_base0* duplicate(has_slots_interface* pnewdest) = 0;$/;"	p	class:sigslot::_connection_base0	access:public	signature:(has_slots_interface* pnewdest)
duplicate	Sigslot.h	/^        virtual _connection_base0<mt_policy>* duplicate(has_slots_interface* pnewdest)$/;"	f	class:sigslot::_connection0	access:public	signature:(has_slots_interface* pnewdest)
duplicate	Sigslot.h	/^        virtual _connection_base1<arg1_type, mt_policy>* duplicate(has_slots_interface* pnewdest) = 0;$/;"	p	class:sigslot::_connection_base1	access:public	signature:(has_slots_interface* pnewdest)
duplicate	Sigslot.h	/^        virtual _connection_base1<arg1_type, mt_policy>* duplicate(has_slots_interface* pnewdest)$/;"	f	class:sigslot::_connection1	access:public	signature:(has_slots_interface* pnewdest)
duplicate	Sigslot.h	/^        virtual _connection_base2<arg1_type, arg2_type, mt_policy>* duplicate(has_slots_interface* pnewdest) = 0;$/;"	p	class:sigslot::_connection_base2	access:public	signature:(has_slots_interface* pnewdest)
duplicate	Sigslot.h	/^        virtual _connection_base2<arg1_type, arg2_type, mt_policy>* duplicate(has_slots_interface* pnewdest)$/;"	f	class:sigslot::_connection2	access:public	signature:(has_slots_interface* pnewdest)
duplicate	Sigslot.h	/^        virtual _connection_base3<arg1_type, arg2_type, arg3_type, mt_policy>* duplicate(has_slots_interface* pnewdest) = 0;$/;"	p	class:sigslot::_connection_base3	access:public	signature:(has_slots_interface* pnewdest)
duplicate	Sigslot.h	/^        virtual _connection_base3<arg1_type, arg2_type, arg3_type, mt_policy>* duplicate(has_slots_interface* pnewdest)$/;"	f	class:sigslot::_connection3	access:public	signature:(has_slots_interface* pnewdest)
duplicate	Sigslot.h	/^        virtual _connection_base4<arg1_type, arg2_type, arg3_type, arg4_type, mt_policy>* duplicate(has_slots_interface* pnewdest) = 0;$/;"	p	class:sigslot::_connection_base4	access:public	signature:(has_slots_interface* pnewdest)
duplicate	Sigslot.h	/^        virtual _connection_base4<arg1_type, arg2_type, arg3_type, arg4_type, mt_policy>* duplicate(has_slots_interface* pnewdest)$/;"	f	class:sigslot::_connection4	access:public	signature:(has_slots_interface* pnewdest)
emNetEvent	Common.h	/^    typedef enum emNetEvent {$/;"	g	namespace:NAME_SPACE
emit	Sigslot.h	/^        virtual void emit() = 0;$/;"	p	class:sigslot::_connection_base0	access:public	signature:()
emit	Sigslot.h	/^        virtual void emit()$/;"	f	class:sigslot::_connection0	access:public	signature:()
emit	Sigslot.h	/^        virtual void emit(arg1_type a1)$/;"	f	class:sigslot::_connection1	access:public	signature:(arg1_type a1)
emit	Sigslot.h	/^        virtual void emit(arg1_type a1, arg2_type a2)$/;"	f	class:sigslot::_connection2	access:public	signature:(arg1_type a1, arg2_type a2)
emit	Sigslot.h	/^        virtual void emit(arg1_type a1, arg2_type a2, arg3_type a3)$/;"	f	class:sigslot::_connection3	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3)
emit	Sigslot.h	/^        virtual void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::_connection5	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5)
emit	Sigslot.h	/^        virtual void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::_connection6	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5, arg6_type a6)
emit	Sigslot.h	/^        virtual void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::_connection7	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5, arg6_type a6, arg7_type a7)
emit	Sigslot.h	/^        virtual void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::_connection8	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5, arg6_type a6, arg7_type a7, arg8_type a8)
emit	Sigslot.h	/^        virtual void emit(arg1_type a1, arg2_type a2, arg3_type a3,$/;"	f	class:sigslot::_connection4	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4)
emit	Sigslot.h	/^        virtual void emit(arg1_type) = 0;$/;"	p	class:sigslot::_connection_base1	access:public	signature:(arg1_type)
emit	Sigslot.h	/^        virtual void emit(arg1_type, arg2_type) = 0;$/;"	p	class:sigslot::_connection_base2	access:public	signature:(arg1_type, arg2_type)
emit	Sigslot.h	/^        virtual void emit(arg1_type, arg2_type, arg3_type) = 0;$/;"	p	class:sigslot::_connection_base3	access:public	signature:(arg1_type, arg2_type, arg3_type)
emit	Sigslot.h	/^        virtual void emit(arg1_type, arg2_type, arg3_type, arg4_type) = 0;$/;"	p	class:sigslot::_connection_base4	access:public	signature:(arg1_type, arg2_type, arg3_type, arg4_type)
emit	Sigslot.h	/^        virtual void emit(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type,$/;"	p	class:sigslot::_connection_base6	access:public	signature:(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type)
emit	Sigslot.h	/^        virtual void emit(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type,$/;"	p	class:sigslot::_connection_base7	access:public	signature:(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, arg7_type)
emit	Sigslot.h	/^        virtual void emit(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type,$/;"	p	class:sigslot::_connection_base8	access:public	signature:(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, arg7_type, arg8_type)
emit	Sigslot.h	/^        virtual void emit(arg1_type, arg2_type, arg3_type, arg4_type,$/;"	p	class:sigslot::_connection_base5	access:public	signature:(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type)
emit	Sigslot.h	/^        void emit()$/;"	f	class:sigslot::signal0	access:public	signature:()
emit	Sigslot.h	/^        void emit(arg1_type a1)$/;"	f	class:sigslot::signal1	access:public	signature:(arg1_type a1)
emit	Sigslot.h	/^        void emit(arg1_type a1, arg2_type a2)$/;"	f	class:sigslot::signal2	access:public	signature:(arg1_type a1, arg2_type a2)
emit	Sigslot.h	/^        void emit(arg1_type a1, arg2_type a2, arg3_type a3)$/;"	f	class:sigslot::signal3	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3)
emit	Sigslot.h	/^        void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4)$/;"	f	class:sigslot::signal4	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4)
emit	Sigslot.h	/^        void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::signal5	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5)
emit	Sigslot.h	/^        void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::signal6	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5, arg6_type a6)
emit	Sigslot.h	/^        void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::signal7	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5, arg6_type a6, arg7_type a7)
emit	Sigslot.h	/^        void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::signal8	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5, arg6_type a6, arg7_type a7, arg8_type a8)
event_cond_	Event.h	/^        pthread_cond_t event_cond_;$/;"	m	class:NAME_SPACE::Event	access:private
event_mutex_	Event.h	/^        pthread_mutex_t event_mutex_;$/;"	m	class:NAME_SPACE::Event	access:private
event_status_	Event.h	/^        bool event_status_;$/;"	m	class:NAME_SPACE::Event	access:private
get_mutex	Sigslot.h	/^        pthread_mutex_t* get_mutex()$/;"	f	class:sigslot::multi_threaded_global	access:private	signature:()
getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const = 0;$/;"	p	class:sigslot::_connection_base0	access:public	signature:() const
getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const = 0;$/;"	p	class:sigslot::_connection_base1	access:public	signature:() const
getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const = 0;$/;"	p	class:sigslot::_connection_base2	access:public	signature:() const
getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const = 0;$/;"	p	class:sigslot::_connection_base3	access:public	signature:() const
getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const = 0;$/;"	p	class:sigslot::_connection_base4	access:public	signature:() const
getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const = 0;$/;"	p	class:sigslot::_connection_base5	access:public	signature:() const
getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const = 0;$/;"	p	class:sigslot::_connection_base6	access:public	signature:() const
getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const = 0;$/;"	p	class:sigslot::_connection_base7	access:public	signature:() const
getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const = 0;$/;"	p	class:sigslot::_connection_base8	access:public	signature:() const
getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const$/;"	f	class:sigslot::_connection0	access:public	signature:() const
getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const$/;"	f	class:sigslot::_connection1	access:public	signature:() const
getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const$/;"	f	class:sigslot::_connection2	access:public	signature:() const
getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const$/;"	f	class:sigslot::_connection3	access:public	signature:() const
getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const$/;"	f	class:sigslot::_connection4	access:public	signature:() const
getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const$/;"	f	class:sigslot::_connection5	access:public	signature:() const
getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const$/;"	f	class:sigslot::_connection6	access:public	signature:() const
getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const$/;"	f	class:sigslot::_connection7	access:public	signature:() const
getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const$/;"	f	class:sigslot::_connection8	access:public	signature:() const
has_slots	Sigslot.h	/^        has_slots()$/;"	f	class:sigslot::has_slots	access:public	signature:()
has_slots	Sigslot.h	/^        has_slots(const has_slots& hs)$/;"	f	class:sigslot::has_slots	access:public	signature:(const has_slots& hs)
has_slots	Sigslot.h	/^    class has_slots : public has_slots_interface, public mt_policy$/;"	c	namespace:sigslot	inherits:has_slots_interface,mt_policy
has_slots_interface	Sigslot.h	/^        has_slots_interface()$/;"	f	class:sigslot::has_slots_interface	access:public	signature:()
has_slots_interface	Sigslot.h	/^    class has_slots_interface$/;"	c	namespace:sigslot
int16	Common.h	/^    typedef short int16;  \/\/ NOLINT$/;"	t	namespace:NAME_SPACE
int32	Common.h	/^    typedef int int32;$/;"	t	namespace:NAME_SPACE
int64	Common.h	/^    typedef int64_t int64;$/;"	t	namespace:NAME_SPACE
int8	Common.h	/^    typedef char int8;$/;"	t	namespace:NAME_SPACE
is_empty	Sigslot.h	/^        bool is_empty()$/;"	f	class:sigslot::_signal_base0	access:public	signature:()
is_empty	Sigslot.h	/^        bool is_empty()$/;"	f	class:sigslot::_signal_base1	access:public	signature:()
is_empty	Sigslot.h	/^        bool is_empty()$/;"	f	class:sigslot::_signal_base2	access:public	signature:()
is_empty	Sigslot.h	/^        bool is_empty()$/;"	f	class:sigslot::_signal_base3	access:public	signature:()
is_empty	Sigslot.h	/^        bool is_empty()$/;"	f	class:sigslot::_signal_base4	access:public	signature:()
is_empty	Sigslot.h	/^        bool is_empty()$/;"	f	class:sigslot::_signal_base5	access:public	signature:()
is_empty	Sigslot.h	/^        bool is_empty()$/;"	f	class:sigslot::_signal_base6	access:public	signature:()
is_empty	Sigslot.h	/^        bool is_empty()$/;"	f	class:sigslot::_signal_base7	access:public	signature:()
is_empty	Sigslot.h	/^        bool is_empty()$/;"	f	class:sigslot::_signal_base8	access:public	signature:()
is_manual_reset_	Event.h	/^        const bool is_manual_reset_;$/;"	m	class:NAME_SPACE::Event	access:private
kForever	Event.h	/^        static const int kForever = -1;$/;"	m	class:NAME_SPACE::Event	access:public
kForever	Thread.h	/^        static const int kForever = -1;$/;"	m	class:NAME_SPACE::ThreadManager	access:public
kPacketLenSize	Common.h	/^static const size_t kPacketLenSize = sizeof(PacketLength);$/;"	m	namespace:NAME_SPACE
key_	Thread.h	/^        pthread_key_t key_;$/;"	m	class:NAME_SPACE::ThreadManager	access:private
lock	Sigslot.cpp	/^    void multi_threaded_global::lock() {$/;"	f	class:sigslot::multi_threaded_global	signature:()
lock	Sigslot.cpp	/^    void multi_threaded_local::lock() {$/;"	f	class:sigslot::multi_threaded_local	signature:()
lock	Sigslot.h	/^        virtual void lock() {}$/;"	f	class:sigslot::single_threaded	access:public	signature:()
lock	Sigslot.h	/^        virtual void lock();$/;"	p	class:sigslot::multi_threaded_global	access:public	signature:()
lock	Sigslot.h	/^        virtual void lock();$/;"	p	class:sigslot::multi_threaded_local	access:public	signature:()
lock_	RWLock.h	/^        pthread_rwlock_t lock_;$/;"	m	class:NAME_SPACE::RWLock	access:private
lock_block	Sigslot.h	/^        lock_block(mt_policy *mtx)$/;"	f	class:sigslot::lock_block	access:public	signature:(mt_policy *mtx)
lock_block	Sigslot.h	/^    class lock_block$/;"	c	namespace:sigslot
m_connected_slots	Sigslot.h	/^        connections_list m_connected_slots;$/;"	m	class:sigslot::_signal_base0	access:protected
m_connected_slots	Sigslot.h	/^        connections_list m_connected_slots;$/;"	m	class:sigslot::_signal_base1	access:protected
m_connected_slots	Sigslot.h	/^        connections_list m_connected_slots;$/;"	m	class:sigslot::_signal_base2	access:protected
m_connected_slots	Sigslot.h	/^        connections_list m_connected_slots;$/;"	m	class:sigslot::_signal_base3	access:protected
m_connected_slots	Sigslot.h	/^        connections_list m_connected_slots;$/;"	m	class:sigslot::_signal_base4	access:protected
m_connected_slots	Sigslot.h	/^        connections_list m_connected_slots;$/;"	m	class:sigslot::_signal_base5	access:protected
m_connected_slots	Sigslot.h	/^        connections_list m_connected_slots;$/;"	m	class:sigslot::_signal_base6	access:protected
m_connected_slots	Sigslot.h	/^        connections_list m_connected_slots;$/;"	m	class:sigslot::_signal_base7	access:protected
m_connected_slots	Sigslot.h	/^        connections_list m_connected_slots;$/;"	m	class:sigslot::_signal_base8	access:protected
m_mutex	Sigslot.h	/^        mt_policy *m_mutex;$/;"	m	class:sigslot::lock_block	access:public
m_mutex	Sigslot.h	/^        pthread_mutex_t m_mutex;$/;"	m	class:sigslot::multi_threaded_local	access:private
m_pmemfun	Sigslot.h	/^        void (dest_type::* m_pmemfun)();$/;"	m	class:sigslot::_connection0	access:private
m_pmemfun	Sigslot.h	/^        void (dest_type::* m_pmemfun)(arg1_type);$/;"	m	class:sigslot::_connection1	access:private
m_pmemfun	Sigslot.h	/^        void (dest_type::* m_pmemfun)(arg1_type, arg2_type);$/;"	m	class:sigslot::_connection2	access:private
m_pmemfun	Sigslot.h	/^        void (dest_type::* m_pmemfun)(arg1_type, arg2_type, arg3_type);$/;"	m	class:sigslot::_connection3	access:private
m_pmemfun	Sigslot.h	/^        void (dest_type::* m_pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type,$/;"	m	class:sigslot::_connection5	access:private
m_pmemfun	Sigslot.h	/^        void (dest_type::* m_pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type,$/;"	m	class:sigslot::_connection6	access:private
m_pmemfun	Sigslot.h	/^        void (dest_type::* m_pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type,$/;"	m	class:sigslot::_connection7	access:private
m_pmemfun	Sigslot.h	/^        void (dest_type::* m_pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type,$/;"	m	class:sigslot::_connection8	access:private
m_pmemfun	Sigslot.h	/^        void (dest_type::* m_pmemfun)(arg1_type, arg2_type, arg3_type,$/;"	m	class:sigslot::_connection4	access:private
m_pobject	Sigslot.h	/^        dest_type* m_pobject;$/;"	m	class:sigslot::_connection0	access:private
m_pobject	Sigslot.h	/^        dest_type* m_pobject;$/;"	m	class:sigslot::_connection1	access:private
m_pobject	Sigslot.h	/^        dest_type* m_pobject;$/;"	m	class:sigslot::_connection2	access:private
m_pobject	Sigslot.h	/^        dest_type* m_pobject;$/;"	m	class:sigslot::_connection3	access:private
m_pobject	Sigslot.h	/^        dest_type* m_pobject;$/;"	m	class:sigslot::_connection4	access:private
m_pobject	Sigslot.h	/^        dest_type* m_pobject;$/;"	m	class:sigslot::_connection5	access:private
m_pobject	Sigslot.h	/^        dest_type* m_pobject;$/;"	m	class:sigslot::_connection6	access:private
m_pobject	Sigslot.h	/^        dest_type* m_pobject;$/;"	m	class:sigslot::_connection7	access:private
m_pobject	Sigslot.h	/^        dest_type* m_pobject;$/;"	m	class:sigslot::_connection8	access:private
m_senders	Sigslot.h	/^        sender_set m_senders;$/;"	m	class:sigslot::has_slots	access:private
main	main.cpp	/^int main(int argc,char* argv[]) {  $/;"	f	signature:(int argc,char* argv[])
multi_threaded_global	Sigslot.cpp	/^    multi_threaded_global::multi_threaded_global() {$/;"	f	class:sigslot::multi_threaded_global	signature:()
multi_threaded_global	Sigslot.cpp	/^    multi_threaded_global::multi_threaded_global(const multi_threaded_global&) {$/;"	f	class:sigslot::multi_threaded_global	signature:(const multi_threaded_global&)
multi_threaded_global	Sigslot.h	/^        multi_threaded_global();$/;"	p	class:sigslot::multi_threaded_global	access:public	signature:()
multi_threaded_global	Sigslot.h	/^        multi_threaded_global(const multi_threaded_global&);$/;"	p	class:sigslot::multi_threaded_global	access:public	signature:(const multi_threaded_global&)
multi_threaded_global	Sigslot.h	/^    class multi_threaded_global$/;"	c	namespace:sigslot
multi_threaded_local	Sigslot.cpp	/^    multi_threaded_local::multi_threaded_local() {$/;"	f	class:sigslot::multi_threaded_local	signature:()
multi_threaded_local	Sigslot.cpp	/^    multi_threaded_local::multi_threaded_local(const multi_threaded_local&) {$/;"	f	class:sigslot::multi_threaded_local	signature:(const multi_threaded_local&)
multi_threaded_local	Sigslot.h	/^        multi_threaded_local();$/;"	p	class:sigslot::multi_threaded_local	access:public	signature:()
multi_threaded_local	Sigslot.h	/^        multi_threaded_local(const multi_threaded_local&);$/;"	p	class:sigslot::multi_threaded_local	access:public	signature:(const multi_threaded_local&)
multi_threaded_local	Sigslot.h	/^    class multi_threaded_local$/;"	c	namespace:sigslot
mutex_	CriticalSection.h	/^        pthread_mutex_t mutex_;$/;"	m	class:NAME_SPACE::CriticalSection	access:private
name	Thread.h	/^        const std::string& name() const { return name_;}$/;"	f	class:NAME_SPACE::Thread	access:public	signature:() const
name_	Thread.h	/^        std::string name_;$/;"	m	class:NAME_SPACE::Thread	access:private
operator ()	Sigslot.h	/^        void operator()()$/;"	f	class:sigslot::signal0	access:public	signature:()
operator ()	Sigslot.h	/^        void operator()(arg1_type a1)$/;"	f	class:sigslot::signal1	access:public	signature:(arg1_type a1)
operator ()	Sigslot.h	/^        void operator()(arg1_type a1, arg2_type a2)$/;"	f	class:sigslot::signal2	access:public	signature:(arg1_type a1, arg2_type a2)
operator ()	Sigslot.h	/^        void operator()(arg1_type a1, arg2_type a2, arg3_type a3)$/;"	f	class:sigslot::signal3	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3)
operator ()	Sigslot.h	/^        void operator()(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4)$/;"	f	class:sigslot::signal4	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4)
operator ()	Sigslot.h	/^        void operator()(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::signal5	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5)
operator ()	Sigslot.h	/^        void operator()(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::signal6	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5, arg6_type a6)
operator ()	Sigslot.h	/^        void operator()(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::signal7	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5, arg6_type a6, arg7_type a7)
operator ()	Sigslot.h	/^        void operator()(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::signal8	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5, arg6_type a6, arg7_type a7, arg8_type a8)
owned_	Thread.h	/^        bool owned_;$/;"	m	class:NAME_SPACE::Thread	access:private
priority	Thread.h	/^        ThreadPriority priority() const { return priority_; }$/;"	f	class:NAME_SPACE::Thread	access:public	signature:() const
priority_	Thread.h	/^        ThreadPriority priority_;$/;"	m	class:NAME_SPACE::Thread	access:private
ptr_crit_sec_	CriticalSection.h	/^        CriticalSection* ptr_crit_sec_;$/;"	m	class:NAME_SPACE::CriticalSectionScoped	access:private
runnable	Thread.cpp	/^        Runnable* runnable;$/;"	m	struct:NAME_SPACE::ThreadInit	file:	access:public
running	Thread.h	/^        bool running() { return running_.Wait(0); }$/;"	f	class:NAME_SPACE::Thread	access:private	signature:()
running_	Thread.h	/^        Event running_;  \/\/ Signalled means running.$/;"	m	class:NAME_SPACE::Thread	access:private
rw_lock_	RWLock.h	/^        RWLock& rw_lock_;$/;"	m	class:NAME_SPACE::ReadLockScoped	access:private
rw_lock_	RWLock.h	/^        RWLock& rw_lock_;$/;"	m	class:NAME_SPACE::WriteLockScoped	access:private
sender_set	Sigslot.h	/^        typedef std::set<_signal_base_interface*> sender_set;$/;"	t	class:sigslot::has_slots	access:private
signal0	Sigslot.h	/^        signal0()$/;"	f	class:sigslot::signal0	access:public	signature:()
signal0	Sigslot.h	/^        signal0(const signal0<mt_policy>& s)$/;"	f	class:sigslot::signal0	access:public	signature:(const signal0<mt_policy>& s)
signal0	Sigslot.h	/^    class signal0 : public _signal_base0<mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base0
signal1	Sigslot.h	/^        signal1()$/;"	f	class:sigslot::signal1	access:public	signature:()
signal1	Sigslot.h	/^        signal1(const signal1<arg1_type, mt_policy>& s)$/;"	f	class:sigslot::signal1	access:public	signature:(const signal1<arg1_type, mt_policy>& s)
signal1	Sigslot.h	/^    class signal1 : public _signal_base1<arg1_type, mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base1
signal2	Sigslot.h	/^        signal2()$/;"	f	class:sigslot::signal2	access:public	signature:()
signal2	Sigslot.h	/^        signal2(const signal2<arg1_type, arg2_type, mt_policy>& s)$/;"	f	class:sigslot::signal2	access:public	signature:(const signal2<arg1_type, arg2_type, mt_policy>& s)
signal2	Sigslot.h	/^    class signal2 : public _signal_base2<arg1_type, arg2_type, mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base2
signal3	Sigslot.h	/^        signal3()$/;"	f	class:sigslot::signal3	access:public	signature:()
signal3	Sigslot.h	/^        signal3(const signal3<arg1_type, arg2_type, arg3_type, mt_policy>& s)$/;"	f	class:sigslot::signal3	access:public	signature:(const signal3<arg1_type, arg2_type, arg3_type, mt_policy>& s)
signal3	Sigslot.h	/^    class signal3 : public _signal_base3<arg1_type, arg2_type, arg3_type, mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base3
signal4	Sigslot.h	/^        signal4()$/;"	f	class:sigslot::signal4	access:public	signature:()
signal4	Sigslot.h	/^        signal4(const signal4<arg1_type, arg2_type, arg3_type, arg4_type, mt_policy>& s)$/;"	f	class:sigslot::signal4	access:public	signature:(const signal4<arg1_type, arg2_type, arg3_type, arg4_type, mt_policy>& s)
signal4	Sigslot.h	/^    class signal4 : public _signal_base4<arg1_type, arg2_type, arg3_type,$/;"	c	namespace:sigslot	inherits:_signal_base4
signal5	Sigslot.h	/^        signal5()$/;"	f	class:sigslot::signal5	access:public	signature:()
signal5	Sigslot.h	/^        signal5(const signal5<arg1_type, arg2_type, arg3_type, arg4_type,$/;"	f	class:sigslot::signal5	access:public	signature:(const signal5<arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, mt_policy>& s)
signal5	Sigslot.h	/^    class signal5 : public _signal_base5<arg1_type, arg2_type, arg3_type,$/;"	c	namespace:sigslot	inherits:_signal_base5
signal6	Sigslot.h	/^        signal6()$/;"	f	class:sigslot::signal6	access:public	signature:()
signal6	Sigslot.h	/^        signal6(const signal6<arg1_type, arg2_type, arg3_type, arg4_type,$/;"	f	class:sigslot::signal6	access:public	signature:(const signal6<arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, mt_policy>& s)
signal6	Sigslot.h	/^    class signal6 : public _signal_base6<arg1_type, arg2_type, arg3_type,$/;"	c	namespace:sigslot	inherits:_signal_base6
signal7	Sigslot.h	/^        signal7()$/;"	f	class:sigslot::signal7	access:public	signature:()
signal7	Sigslot.h	/^        signal7(const signal7<arg1_type, arg2_type, arg3_type, arg4_type,$/;"	f	class:sigslot::signal7	access:public	signature:(const signal7<arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, arg7_type, mt_policy>& s)
signal7	Sigslot.h	/^    class signal7 : public _signal_base7<arg1_type, arg2_type, arg3_type,$/;"	c	namespace:sigslot	inherits:_signal_base7
signal8	Sigslot.h	/^        signal8()$/;"	f	class:sigslot::signal8	access:public	signature:()
signal8	Sigslot.h	/^        signal8(const signal8<arg1_type, arg2_type, arg3_type, arg4_type,$/;"	f	class:sigslot::signal8	access:public	signature:(const signal8<arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, arg7_type, arg8_type, mt_policy>& s)
signal8	Sigslot.h	/^    class signal8 : public _signal_base8<arg1_type, arg2_type, arg3_type,$/;"	c	namespace:sigslot	inherits:_signal_base8
signal_connect	Sigslot.h	/^        virtual void signal_connect(_signal_base_interface* sender) = 0;$/;"	p	class:sigslot::has_slots_interface	access:public	signature:(_signal_base_interface* sender)
signal_connect	Sigslot.h	/^        void signal_connect(_signal_base_interface* sender)$/;"	f	class:sigslot::has_slots	access:public	signature:(_signal_base_interface* sender)
signal_disconnect	Sigslot.h	/^        virtual void signal_disconnect(_signal_base_interface* sender) = 0;$/;"	p	class:sigslot::has_slots_interface	access:public	signature:(_signal_base_interface* sender)
signal_disconnect	Sigslot.h	/^        void signal_disconnect(_signal_base_interface* sender)$/;"	f	class:sigslot::has_slots	access:public	signature:(_signal_base_interface* sender)
sigslot	Sigslot.cpp	/^namespace sigslot {$/;"	n	file:
sigslot	Sigslot.h	/^namespace sigslot {$/;"	n
sigslot::_connection0	Sigslot.h	/^    class _connection0 : public _connection_base0<mt_policy>$/;"	c	namespace:sigslot	inherits:_connection_base0
sigslot::_connection0::_connection0	Sigslot.h	/^        _connection0()$/;"	f	class:sigslot::_connection0	access:public	signature:()
sigslot::_connection0::_connection0	Sigslot.h	/^        _connection0(dest_type* pobject, void (dest_type::*pmemfun)())$/;"	f	class:sigslot::_connection0	access:public	signature:(dest_type* pobject, void (dest_type::*pmemfun)())
sigslot::_connection0::clone	Sigslot.h	/^        virtual _connection_base0<mt_policy>* clone()$/;"	f	class:sigslot::_connection0	access:public	signature:()
sigslot::_connection0::duplicate	Sigslot.h	/^        virtual _connection_base0<mt_policy>* duplicate(has_slots_interface* pnewdest)$/;"	f	class:sigslot::_connection0	access:public	signature:(has_slots_interface* pnewdest)
sigslot::_connection0::emit	Sigslot.h	/^        virtual void emit()$/;"	f	class:sigslot::_connection0	access:public	signature:()
sigslot::_connection0::getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const$/;"	f	class:sigslot::_connection0	access:public	signature:() const
sigslot::_connection0::m_pmemfun	Sigslot.h	/^        void (dest_type::* m_pmemfun)();$/;"	m	class:sigslot::_connection0	access:private
sigslot::_connection0::m_pobject	Sigslot.h	/^        dest_type* m_pobject;$/;"	m	class:sigslot::_connection0	access:private
sigslot::_connection0::~_connection0	Sigslot.h	/^        virtual ~_connection0()$/;"	f	class:sigslot::_connection0	access:public	signature:()
sigslot::_connection1	Sigslot.h	/^    class _connection1 : public _connection_base1<arg1_type, mt_policy>$/;"	c	namespace:sigslot	inherits:_connection_base1
sigslot::_connection1::_connection1	Sigslot.h	/^        _connection1()$/;"	f	class:sigslot::_connection1	access:public	signature:()
sigslot::_connection1::_connection1	Sigslot.h	/^        _connection1(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type))$/;"	f	class:sigslot::_connection1	access:public	signature:(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type))
sigslot::_connection1::clone	Sigslot.h	/^        virtual _connection_base1<arg1_type, mt_policy>* clone()$/;"	f	class:sigslot::_connection1	access:public	signature:()
sigslot::_connection1::duplicate	Sigslot.h	/^        virtual _connection_base1<arg1_type, mt_policy>* duplicate(has_slots_interface* pnewdest)$/;"	f	class:sigslot::_connection1	access:public	signature:(has_slots_interface* pnewdest)
sigslot::_connection1::emit	Sigslot.h	/^        virtual void emit(arg1_type a1)$/;"	f	class:sigslot::_connection1	access:public	signature:(arg1_type a1)
sigslot::_connection1::getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const$/;"	f	class:sigslot::_connection1	access:public	signature:() const
sigslot::_connection1::m_pmemfun	Sigslot.h	/^        void (dest_type::* m_pmemfun)(arg1_type);$/;"	m	class:sigslot::_connection1	access:private
sigslot::_connection1::m_pobject	Sigslot.h	/^        dest_type* m_pobject;$/;"	m	class:sigslot::_connection1	access:private
sigslot::_connection1::~_connection1	Sigslot.h	/^        virtual ~_connection1()$/;"	f	class:sigslot::_connection1	access:public	signature:()
sigslot::_connection2	Sigslot.h	/^    class _connection2 : public _connection_base2<arg1_type, arg2_type, mt_policy>$/;"	c	namespace:sigslot	inherits:_connection_base2
sigslot::_connection2::_connection2	Sigslot.h	/^        _connection2()$/;"	f	class:sigslot::_connection2	access:public	signature:()
sigslot::_connection2::_connection2	Sigslot.h	/^        _connection2(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type,$/;"	f	class:sigslot::_connection2	access:public	signature:(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type, arg2_type))
sigslot::_connection2::clone	Sigslot.h	/^        virtual _connection_base2<arg1_type, arg2_type, mt_policy>* clone()$/;"	f	class:sigslot::_connection2	access:public	signature:()
sigslot::_connection2::duplicate	Sigslot.h	/^        virtual _connection_base2<arg1_type, arg2_type, mt_policy>* duplicate(has_slots_interface* pnewdest)$/;"	f	class:sigslot::_connection2	access:public	signature:(has_slots_interface* pnewdest)
sigslot::_connection2::emit	Sigslot.h	/^        virtual void emit(arg1_type a1, arg2_type a2)$/;"	f	class:sigslot::_connection2	access:public	signature:(arg1_type a1, arg2_type a2)
sigslot::_connection2::getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const$/;"	f	class:sigslot::_connection2	access:public	signature:() const
sigslot::_connection2::m_pmemfun	Sigslot.h	/^        void (dest_type::* m_pmemfun)(arg1_type, arg2_type);$/;"	m	class:sigslot::_connection2	access:private
sigslot::_connection2::m_pobject	Sigslot.h	/^        dest_type* m_pobject;$/;"	m	class:sigslot::_connection2	access:private
sigslot::_connection2::~_connection2	Sigslot.h	/^        virtual ~_connection2()$/;"	f	class:sigslot::_connection2	access:public	signature:()
sigslot::_connection3	Sigslot.h	/^    class _connection3 : public _connection_base3<arg1_type, arg2_type, arg3_type, mt_policy>$/;"	c	namespace:sigslot	inherits:_connection_base3
sigslot::_connection3::_connection3	Sigslot.h	/^        _connection3()$/;"	f	class:sigslot::_connection3	access:public	signature:()
sigslot::_connection3::_connection3	Sigslot.h	/^        _connection3(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type,$/;"	f	class:sigslot::_connection3	access:public	signature:(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type, arg2_type, arg3_type))
sigslot::_connection3::clone	Sigslot.h	/^        virtual _connection_base3<arg1_type, arg2_type, arg3_type, mt_policy>* clone()$/;"	f	class:sigslot::_connection3	access:public	signature:()
sigslot::_connection3::duplicate	Sigslot.h	/^        virtual _connection_base3<arg1_type, arg2_type, arg3_type, mt_policy>* duplicate(has_slots_interface* pnewdest)$/;"	f	class:sigslot::_connection3	access:public	signature:(has_slots_interface* pnewdest)
sigslot::_connection3::emit	Sigslot.h	/^        virtual void emit(arg1_type a1, arg2_type a2, arg3_type a3)$/;"	f	class:sigslot::_connection3	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3)
sigslot::_connection3::getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const$/;"	f	class:sigslot::_connection3	access:public	signature:() const
sigslot::_connection3::m_pmemfun	Sigslot.h	/^        void (dest_type::* m_pmemfun)(arg1_type, arg2_type, arg3_type);$/;"	m	class:sigslot::_connection3	access:private
sigslot::_connection3::m_pobject	Sigslot.h	/^        dest_type* m_pobject;$/;"	m	class:sigslot::_connection3	access:private
sigslot::_connection3::~_connection3	Sigslot.h	/^        virtual ~_connection3()$/;"	f	class:sigslot::_connection3	access:public	signature:()
sigslot::_connection4	Sigslot.h	/^    class _connection4 : public _connection_base4<arg1_type, arg2_type,$/;"	c	namespace:sigslot	inherits:_connection_base4
sigslot::_connection4::_connection4	Sigslot.h	/^        _connection4()$/;"	f	class:sigslot::_connection4	access:public	signature:()
sigslot::_connection4::_connection4	Sigslot.h	/^        _connection4(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type,$/;"	f	class:sigslot::_connection4	access:public	signature:(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type))
sigslot::_connection4::clone	Sigslot.h	/^        virtual _connection_base4<arg1_type, arg2_type, arg3_type, arg4_type, mt_policy>* clone()$/;"	f	class:sigslot::_connection4	access:public	signature:()
sigslot::_connection4::duplicate	Sigslot.h	/^        virtual _connection_base4<arg1_type, arg2_type, arg3_type, arg4_type, mt_policy>* duplicate(has_slots_interface* pnewdest)$/;"	f	class:sigslot::_connection4	access:public	signature:(has_slots_interface* pnewdest)
sigslot::_connection4::emit	Sigslot.h	/^        virtual void emit(arg1_type a1, arg2_type a2, arg3_type a3,$/;"	f	class:sigslot::_connection4	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4)
sigslot::_connection4::getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const$/;"	f	class:sigslot::_connection4	access:public	signature:() const
sigslot::_connection4::m_pmemfun	Sigslot.h	/^        void (dest_type::* m_pmemfun)(arg1_type, arg2_type, arg3_type,$/;"	m	class:sigslot::_connection4	access:private
sigslot::_connection4::m_pobject	Sigslot.h	/^        dest_type* m_pobject;$/;"	m	class:sigslot::_connection4	access:private
sigslot::_connection4::~_connection4	Sigslot.h	/^        virtual ~_connection4()$/;"	f	class:sigslot::_connection4	access:public	signature:()
sigslot::_connection5	Sigslot.h	/^    class _connection5 : public _connection_base5<arg1_type, arg2_type,$/;"	c	namespace:sigslot	inherits:_connection_base5
sigslot::_connection5::_connection5	Sigslot.h	/^        _connection5()$/;"	f	class:sigslot::_connection5	access:public	signature:()
sigslot::_connection5::_connection5	Sigslot.h	/^        _connection5(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type,$/;"	f	class:sigslot::_connection5	access:public	signature:(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type))
sigslot::_connection5::clone	Sigslot.h	/^        arg5_type, mt_policy>* clone()$/;"	f	class:sigslot::_connection5	access:public	signature:()
sigslot::_connection5::duplicate	Sigslot.h	/^        arg5_type, mt_policy>* duplicate(has_slots_interface* pnewdest)$/;"	f	class:sigslot::_connection5	access:public	signature:(has_slots_interface* pnewdest)
sigslot::_connection5::emit	Sigslot.h	/^        virtual void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::_connection5	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5)
sigslot::_connection5::getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const$/;"	f	class:sigslot::_connection5	access:public	signature:() const
sigslot::_connection5::m_pmemfun	Sigslot.h	/^        void (dest_type::* m_pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type,$/;"	m	class:sigslot::_connection5	access:private
sigslot::_connection5::m_pobject	Sigslot.h	/^        dest_type* m_pobject;$/;"	m	class:sigslot::_connection5	access:private
sigslot::_connection5::~_connection5	Sigslot.h	/^        virtual ~_connection5()$/;"	f	class:sigslot::_connection5	access:public	signature:()
sigslot::_connection6	Sigslot.h	/^    class _connection6 : public _connection_base6<arg1_type, arg2_type,$/;"	c	namespace:sigslot	inherits:_connection_base6
sigslot::_connection6::_connection6	Sigslot.h	/^        _connection6()$/;"	f	class:sigslot::_connection6	access:public	signature:()
sigslot::_connection6::_connection6	Sigslot.h	/^        _connection6(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type,$/;"	f	class:sigslot::_connection6	access:public	signature:(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type))
sigslot::_connection6::clone	Sigslot.h	/^        arg5_type, arg6_type, mt_policy>* clone()$/;"	f	class:sigslot::_connection6	access:public	signature:()
sigslot::_connection6::duplicate	Sigslot.h	/^        arg5_type, arg6_type, mt_policy>* duplicate(has_slots_interface* pnewdest)$/;"	f	class:sigslot::_connection6	access:public	signature:(has_slots_interface* pnewdest)
sigslot::_connection6::emit	Sigslot.h	/^        virtual void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::_connection6	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5, arg6_type a6)
sigslot::_connection6::getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const$/;"	f	class:sigslot::_connection6	access:public	signature:() const
sigslot::_connection6::m_pmemfun	Sigslot.h	/^        void (dest_type::* m_pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type,$/;"	m	class:sigslot::_connection6	access:private
sigslot::_connection6::m_pobject	Sigslot.h	/^        dest_type* m_pobject;$/;"	m	class:sigslot::_connection6	access:private
sigslot::_connection6::~_connection6	Sigslot.h	/^        virtual ~_connection6()$/;"	f	class:sigslot::_connection6	access:public	signature:()
sigslot::_connection7	Sigslot.h	/^    class _connection7 : public _connection_base7<arg1_type, arg2_type,$/;"	c	namespace:sigslot	inherits:_connection_base7
sigslot::_connection7::_connection7	Sigslot.h	/^        _connection7()$/;"	f	class:sigslot::_connection7	access:public	signature:()
sigslot::_connection7::_connection7	Sigslot.h	/^        _connection7(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type,$/;"	f	class:sigslot::_connection7	access:public	signature:(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, arg7_type))
sigslot::_connection7::clone	Sigslot.h	/^        arg5_type, arg6_type, arg7_type, mt_policy>* clone()$/;"	f	class:sigslot::_connection7	access:public	signature:()
sigslot::_connection7::duplicate	Sigslot.h	/^        arg5_type, arg6_type, arg7_type, mt_policy>* duplicate(has_slots_interface* pnewdest)$/;"	f	class:sigslot::_connection7	access:public	signature:(has_slots_interface* pnewdest)
sigslot::_connection7::emit	Sigslot.h	/^        virtual void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::_connection7	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5, arg6_type a6, arg7_type a7)
sigslot::_connection7::getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const$/;"	f	class:sigslot::_connection7	access:public	signature:() const
sigslot::_connection7::m_pmemfun	Sigslot.h	/^        void (dest_type::* m_pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type,$/;"	m	class:sigslot::_connection7	access:private
sigslot::_connection7::m_pobject	Sigslot.h	/^        dest_type* m_pobject;$/;"	m	class:sigslot::_connection7	access:private
sigslot::_connection7::~_connection7	Sigslot.h	/^        virtual ~_connection7()$/;"	f	class:sigslot::_connection7	access:public	signature:()
sigslot::_connection8	Sigslot.h	/^    class _connection8 : public _connection_base8<arg1_type, arg2_type,$/;"	c	namespace:sigslot	inherits:_connection_base8
sigslot::_connection8::_connection8	Sigslot.h	/^        _connection8()$/;"	f	class:sigslot::_connection8	access:public	signature:()
sigslot::_connection8::_connection8	Sigslot.h	/^        _connection8(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type,$/;"	f	class:sigslot::_connection8	access:public	signature:(dest_type* pobject, void (dest_type::*pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, arg7_type, arg8_type))
sigslot::_connection8::clone	Sigslot.h	/^        arg5_type, arg6_type, arg7_type, arg8_type, mt_policy>* clone()$/;"	f	class:sigslot::_connection8	access:public	signature:()
sigslot::_connection8::duplicate	Sigslot.h	/^        arg5_type, arg6_type, arg7_type, arg8_type, mt_policy>* duplicate(has_slots_interface* pnewdest)$/;"	f	class:sigslot::_connection8	access:public	signature:(has_slots_interface* pnewdest)
sigslot::_connection8::emit	Sigslot.h	/^        virtual void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::_connection8	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5, arg6_type a6, arg7_type a7, arg8_type a8)
sigslot::_connection8::getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const$/;"	f	class:sigslot::_connection8	access:public	signature:() const
sigslot::_connection8::m_pmemfun	Sigslot.h	/^        void (dest_type::* m_pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type,$/;"	m	class:sigslot::_connection8	access:private
sigslot::_connection8::m_pobject	Sigslot.h	/^        dest_type* m_pobject;$/;"	m	class:sigslot::_connection8	access:private
sigslot::_connection8::~_connection8	Sigslot.h	/^        virtual ~_connection8()$/;"	f	class:sigslot::_connection8	access:public	signature:()
sigslot::_connection_base0	Sigslot.h	/^    class _connection_base0$/;"	c	namespace:sigslot
sigslot::_connection_base0::clone	Sigslot.h	/^        virtual _connection_base0* clone() = 0;$/;"	p	class:sigslot::_connection_base0	access:public	signature:()
sigslot::_connection_base0::duplicate	Sigslot.h	/^        virtual _connection_base0* duplicate(has_slots_interface* pnewdest) = 0;$/;"	p	class:sigslot::_connection_base0	access:public	signature:(has_slots_interface* pnewdest)
sigslot::_connection_base0::emit	Sigslot.h	/^        virtual void emit() = 0;$/;"	p	class:sigslot::_connection_base0	access:public	signature:()
sigslot::_connection_base0::getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const = 0;$/;"	p	class:sigslot::_connection_base0	access:public	signature:() const
sigslot::_connection_base0::~_connection_base0	Sigslot.h	/^        virtual ~_connection_base0() {}$/;"	f	class:sigslot::_connection_base0	access:public	signature:()
sigslot::_connection_base1	Sigslot.h	/^    class _connection_base1$/;"	c	namespace:sigslot
sigslot::_connection_base1::clone	Sigslot.h	/^        virtual _connection_base1<arg1_type, mt_policy>* clone() = 0;$/;"	p	class:sigslot::_connection_base1	access:public	signature:()
sigslot::_connection_base1::duplicate	Sigslot.h	/^        virtual _connection_base1<arg1_type, mt_policy>* duplicate(has_slots_interface* pnewdest) = 0;$/;"	p	class:sigslot::_connection_base1	access:public	signature:(has_slots_interface* pnewdest)
sigslot::_connection_base1::emit	Sigslot.h	/^        virtual void emit(arg1_type) = 0;$/;"	p	class:sigslot::_connection_base1	access:public	signature:(arg1_type)
sigslot::_connection_base1::getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const = 0;$/;"	p	class:sigslot::_connection_base1	access:public	signature:() const
sigslot::_connection_base1::~_connection_base1	Sigslot.h	/^        virtual ~_connection_base1() {}$/;"	f	class:sigslot::_connection_base1	access:public	signature:()
sigslot::_connection_base2	Sigslot.h	/^    class _connection_base2$/;"	c	namespace:sigslot
sigslot::_connection_base2::clone	Sigslot.h	/^        virtual _connection_base2<arg1_type, arg2_type, mt_policy>* clone() = 0;$/;"	p	class:sigslot::_connection_base2	access:public	signature:()
sigslot::_connection_base2::duplicate	Sigslot.h	/^        virtual _connection_base2<arg1_type, arg2_type, mt_policy>* duplicate(has_slots_interface* pnewdest) = 0;$/;"	p	class:sigslot::_connection_base2	access:public	signature:(has_slots_interface* pnewdest)
sigslot::_connection_base2::emit	Sigslot.h	/^        virtual void emit(arg1_type, arg2_type) = 0;$/;"	p	class:sigslot::_connection_base2	access:public	signature:(arg1_type, arg2_type)
sigslot::_connection_base2::getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const = 0;$/;"	p	class:sigslot::_connection_base2	access:public	signature:() const
sigslot::_connection_base2::~_connection_base2	Sigslot.h	/^        virtual ~_connection_base2() {}$/;"	f	class:sigslot::_connection_base2	access:public	signature:()
sigslot::_connection_base3	Sigslot.h	/^    class _connection_base3$/;"	c	namespace:sigslot
sigslot::_connection_base3::clone	Sigslot.h	/^        virtual _connection_base3<arg1_type, arg2_type, arg3_type, mt_policy>* clone() = 0;$/;"	p	class:sigslot::_connection_base3	access:public	signature:()
sigslot::_connection_base3::duplicate	Sigslot.h	/^        virtual _connection_base3<arg1_type, arg2_type, arg3_type, mt_policy>* duplicate(has_slots_interface* pnewdest) = 0;$/;"	p	class:sigslot::_connection_base3	access:public	signature:(has_slots_interface* pnewdest)
sigslot::_connection_base3::emit	Sigslot.h	/^        virtual void emit(arg1_type, arg2_type, arg3_type) = 0;$/;"	p	class:sigslot::_connection_base3	access:public	signature:(arg1_type, arg2_type, arg3_type)
sigslot::_connection_base3::getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const = 0;$/;"	p	class:sigslot::_connection_base3	access:public	signature:() const
sigslot::_connection_base3::~_connection_base3	Sigslot.h	/^        virtual ~_connection_base3() {}$/;"	f	class:sigslot::_connection_base3	access:public	signature:()
sigslot::_connection_base4	Sigslot.h	/^    class _connection_base4$/;"	c	namespace:sigslot
sigslot::_connection_base4::clone	Sigslot.h	/^        virtual _connection_base4<arg1_type, arg2_type, arg3_type, arg4_type, mt_policy>* clone() = 0;$/;"	p	class:sigslot::_connection_base4	access:public	signature:()
sigslot::_connection_base4::duplicate	Sigslot.h	/^        virtual _connection_base4<arg1_type, arg2_type, arg3_type, arg4_type, mt_policy>* duplicate(has_slots_interface* pnewdest) = 0;$/;"	p	class:sigslot::_connection_base4	access:public	signature:(has_slots_interface* pnewdest)
sigslot::_connection_base4::emit	Sigslot.h	/^        virtual void emit(arg1_type, arg2_type, arg3_type, arg4_type) = 0;$/;"	p	class:sigslot::_connection_base4	access:public	signature:(arg1_type, arg2_type, arg3_type, arg4_type)
sigslot::_connection_base4::getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const = 0;$/;"	p	class:sigslot::_connection_base4	access:public	signature:() const
sigslot::_connection_base4::~_connection_base4	Sigslot.h	/^        virtual ~_connection_base4() {}$/;"	f	class:sigslot::_connection_base4	access:public	signature:()
sigslot::_connection_base5	Sigslot.h	/^    class _connection_base5$/;"	c	namespace:sigslot
sigslot::_connection_base5::clone	Sigslot.h	/^        arg5_type, mt_policy>* clone() = 0;$/;"	p	class:sigslot::_connection_base5	access:public	signature:()
sigslot::_connection_base5::duplicate	Sigslot.h	/^        arg5_type, mt_policy>* duplicate(has_slots_interface* pnewdest) = 0;$/;"	p	class:sigslot::_connection_base5	access:public	signature:(has_slots_interface* pnewdest)
sigslot::_connection_base5::emit	Sigslot.h	/^        virtual void emit(arg1_type, arg2_type, arg3_type, arg4_type,$/;"	p	class:sigslot::_connection_base5	access:public	signature:(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type)
sigslot::_connection_base5::getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const = 0;$/;"	p	class:sigslot::_connection_base5	access:public	signature:() const
sigslot::_connection_base5::~_connection_base5	Sigslot.h	/^        virtual ~_connection_base5() {}$/;"	f	class:sigslot::_connection_base5	access:public	signature:()
sigslot::_connection_base6	Sigslot.h	/^    class _connection_base6$/;"	c	namespace:sigslot
sigslot::_connection_base6::clone	Sigslot.h	/^        arg5_type, arg6_type, mt_policy>* clone() = 0;$/;"	p	class:sigslot::_connection_base6	access:public	signature:()
sigslot::_connection_base6::duplicate	Sigslot.h	/^        arg5_type, arg6_type, mt_policy>* duplicate(has_slots_interface* pnewdest) = 0;$/;"	p	class:sigslot::_connection_base6	access:public	signature:(has_slots_interface* pnewdest)
sigslot::_connection_base6::emit	Sigslot.h	/^        virtual void emit(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type,$/;"	p	class:sigslot::_connection_base6	access:public	signature:(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type)
sigslot::_connection_base6::getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const = 0;$/;"	p	class:sigslot::_connection_base6	access:public	signature:() const
sigslot::_connection_base6::~_connection_base6	Sigslot.h	/^        virtual ~_connection_base6() {}$/;"	f	class:sigslot::_connection_base6	access:public	signature:()
sigslot::_connection_base7	Sigslot.h	/^    class _connection_base7$/;"	c	namespace:sigslot
sigslot::_connection_base7::clone	Sigslot.h	/^        arg5_type, arg6_type, arg7_type, mt_policy>* clone() = 0;$/;"	p	class:sigslot::_connection_base7	access:public	signature:()
sigslot::_connection_base7::duplicate	Sigslot.h	/^        arg5_type, arg6_type, arg7_type, mt_policy>* duplicate(has_slots_interface* pnewdest) = 0;$/;"	p	class:sigslot::_connection_base7	access:public	signature:(has_slots_interface* pnewdest)
sigslot::_connection_base7::emit	Sigslot.h	/^        virtual void emit(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type,$/;"	p	class:sigslot::_connection_base7	access:public	signature:(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, arg7_type)
sigslot::_connection_base7::getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const = 0;$/;"	p	class:sigslot::_connection_base7	access:public	signature:() const
sigslot::_connection_base7::~_connection_base7	Sigslot.h	/^        virtual ~_connection_base7() {}$/;"	f	class:sigslot::_connection_base7	access:public	signature:()
sigslot::_connection_base8	Sigslot.h	/^    class _connection_base8$/;"	c	namespace:sigslot
sigslot::_connection_base8::clone	Sigslot.h	/^        arg5_type, arg6_type, arg7_type, arg8_type, mt_policy>* clone() = 0;$/;"	p	class:sigslot::_connection_base8	access:public	signature:()
sigslot::_connection_base8::duplicate	Sigslot.h	/^        arg5_type, arg6_type, arg7_type, arg8_type, mt_policy>* duplicate(has_slots_interface* pnewdest) = 0;$/;"	p	class:sigslot::_connection_base8	access:public	signature:(has_slots_interface* pnewdest)
sigslot::_connection_base8::emit	Sigslot.h	/^        virtual void emit(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type,$/;"	p	class:sigslot::_connection_base8	access:public	signature:(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, arg7_type, arg8_type)
sigslot::_connection_base8::getdest	Sigslot.h	/^        virtual has_slots_interface* getdest() const = 0;$/;"	p	class:sigslot::_connection_base8	access:public	signature:() const
sigslot::_connection_base8::~_connection_base8	Sigslot.h	/^        virtual ~_connection_base8() {}$/;"	f	class:sigslot::_connection_base8	access:public	signature:()
sigslot::_signal_base	Sigslot.h	/^    class _signal_base : public _signal_base_interface, public mt_policy$/;"	c	namespace:sigslot	inherits:_signal_base_interface,mt_policy
sigslot::_signal_base0	Sigslot.h	/^    class _signal_base0 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base
sigslot::_signal_base0::_signal_base0	Sigslot.h	/^        _signal_base0()$/;"	f	class:sigslot::_signal_base0	access:public	signature:()
sigslot::_signal_base0::_signal_base0	Sigslot.h	/^        _signal_base0(const _signal_base0& s)$/;"	f	class:sigslot::_signal_base0	access:public	signature:(const _signal_base0& s)
sigslot::_signal_base0::connected	Sigslot.h	/^        bool connected(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base0	access:public	signature:(has_slots_interface* pclass)
sigslot::_signal_base0::connections_list	Sigslot.h	/^        typedef std::list<_connection_base0<mt_policy> *>  connections_list;$/;"	t	class:sigslot::_signal_base0	access:public
sigslot::_signal_base0::disconnect	Sigslot.h	/^        void disconnect(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base0	access:public	signature:(has_slots_interface* pclass)
sigslot::_signal_base0::disconnect_all	Sigslot.h	/^        void disconnect_all()$/;"	f	class:sigslot::_signal_base0	access:public	signature:()
sigslot::_signal_base0::is_empty	Sigslot.h	/^        bool is_empty()$/;"	f	class:sigslot::_signal_base0	access:public	signature:()
sigslot::_signal_base0::m_connected_slots	Sigslot.h	/^        connections_list m_connected_slots;$/;"	m	class:sigslot::_signal_base0	access:protected
sigslot::_signal_base0::slot_disconnect	Sigslot.h	/^        void slot_disconnect(has_slots_interface* pslot)$/;"	f	class:sigslot::_signal_base0	access:public	signature:(has_slots_interface* pslot)
sigslot::_signal_base0::slot_duplicate	Sigslot.h	/^        void slot_duplicate(const has_slots_interface* oldtarget, has_slots_interface* newtarget)$/;"	f	class:sigslot::_signal_base0	access:public	signature:(const has_slots_interface* oldtarget, has_slots_interface* newtarget)
sigslot::_signal_base0::~_signal_base0	Sigslot.h	/^        ~_signal_base0()$/;"	f	class:sigslot::_signal_base0	access:public	signature:()
sigslot::_signal_base1	Sigslot.h	/^    class _signal_base1 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base
sigslot::_signal_base1::_signal_base1	Sigslot.h	/^        _signal_base1()$/;"	f	class:sigslot::_signal_base1	access:public	signature:()
sigslot::_signal_base1::_signal_base1	Sigslot.h	/^        _signal_base1(const _signal_base1<arg1_type, mt_policy>& s)$/;"	f	class:sigslot::_signal_base1	access:public	signature:(const _signal_base1<arg1_type, mt_policy>& s)
sigslot::_signal_base1::connected	Sigslot.h	/^        bool connected(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base1	access:public	signature:(has_slots_interface* pclass)
sigslot::_signal_base1::connections_list	Sigslot.h	/^        typedef std::list<_connection_base1<arg1_type, mt_policy> *>  connections_list;$/;"	t	class:sigslot::_signal_base1	access:public
sigslot::_signal_base1::disconnect	Sigslot.h	/^        void disconnect(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base1	access:public	signature:(has_slots_interface* pclass)
sigslot::_signal_base1::disconnect_all	Sigslot.h	/^        void disconnect_all()$/;"	f	class:sigslot::_signal_base1	access:public	signature:()
sigslot::_signal_base1::is_empty	Sigslot.h	/^        bool is_empty()$/;"	f	class:sigslot::_signal_base1	access:public	signature:()
sigslot::_signal_base1::m_connected_slots	Sigslot.h	/^        connections_list m_connected_slots;$/;"	m	class:sigslot::_signal_base1	access:protected
sigslot::_signal_base1::slot_disconnect	Sigslot.h	/^        void slot_disconnect(has_slots_interface* pslot)$/;"	f	class:sigslot::_signal_base1	access:public	signature:(has_slots_interface* pslot)
sigslot::_signal_base1::slot_duplicate	Sigslot.h	/^        void slot_duplicate(const has_slots_interface* oldtarget, has_slots_interface* newtarget)$/;"	f	class:sigslot::_signal_base1	access:public	signature:(const has_slots_interface* oldtarget, has_slots_interface* newtarget)
sigslot::_signal_base1::~_signal_base1	Sigslot.h	/^        ~_signal_base1()$/;"	f	class:sigslot::_signal_base1	access:public	signature:()
sigslot::_signal_base2	Sigslot.h	/^    class _signal_base2 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base
sigslot::_signal_base2::_signal_base2	Sigslot.h	/^        _signal_base2()$/;"	f	class:sigslot::_signal_base2	access:public	signature:()
sigslot::_signal_base2::_signal_base2	Sigslot.h	/^        _signal_base2(const _signal_base2<arg1_type, arg2_type, mt_policy>& s)$/;"	f	class:sigslot::_signal_base2	access:public	signature:(const _signal_base2<arg1_type, arg2_type, mt_policy>& s)
sigslot::_signal_base2::connected	Sigslot.h	/^        bool connected(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base2	access:public	signature:(has_slots_interface* pclass)
sigslot::_signal_base2::connections_list	Sigslot.h	/^        connections_list;$/;"	t	class:sigslot::_signal_base2	access:public
sigslot::_signal_base2::disconnect	Sigslot.h	/^        void disconnect(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base2	access:public	signature:(has_slots_interface* pclass)
sigslot::_signal_base2::disconnect_all	Sigslot.h	/^        void disconnect_all()$/;"	f	class:sigslot::_signal_base2	access:public	signature:()
sigslot::_signal_base2::is_empty	Sigslot.h	/^        bool is_empty()$/;"	f	class:sigslot::_signal_base2	access:public	signature:()
sigslot::_signal_base2::m_connected_slots	Sigslot.h	/^        connections_list m_connected_slots;$/;"	m	class:sigslot::_signal_base2	access:protected
sigslot::_signal_base2::slot_disconnect	Sigslot.h	/^        void slot_disconnect(has_slots_interface* pslot)$/;"	f	class:sigslot::_signal_base2	access:public	signature:(has_slots_interface* pslot)
sigslot::_signal_base2::slot_duplicate	Sigslot.h	/^        void slot_duplicate(const has_slots_interface* oldtarget, has_slots_interface* newtarget)$/;"	f	class:sigslot::_signal_base2	access:public	signature:(const has_slots_interface* oldtarget, has_slots_interface* newtarget)
sigslot::_signal_base2::~_signal_base2	Sigslot.h	/^        ~_signal_base2()$/;"	f	class:sigslot::_signal_base2	access:public	signature:()
sigslot::_signal_base3	Sigslot.h	/^    class _signal_base3 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base
sigslot::_signal_base3::_signal_base3	Sigslot.h	/^        _signal_base3()$/;"	f	class:sigslot::_signal_base3	access:public	signature:()
sigslot::_signal_base3::_signal_base3	Sigslot.h	/^        _signal_base3(const _signal_base3<arg1_type, arg2_type, arg3_type, mt_policy>& s)$/;"	f	class:sigslot::_signal_base3	access:public	signature:(const _signal_base3<arg1_type, arg2_type, arg3_type, mt_policy>& s)
sigslot::_signal_base3::connected	Sigslot.h	/^        bool connected(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base3	access:public	signature:(has_slots_interface* pclass)
sigslot::_signal_base3::connections_list	Sigslot.h	/^        connections_list;$/;"	t	class:sigslot::_signal_base3	access:public
sigslot::_signal_base3::disconnect	Sigslot.h	/^        void disconnect(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base3	access:public	signature:(has_slots_interface* pclass)
sigslot::_signal_base3::disconnect_all	Sigslot.h	/^        void disconnect_all()$/;"	f	class:sigslot::_signal_base3	access:public	signature:()
sigslot::_signal_base3::is_empty	Sigslot.h	/^        bool is_empty()$/;"	f	class:sigslot::_signal_base3	access:public	signature:()
sigslot::_signal_base3::m_connected_slots	Sigslot.h	/^        connections_list m_connected_slots;$/;"	m	class:sigslot::_signal_base3	access:protected
sigslot::_signal_base3::slot_disconnect	Sigslot.h	/^        void slot_disconnect(has_slots_interface* pslot)$/;"	f	class:sigslot::_signal_base3	access:public	signature:(has_slots_interface* pslot)
sigslot::_signal_base3::slot_duplicate	Sigslot.h	/^        void slot_duplicate(const has_slots_interface* oldtarget, has_slots_interface* newtarget)$/;"	f	class:sigslot::_signal_base3	access:public	signature:(const has_slots_interface* oldtarget, has_slots_interface* newtarget)
sigslot::_signal_base3::~_signal_base3	Sigslot.h	/^        ~_signal_base3()$/;"	f	class:sigslot::_signal_base3	access:public	signature:()
sigslot::_signal_base4	Sigslot.h	/^    class _signal_base4 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base
sigslot::_signal_base4::_signal_base4	Sigslot.h	/^        _signal_base4()$/;"	f	class:sigslot::_signal_base4	access:public	signature:()
sigslot::_signal_base4::_signal_base4	Sigslot.h	/^        _signal_base4(const _signal_base4<arg1_type, arg2_type, arg3_type, arg4_type, mt_policy>& s)$/;"	f	class:sigslot::_signal_base4	access:public	signature:(const _signal_base4<arg1_type, arg2_type, arg3_type, arg4_type, mt_policy>& s)
sigslot::_signal_base4::connected	Sigslot.h	/^        bool connected(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base4	access:public	signature:(has_slots_interface* pclass)
sigslot::_signal_base4::connections_list	Sigslot.h	/^        arg4_type, mt_policy> *>  connections_list;$/;"	t	class:sigslot::_signal_base4	access:public
sigslot::_signal_base4::disconnect	Sigslot.h	/^        void disconnect(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base4	access:public	signature:(has_slots_interface* pclass)
sigslot::_signal_base4::disconnect_all	Sigslot.h	/^        void disconnect_all()$/;"	f	class:sigslot::_signal_base4	access:public	signature:()
sigslot::_signal_base4::is_empty	Sigslot.h	/^        bool is_empty()$/;"	f	class:sigslot::_signal_base4	access:public	signature:()
sigslot::_signal_base4::m_connected_slots	Sigslot.h	/^        connections_list m_connected_slots;$/;"	m	class:sigslot::_signal_base4	access:protected
sigslot::_signal_base4::slot_disconnect	Sigslot.h	/^        void slot_disconnect(has_slots_interface* pslot)$/;"	f	class:sigslot::_signal_base4	access:public	signature:(has_slots_interface* pslot)
sigslot::_signal_base4::slot_duplicate	Sigslot.h	/^        void slot_duplicate(const has_slots_interface* oldtarget, has_slots_interface* newtarget)$/;"	f	class:sigslot::_signal_base4	access:public	signature:(const has_slots_interface* oldtarget, has_slots_interface* newtarget)
sigslot::_signal_base4::~_signal_base4	Sigslot.h	/^        ~_signal_base4()$/;"	f	class:sigslot::_signal_base4	access:public	signature:()
sigslot::_signal_base5	Sigslot.h	/^    class _signal_base5 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base
sigslot::_signal_base5::_signal_base5	Sigslot.h	/^        _signal_base5()$/;"	f	class:sigslot::_signal_base5	access:public	signature:()
sigslot::_signal_base5::_signal_base5	Sigslot.h	/^        _signal_base5(const _signal_base5<arg1_type, arg2_type, arg3_type, arg4_type,$/;"	f	class:sigslot::_signal_base5	access:public	signature:(const _signal_base5<arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, mt_policy>& s)
sigslot::_signal_base5::connected	Sigslot.h	/^        bool connected(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base5	access:public	signature:(has_slots_interface* pclass)
sigslot::_signal_base5::connections_list	Sigslot.h	/^        arg4_type, arg5_type, mt_policy> *>  connections_list;$/;"	t	class:sigslot::_signal_base5	access:public
sigslot::_signal_base5::disconnect	Sigslot.h	/^        void disconnect(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base5	access:public	signature:(has_slots_interface* pclass)
sigslot::_signal_base5::disconnect_all	Sigslot.h	/^        void disconnect_all()$/;"	f	class:sigslot::_signal_base5	access:public	signature:()
sigslot::_signal_base5::is_empty	Sigslot.h	/^        bool is_empty()$/;"	f	class:sigslot::_signal_base5	access:public	signature:()
sigslot::_signal_base5::m_connected_slots	Sigslot.h	/^        connections_list m_connected_slots;$/;"	m	class:sigslot::_signal_base5	access:protected
sigslot::_signal_base5::slot_disconnect	Sigslot.h	/^        void slot_disconnect(has_slots_interface* pslot)$/;"	f	class:sigslot::_signal_base5	access:public	signature:(has_slots_interface* pslot)
sigslot::_signal_base5::slot_duplicate	Sigslot.h	/^        void slot_duplicate(const has_slots_interface* oldtarget, has_slots_interface* newtarget)$/;"	f	class:sigslot::_signal_base5	access:public	signature:(const has_slots_interface* oldtarget, has_slots_interface* newtarget)
sigslot::_signal_base5::~_signal_base5	Sigslot.h	/^        ~_signal_base5()$/;"	f	class:sigslot::_signal_base5	access:public	signature:()
sigslot::_signal_base6	Sigslot.h	/^    class _signal_base6 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base
sigslot::_signal_base6::_signal_base6	Sigslot.h	/^        _signal_base6()$/;"	f	class:sigslot::_signal_base6	access:public	signature:()
sigslot::_signal_base6::_signal_base6	Sigslot.h	/^        _signal_base6(const _signal_base6<arg1_type, arg2_type, arg3_type, arg4_type,$/;"	f	class:sigslot::_signal_base6	access:public	signature:(const _signal_base6<arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, mt_policy>& s)
sigslot::_signal_base6::connected	Sigslot.h	/^        bool connected(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base6	access:public	signature:(has_slots_interface* pclass)
sigslot::_signal_base6::connections_list	Sigslot.h	/^        arg4_type, arg5_type, arg6_type, mt_policy> *>  connections_list;$/;"	t	class:sigslot::_signal_base6	access:public
sigslot::_signal_base6::disconnect	Sigslot.h	/^        void disconnect(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base6	access:public	signature:(has_slots_interface* pclass)
sigslot::_signal_base6::disconnect_all	Sigslot.h	/^        void disconnect_all()$/;"	f	class:sigslot::_signal_base6	access:public	signature:()
sigslot::_signal_base6::is_empty	Sigslot.h	/^        bool is_empty()$/;"	f	class:sigslot::_signal_base6	access:public	signature:()
sigslot::_signal_base6::m_connected_slots	Sigslot.h	/^        connections_list m_connected_slots;$/;"	m	class:sigslot::_signal_base6	access:protected
sigslot::_signal_base6::slot_disconnect	Sigslot.h	/^        void slot_disconnect(has_slots_interface* pslot)$/;"	f	class:sigslot::_signal_base6	access:public	signature:(has_slots_interface* pslot)
sigslot::_signal_base6::slot_duplicate	Sigslot.h	/^        void slot_duplicate(const has_slots_interface* oldtarget, has_slots_interface* newtarget)$/;"	f	class:sigslot::_signal_base6	access:public	signature:(const has_slots_interface* oldtarget, has_slots_interface* newtarget)
sigslot::_signal_base6::~_signal_base6	Sigslot.h	/^        ~_signal_base6()$/;"	f	class:sigslot::_signal_base6	access:public	signature:()
sigslot::_signal_base7	Sigslot.h	/^    class _signal_base7 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base
sigslot::_signal_base7::_signal_base7	Sigslot.h	/^        _signal_base7()$/;"	f	class:sigslot::_signal_base7	access:public	signature:()
sigslot::_signal_base7::_signal_base7	Sigslot.h	/^        _signal_base7(const _signal_base7<arg1_type, arg2_type, arg3_type, arg4_type,$/;"	f	class:sigslot::_signal_base7	access:public	signature:(const _signal_base7<arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, arg7_type, mt_policy>& s)
sigslot::_signal_base7::connected	Sigslot.h	/^        bool connected(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base7	access:public	signature:(has_slots_interface* pclass)
sigslot::_signal_base7::connections_list	Sigslot.h	/^        arg4_type, arg5_type, arg6_type, arg7_type, mt_policy> *>  connections_list;$/;"	t	class:sigslot::_signal_base7	access:public
sigslot::_signal_base7::disconnect	Sigslot.h	/^        void disconnect(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base7	access:public	signature:(has_slots_interface* pclass)
sigslot::_signal_base7::disconnect_all	Sigslot.h	/^        void disconnect_all()$/;"	f	class:sigslot::_signal_base7	access:public	signature:()
sigslot::_signal_base7::is_empty	Sigslot.h	/^        bool is_empty()$/;"	f	class:sigslot::_signal_base7	access:public	signature:()
sigslot::_signal_base7::m_connected_slots	Sigslot.h	/^        connections_list m_connected_slots;$/;"	m	class:sigslot::_signal_base7	access:protected
sigslot::_signal_base7::slot_disconnect	Sigslot.h	/^        void slot_disconnect(has_slots_interface* pslot)$/;"	f	class:sigslot::_signal_base7	access:public	signature:(has_slots_interface* pslot)
sigslot::_signal_base7::slot_duplicate	Sigslot.h	/^        void slot_duplicate(const has_slots_interface* oldtarget, has_slots_interface* newtarget)$/;"	f	class:sigslot::_signal_base7	access:public	signature:(const has_slots_interface* oldtarget, has_slots_interface* newtarget)
sigslot::_signal_base7::~_signal_base7	Sigslot.h	/^        ~_signal_base7()$/;"	f	class:sigslot::_signal_base7	access:public	signature:()
sigslot::_signal_base8	Sigslot.h	/^    class _signal_base8 : public _signal_base<mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base
sigslot::_signal_base8::_signal_base8	Sigslot.h	/^        _signal_base8()$/;"	f	class:sigslot::_signal_base8	access:public	signature:()
sigslot::_signal_base8::_signal_base8	Sigslot.h	/^        _signal_base8(const _signal_base8<arg1_type, arg2_type, arg3_type, arg4_type,$/;"	f	class:sigslot::_signal_base8	access:public	signature:(const _signal_base8<arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, arg7_type, arg8_type, mt_policy>& s)
sigslot::_signal_base8::connected	Sigslot.h	/^        bool connected(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base8	access:public	signature:(has_slots_interface* pclass)
sigslot::_signal_base8::connections_list	Sigslot.h	/^        connections_list;$/;"	t	class:sigslot::_signal_base8	access:public
sigslot::_signal_base8::disconnect	Sigslot.h	/^        void disconnect(has_slots_interface* pclass)$/;"	f	class:sigslot::_signal_base8	access:public	signature:(has_slots_interface* pclass)
sigslot::_signal_base8::disconnect_all	Sigslot.h	/^        void disconnect_all()$/;"	f	class:sigslot::_signal_base8	access:public	signature:()
sigslot::_signal_base8::is_empty	Sigslot.h	/^        bool is_empty()$/;"	f	class:sigslot::_signal_base8	access:public	signature:()
sigslot::_signal_base8::m_connected_slots	Sigslot.h	/^        connections_list m_connected_slots;$/;"	m	class:sigslot::_signal_base8	access:protected
sigslot::_signal_base8::slot_disconnect	Sigslot.h	/^        void slot_disconnect(has_slots_interface* pslot)$/;"	f	class:sigslot::_signal_base8	access:public	signature:(has_slots_interface* pslot)
sigslot::_signal_base8::slot_duplicate	Sigslot.h	/^        void slot_duplicate(const has_slots_interface* oldtarget, has_slots_interface* newtarget)$/;"	f	class:sigslot::_signal_base8	access:public	signature:(const has_slots_interface* oldtarget, has_slots_interface* newtarget)
sigslot::_signal_base8::~_signal_base8	Sigslot.h	/^        ~_signal_base8()$/;"	f	class:sigslot::_signal_base8	access:public	signature:()
sigslot::_signal_base_interface	Sigslot.h	/^    class _signal_base_interface$/;"	c	namespace:sigslot
sigslot::_signal_base_interface::slot_disconnect	Sigslot.h	/^        virtual void slot_disconnect(has_slots_interface* pslot) = 0;$/;"	p	class:sigslot::_signal_base_interface	access:public	signature:(has_slots_interface* pslot)
sigslot::_signal_base_interface::slot_duplicate	Sigslot.h	/^        virtual void slot_duplicate(const has_slots_interface* poldslot, has_slots_interface* pnewslot) = 0;$/;"	p	class:sigslot::_signal_base_interface	access:public	signature:(const has_slots_interface* poldslot, has_slots_interface* pnewslot)
sigslot::_signal_base_interface::~_signal_base_interface	Sigslot.h	/^        virtual ~_signal_base_interface() {}$/;"	f	class:sigslot::_signal_base_interface	access:public	signature:()
sigslot::has_slots	Sigslot.h	/^    class has_slots : public has_slots_interface, public mt_policy$/;"	c	namespace:sigslot	inherits:has_slots_interface,mt_policy
sigslot::has_slots::const_iterator	Sigslot.h	/^        typedef sender_set::const_iterator const_iterator;$/;"	t	class:sigslot::has_slots	access:private
sigslot::has_slots::disconnect_all	Sigslot.h	/^        void disconnect_all()$/;"	f	class:sigslot::has_slots	access:public	signature:()
sigslot::has_slots::has_slots	Sigslot.h	/^        has_slots()$/;"	f	class:sigslot::has_slots	access:public	signature:()
sigslot::has_slots::has_slots	Sigslot.h	/^        has_slots(const has_slots& hs)$/;"	f	class:sigslot::has_slots	access:public	signature:(const has_slots& hs)
sigslot::has_slots::m_senders	Sigslot.h	/^        sender_set m_senders;$/;"	m	class:sigslot::has_slots	access:private
sigslot::has_slots::sender_set	Sigslot.h	/^        typedef std::set<_signal_base_interface*> sender_set;$/;"	t	class:sigslot::has_slots	access:private
sigslot::has_slots::signal_connect	Sigslot.h	/^        void signal_connect(_signal_base_interface* sender)$/;"	f	class:sigslot::has_slots	access:public	signature:(_signal_base_interface* sender)
sigslot::has_slots::signal_disconnect	Sigslot.h	/^        void signal_disconnect(_signal_base_interface* sender)$/;"	f	class:sigslot::has_slots	access:public	signature:(_signal_base_interface* sender)
sigslot::has_slots::~has_slots	Sigslot.h	/^        virtual ~has_slots()$/;"	f	class:sigslot::has_slots	access:public	signature:()
sigslot::has_slots_interface	Sigslot.h	/^    class has_slots_interface$/;"	c	namespace:sigslot
sigslot::has_slots_interface::disconnect_all	Sigslot.h	/^        virtual void disconnect_all() = 0;$/;"	p	class:sigslot::has_slots_interface	access:public	signature:()
sigslot::has_slots_interface::has_slots_interface	Sigslot.h	/^        has_slots_interface()$/;"	f	class:sigslot::has_slots_interface	access:public	signature:()
sigslot::has_slots_interface::signal_connect	Sigslot.h	/^        virtual void signal_connect(_signal_base_interface* sender) = 0;$/;"	p	class:sigslot::has_slots_interface	access:public	signature:(_signal_base_interface* sender)
sigslot::has_slots_interface::signal_disconnect	Sigslot.h	/^        virtual void signal_disconnect(_signal_base_interface* sender) = 0;$/;"	p	class:sigslot::has_slots_interface	access:public	signature:(_signal_base_interface* sender)
sigslot::has_slots_interface::~has_slots_interface	Sigslot.h	/^        virtual ~has_slots_interface()$/;"	f	class:sigslot::has_slots_interface	access:public	signature:()
sigslot::lock_block	Sigslot.h	/^    class lock_block$/;"	c	namespace:sigslot
sigslot::lock_block::lock_block	Sigslot.h	/^        lock_block(mt_policy *mtx)$/;"	f	class:sigslot::lock_block	access:public	signature:(mt_policy *mtx)
sigslot::lock_block::m_mutex	Sigslot.h	/^        mt_policy *m_mutex;$/;"	m	class:sigslot::lock_block	access:public
sigslot::lock_block::~lock_block	Sigslot.h	/^        ~lock_block()$/;"	f	class:sigslot::lock_block	access:public	signature:()
sigslot::multi_threaded_global	Sigslot.h	/^    class multi_threaded_global$/;"	c	namespace:sigslot
sigslot::multi_threaded_global::get_mutex	Sigslot.h	/^        pthread_mutex_t* get_mutex()$/;"	f	class:sigslot::multi_threaded_global	access:private	signature:()
sigslot::multi_threaded_global::lock	Sigslot.cpp	/^    void multi_threaded_global::lock() {$/;"	f	class:sigslot::multi_threaded_global	signature:()
sigslot::multi_threaded_global::lock	Sigslot.h	/^        virtual void lock();$/;"	p	class:sigslot::multi_threaded_global	access:public	signature:()
sigslot::multi_threaded_global::multi_threaded_global	Sigslot.cpp	/^    multi_threaded_global::multi_threaded_global() {$/;"	f	class:sigslot::multi_threaded_global	signature:()
sigslot::multi_threaded_global::multi_threaded_global	Sigslot.cpp	/^    multi_threaded_global::multi_threaded_global(const multi_threaded_global&) {$/;"	f	class:sigslot::multi_threaded_global	signature:(const multi_threaded_global&)
sigslot::multi_threaded_global::multi_threaded_global	Sigslot.h	/^        multi_threaded_global();$/;"	p	class:sigslot::multi_threaded_global	access:public	signature:()
sigslot::multi_threaded_global::multi_threaded_global	Sigslot.h	/^        multi_threaded_global(const multi_threaded_global&);$/;"	p	class:sigslot::multi_threaded_global	access:public	signature:(const multi_threaded_global&)
sigslot::multi_threaded_global::unlock	Sigslot.cpp	/^    void multi_threaded_global::unlock() {$/;"	f	class:sigslot::multi_threaded_global	signature:()
sigslot::multi_threaded_global::unlock	Sigslot.h	/^        virtual void unlock();$/;"	p	class:sigslot::multi_threaded_global	access:public	signature:()
sigslot::multi_threaded_global::~multi_threaded_global	Sigslot.cpp	/^    multi_threaded_global::~multi_threaded_global() = default;$/;"	p	class:sigslot::multi_threaded_global	file:	signature:()
sigslot::multi_threaded_global::~multi_threaded_global	Sigslot.h	/^        virtual ~multi_threaded_global();$/;"	p	class:sigslot::multi_threaded_global	access:public	signature:()
sigslot::multi_threaded_local	Sigslot.h	/^    class multi_threaded_local$/;"	c	namespace:sigslot
sigslot::multi_threaded_local::lock	Sigslot.cpp	/^    void multi_threaded_local::lock() {$/;"	f	class:sigslot::multi_threaded_local	signature:()
sigslot::multi_threaded_local::lock	Sigslot.h	/^        virtual void lock();$/;"	p	class:sigslot::multi_threaded_local	access:public	signature:()
sigslot::multi_threaded_local::m_mutex	Sigslot.h	/^        pthread_mutex_t m_mutex;$/;"	m	class:sigslot::multi_threaded_local	access:private
sigslot::multi_threaded_local::multi_threaded_local	Sigslot.cpp	/^    multi_threaded_local::multi_threaded_local() {$/;"	f	class:sigslot::multi_threaded_local	signature:()
sigslot::multi_threaded_local::multi_threaded_local	Sigslot.cpp	/^    multi_threaded_local::multi_threaded_local(const multi_threaded_local&) {$/;"	f	class:sigslot::multi_threaded_local	signature:(const multi_threaded_local&)
sigslot::multi_threaded_local::multi_threaded_local	Sigslot.h	/^        multi_threaded_local();$/;"	p	class:sigslot::multi_threaded_local	access:public	signature:()
sigslot::multi_threaded_local::multi_threaded_local	Sigslot.h	/^        multi_threaded_local(const multi_threaded_local&);$/;"	p	class:sigslot::multi_threaded_local	access:public	signature:(const multi_threaded_local&)
sigslot::multi_threaded_local::unlock	Sigslot.cpp	/^    void multi_threaded_local::unlock() {$/;"	f	class:sigslot::multi_threaded_local	signature:()
sigslot::multi_threaded_local::unlock	Sigslot.h	/^        virtual void unlock();$/;"	p	class:sigslot::multi_threaded_local	access:public	signature:()
sigslot::multi_threaded_local::~multi_threaded_local	Sigslot.cpp	/^    multi_threaded_local::~multi_threaded_local() {$/;"	f	class:sigslot::multi_threaded_local	signature:()
sigslot::multi_threaded_local::~multi_threaded_local	Sigslot.h	/^        virtual ~multi_threaded_local();$/;"	p	class:sigslot::multi_threaded_local	access:public	signature:()
sigslot::signal0	Sigslot.h	/^    class signal0 : public _signal_base0<mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base0
sigslot::signal0::base	Sigslot.h	/^        typedef _signal_base0<mt_policy> base;$/;"	t	class:sigslot::signal0	access:public
sigslot::signal0::connect	Sigslot.h	/^        void connect(desttype* pclass, void (desttype::*pmemfun)())$/;"	f	class:sigslot::signal0	access:public	signature:(desttype* pclass, void (desttype::*pmemfun)())
sigslot::signal0::connections_list	Sigslot.h	/^        typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal0	access:public
sigslot::signal0::emit	Sigslot.h	/^        void emit()$/;"	f	class:sigslot::signal0	access:public	signature:()
sigslot::signal0::operator ()	Sigslot.h	/^        void operator()()$/;"	f	class:sigslot::signal0	access:public	signature:()
sigslot::signal0::signal0	Sigslot.h	/^        signal0()$/;"	f	class:sigslot::signal0	access:public	signature:()
sigslot::signal0::signal0	Sigslot.h	/^        signal0(const signal0<mt_policy>& s)$/;"	f	class:sigslot::signal0	access:public	signature:(const signal0<mt_policy>& s)
sigslot::signal1	Sigslot.h	/^    class signal1 : public _signal_base1<arg1_type, mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base1
sigslot::signal1::base	Sigslot.h	/^        typedef _signal_base1<arg1_type, mt_policy> base;$/;"	t	class:sigslot::signal1	access:public
sigslot::signal1::connect	Sigslot.h	/^        void connect(desttype* pclass, void (desttype::*pmemfun)(arg1_type))$/;"	f	class:sigslot::signal1	access:public	signature:(desttype* pclass, void (desttype::*pmemfun)(arg1_type))
sigslot::signal1::connections_list	Sigslot.h	/^        typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal1	access:public
sigslot::signal1::emit	Sigslot.h	/^        void emit(arg1_type a1)$/;"	f	class:sigslot::signal1	access:public	signature:(arg1_type a1)
sigslot::signal1::operator ()	Sigslot.h	/^        void operator()(arg1_type a1)$/;"	f	class:sigslot::signal1	access:public	signature:(arg1_type a1)
sigslot::signal1::signal1	Sigslot.h	/^        signal1()$/;"	f	class:sigslot::signal1	access:public	signature:()
sigslot::signal1::signal1	Sigslot.h	/^        signal1(const signal1<arg1_type, mt_policy>& s)$/;"	f	class:sigslot::signal1	access:public	signature:(const signal1<arg1_type, mt_policy>& s)
sigslot::signal2	Sigslot.h	/^    class signal2 : public _signal_base2<arg1_type, arg2_type, mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base2
sigslot::signal2::base	Sigslot.h	/^        typedef _signal_base2<arg1_type, arg2_type, mt_policy> base;$/;"	t	class:sigslot::signal2	access:public
sigslot::signal2::connect	Sigslot.h	/^        void connect(desttype* pclass, void (desttype::*pmemfun)(arg1_type,$/;"	f	class:sigslot::signal2	access:public	signature:(desttype* pclass, void (desttype::*pmemfun)(arg1_type, arg2_type))
sigslot::signal2::connections_list	Sigslot.h	/^        typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal2	access:public
sigslot::signal2::emit	Sigslot.h	/^        void emit(arg1_type a1, arg2_type a2)$/;"	f	class:sigslot::signal2	access:public	signature:(arg1_type a1, arg2_type a2)
sigslot::signal2::operator ()	Sigslot.h	/^        void operator()(arg1_type a1, arg2_type a2)$/;"	f	class:sigslot::signal2	access:public	signature:(arg1_type a1, arg2_type a2)
sigslot::signal2::signal2	Sigslot.h	/^        signal2()$/;"	f	class:sigslot::signal2	access:public	signature:()
sigslot::signal2::signal2	Sigslot.h	/^        signal2(const signal2<arg1_type, arg2_type, mt_policy>& s)$/;"	f	class:sigslot::signal2	access:public	signature:(const signal2<arg1_type, arg2_type, mt_policy>& s)
sigslot::signal3	Sigslot.h	/^    class signal3 : public _signal_base3<arg1_type, arg2_type, arg3_type, mt_policy>$/;"	c	namespace:sigslot	inherits:_signal_base3
sigslot::signal3::base	Sigslot.h	/^        typedef _signal_base3<arg1_type, arg2_type, arg3_type, mt_policy> base;$/;"	t	class:sigslot::signal3	access:public
sigslot::signal3::connect	Sigslot.h	/^        void connect(desttype* pclass, void (desttype::*pmemfun)(arg1_type,$/;"	f	class:sigslot::signal3	access:public	signature:(desttype* pclass, void (desttype::*pmemfun)(arg1_type, arg2_type, arg3_type))
sigslot::signal3::connections_list	Sigslot.h	/^        typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal3	access:public
sigslot::signal3::emit	Sigslot.h	/^        void emit(arg1_type a1, arg2_type a2, arg3_type a3)$/;"	f	class:sigslot::signal3	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3)
sigslot::signal3::operator ()	Sigslot.h	/^        void operator()(arg1_type a1, arg2_type a2, arg3_type a3)$/;"	f	class:sigslot::signal3	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3)
sigslot::signal3::signal3	Sigslot.h	/^        signal3()$/;"	f	class:sigslot::signal3	access:public	signature:()
sigslot::signal3::signal3	Sigslot.h	/^        signal3(const signal3<arg1_type, arg2_type, arg3_type, mt_policy>& s)$/;"	f	class:sigslot::signal3	access:public	signature:(const signal3<arg1_type, arg2_type, arg3_type, mt_policy>& s)
sigslot::signal4	Sigslot.h	/^    class signal4 : public _signal_base4<arg1_type, arg2_type, arg3_type,$/;"	c	namespace:sigslot	inherits:_signal_base4
sigslot::signal4::base	Sigslot.h	/^        typedef _signal_base4<arg1_type, arg2_type, arg3_type, arg4_type, mt_policy> base;$/;"	t	class:sigslot::signal4	access:public
sigslot::signal4::connect	Sigslot.h	/^        void connect(desttype* pclass, void (desttype::*pmemfun)(arg1_type,$/;"	f	class:sigslot::signal4	access:public	signature:(desttype* pclass, void (desttype::*pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type))
sigslot::signal4::connections_list	Sigslot.h	/^        typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal4	access:public
sigslot::signal4::emit	Sigslot.h	/^        void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4)$/;"	f	class:sigslot::signal4	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4)
sigslot::signal4::operator ()	Sigslot.h	/^        void operator()(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4)$/;"	f	class:sigslot::signal4	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4)
sigslot::signal4::signal4	Sigslot.h	/^        signal4()$/;"	f	class:sigslot::signal4	access:public	signature:()
sigslot::signal4::signal4	Sigslot.h	/^        signal4(const signal4<arg1_type, arg2_type, arg3_type, arg4_type, mt_policy>& s)$/;"	f	class:sigslot::signal4	access:public	signature:(const signal4<arg1_type, arg2_type, arg3_type, arg4_type, mt_policy>& s)
sigslot::signal5	Sigslot.h	/^    class signal5 : public _signal_base5<arg1_type, arg2_type, arg3_type,$/;"	c	namespace:sigslot	inherits:_signal_base5
sigslot::signal5::base	Sigslot.h	/^        typedef _signal_base5<arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, mt_policy> base;$/;"	t	class:sigslot::signal5	access:public
sigslot::signal5::connect	Sigslot.h	/^        void connect(desttype* pclass, void (desttype::*pmemfun)(arg1_type,$/;"	f	class:sigslot::signal5	access:public	signature:(desttype* pclass, void (desttype::*pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type))
sigslot::signal5::connections_list	Sigslot.h	/^        typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal5	access:public
sigslot::signal5::emit	Sigslot.h	/^        void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::signal5	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5)
sigslot::signal5::operator ()	Sigslot.h	/^        void operator()(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::signal5	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5)
sigslot::signal5::signal5	Sigslot.h	/^        signal5()$/;"	f	class:sigslot::signal5	access:public	signature:()
sigslot::signal5::signal5	Sigslot.h	/^        signal5(const signal5<arg1_type, arg2_type, arg3_type, arg4_type,$/;"	f	class:sigslot::signal5	access:public	signature:(const signal5<arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, mt_policy>& s)
sigslot::signal6	Sigslot.h	/^    class signal6 : public _signal_base6<arg1_type, arg2_type, arg3_type,$/;"	c	namespace:sigslot	inherits:_signal_base6
sigslot::signal6::base	Sigslot.h	/^        typedef _signal_base6<arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, mt_policy> base;$/;"	t	class:sigslot::signal6	access:public
sigslot::signal6::connect	Sigslot.h	/^        void connect(desttype* pclass, void (desttype::*pmemfun)(arg1_type,$/;"	f	class:sigslot::signal6	access:public	signature:(desttype* pclass, void (desttype::*pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type))
sigslot::signal6::connections_list	Sigslot.h	/^        typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal6	access:public
sigslot::signal6::emit	Sigslot.h	/^        void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::signal6	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5, arg6_type a6)
sigslot::signal6::operator ()	Sigslot.h	/^        void operator()(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::signal6	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5, arg6_type a6)
sigslot::signal6::signal6	Sigslot.h	/^        signal6()$/;"	f	class:sigslot::signal6	access:public	signature:()
sigslot::signal6::signal6	Sigslot.h	/^        signal6(const signal6<arg1_type, arg2_type, arg3_type, arg4_type,$/;"	f	class:sigslot::signal6	access:public	signature:(const signal6<arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, mt_policy>& s)
sigslot::signal7	Sigslot.h	/^    class signal7 : public _signal_base7<arg1_type, arg2_type, arg3_type,$/;"	c	namespace:sigslot	inherits:_signal_base7
sigslot::signal7::base	Sigslot.h	/^        arg5_type, arg6_type, arg7_type, mt_policy> base;$/;"	t	class:sigslot::signal7	access:public
sigslot::signal7::connect	Sigslot.h	/^        void connect(desttype* pclass, void (desttype::*pmemfun)(arg1_type,$/;"	f	class:sigslot::signal7	access:public	signature:(desttype* pclass, void (desttype::*pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, arg7_type))
sigslot::signal7::connections_list	Sigslot.h	/^        typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal7	access:public
sigslot::signal7::emit	Sigslot.h	/^        void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::signal7	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5, arg6_type a6, arg7_type a7)
sigslot::signal7::operator ()	Sigslot.h	/^        void operator()(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::signal7	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5, arg6_type a6, arg7_type a7)
sigslot::signal7::signal7	Sigslot.h	/^        signal7()$/;"	f	class:sigslot::signal7	access:public	signature:()
sigslot::signal7::signal7	Sigslot.h	/^        signal7(const signal7<arg1_type, arg2_type, arg3_type, arg4_type,$/;"	f	class:sigslot::signal7	access:public	signature:(const signal7<arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, arg7_type, mt_policy>& s)
sigslot::signal8	Sigslot.h	/^    class signal8 : public _signal_base8<arg1_type, arg2_type, arg3_type,$/;"	c	namespace:sigslot	inherits:_signal_base8
sigslot::signal8::base	Sigslot.h	/^        arg5_type, arg6_type, arg7_type, arg8_type, mt_policy> base;$/;"	t	class:sigslot::signal8	access:public
sigslot::signal8::connect	Sigslot.h	/^        void connect(desttype* pclass, void (desttype::*pmemfun)(arg1_type,$/;"	f	class:sigslot::signal8	access:public	signature:(desttype* pclass, void (desttype::*pmemfun)(arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, arg7_type, arg8_type))
sigslot::signal8::connections_list	Sigslot.h	/^        typedef typename base::connections_list connections_list;$/;"	t	class:sigslot::signal8	access:public
sigslot::signal8::emit	Sigslot.h	/^        void emit(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::signal8	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5, arg6_type a6, arg7_type a7, arg8_type a8)
sigslot::signal8::operator ()	Sigslot.h	/^        void operator()(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4,$/;"	f	class:sigslot::signal8	access:public	signature:(arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5, arg6_type a6, arg7_type a7, arg8_type a8)
sigslot::signal8::signal8	Sigslot.h	/^        signal8()$/;"	f	class:sigslot::signal8	access:public	signature:()
sigslot::signal8::signal8	Sigslot.h	/^        signal8(const signal8<arg1_type, arg2_type, arg3_type, arg4_type,$/;"	f	class:sigslot::signal8	access:public	signature:(const signal8<arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, arg6_type, arg7_type, arg8_type, mt_policy>& s)
sigslot::single_threaded	Sigslot.h	/^    class single_threaded$/;"	c	namespace:sigslot
sigslot::single_threaded::lock	Sigslot.h	/^        virtual void lock() {}$/;"	f	class:sigslot::single_threaded	access:public	signature:()
sigslot::single_threaded::single_threaded	Sigslot.h	/^        single_threaded()$/;"	f	class:sigslot::single_threaded	access:public	signature:()
sigslot::single_threaded::unlock	Sigslot.h	/^        virtual void unlock() {}$/;"	f	class:sigslot::single_threaded	access:public	signature:()
sigslot::single_threaded::~single_threaded	Sigslot.h	/^        virtual ~single_threaded() {}$/;"	f	class:sigslot::single_threaded	access:public	signature:()
single_threaded	Sigslot.h	/^        single_threaded()$/;"	f	class:sigslot::single_threaded	access:public	signature:()
single_threaded	Sigslot.h	/^    class single_threaded$/;"	c	namespace:sigslot
slot_disconnect	Sigslot.h	/^        virtual void slot_disconnect(has_slots_interface* pslot) = 0;$/;"	p	class:sigslot::_signal_base_interface	access:public	signature:(has_slots_interface* pslot)
slot_disconnect	Sigslot.h	/^        void slot_disconnect(has_slots_interface* pslot)$/;"	f	class:sigslot::_signal_base0	access:public	signature:(has_slots_interface* pslot)
slot_disconnect	Sigslot.h	/^        void slot_disconnect(has_slots_interface* pslot)$/;"	f	class:sigslot::_signal_base1	access:public	signature:(has_slots_interface* pslot)
slot_disconnect	Sigslot.h	/^        void slot_disconnect(has_slots_interface* pslot)$/;"	f	class:sigslot::_signal_base2	access:public	signature:(has_slots_interface* pslot)
slot_disconnect	Sigslot.h	/^        void slot_disconnect(has_slots_interface* pslot)$/;"	f	class:sigslot::_signal_base3	access:public	signature:(has_slots_interface* pslot)
slot_disconnect	Sigslot.h	/^        void slot_disconnect(has_slots_interface* pslot)$/;"	f	class:sigslot::_signal_base4	access:public	signature:(has_slots_interface* pslot)
slot_disconnect	Sigslot.h	/^        void slot_disconnect(has_slots_interface* pslot)$/;"	f	class:sigslot::_signal_base5	access:public	signature:(has_slots_interface* pslot)
slot_disconnect	Sigslot.h	/^        void slot_disconnect(has_slots_interface* pslot)$/;"	f	class:sigslot::_signal_base6	access:public	signature:(has_slots_interface* pslot)
slot_disconnect	Sigslot.h	/^        void slot_disconnect(has_slots_interface* pslot)$/;"	f	class:sigslot::_signal_base7	access:public	signature:(has_slots_interface* pslot)
slot_disconnect	Sigslot.h	/^        void slot_disconnect(has_slots_interface* pslot)$/;"	f	class:sigslot::_signal_base8	access:public	signature:(has_slots_interface* pslot)
slot_duplicate	Sigslot.h	/^        virtual void slot_duplicate(const has_slots_interface* poldslot, has_slots_interface* pnewslot) = 0;$/;"	p	class:sigslot::_signal_base_interface	access:public	signature:(const has_slots_interface* poldslot, has_slots_interface* pnewslot)
slot_duplicate	Sigslot.h	/^        void slot_duplicate(const has_slots_interface* oldtarget, has_slots_interface* newtarget)$/;"	f	class:sigslot::_signal_base0	access:public	signature:(const has_slots_interface* oldtarget, has_slots_interface* newtarget)
slot_duplicate	Sigslot.h	/^        void slot_duplicate(const has_slots_interface* oldtarget, has_slots_interface* newtarget)$/;"	f	class:sigslot::_signal_base1	access:public	signature:(const has_slots_interface* oldtarget, has_slots_interface* newtarget)
slot_duplicate	Sigslot.h	/^        void slot_duplicate(const has_slots_interface* oldtarget, has_slots_interface* newtarget)$/;"	f	class:sigslot::_signal_base2	access:public	signature:(const has_slots_interface* oldtarget, has_slots_interface* newtarget)
slot_duplicate	Sigslot.h	/^        void slot_duplicate(const has_slots_interface* oldtarget, has_slots_interface* newtarget)$/;"	f	class:sigslot::_signal_base3	access:public	signature:(const has_slots_interface* oldtarget, has_slots_interface* newtarget)
slot_duplicate	Sigslot.h	/^        void slot_duplicate(const has_slots_interface* oldtarget, has_slots_interface* newtarget)$/;"	f	class:sigslot::_signal_base4	access:public	signature:(const has_slots_interface* oldtarget, has_slots_interface* newtarget)
slot_duplicate	Sigslot.h	/^        void slot_duplicate(const has_slots_interface* oldtarget, has_slots_interface* newtarget)$/;"	f	class:sigslot::_signal_base5	access:public	signature:(const has_slots_interface* oldtarget, has_slots_interface* newtarget)
slot_duplicate	Sigslot.h	/^        void slot_duplicate(const has_slots_interface* oldtarget, has_slots_interface* newtarget)$/;"	f	class:sigslot::_signal_base6	access:public	signature:(const has_slots_interface* oldtarget, has_slots_interface* newtarget)
slot_duplicate	Sigslot.h	/^        void slot_duplicate(const has_slots_interface* oldtarget, has_slots_interface* newtarget)$/;"	f	class:sigslot::_signal_base7	access:public	signature:(const has_slots_interface* oldtarget, has_slots_interface* newtarget)
slot_duplicate	Sigslot.h	/^        void slot_duplicate(const has_slots_interface* oldtarget, has_slots_interface* newtarget)$/;"	f	class:sigslot::_signal_base8	access:public	signature:(const has_slots_interface* oldtarget, has_slots_interface* newtarget)
thread	Thread.cpp	/^        Thread* thread;$/;"	m	struct:NAME_SPACE::ThreadInit	file:	access:public
thread_	Thread.h	/^        pthread_t thread_;$/;"	m	class:NAME_SPACE::Thread	access:private
uint16	Common.h	/^    typedef unsigned short uint16;  \/\/ NOLINT$/;"	t	namespace:NAME_SPACE
uint32	Common.h	/^    typedef unsigned int uint32;$/;"	t	namespace:NAME_SPACE
uint64	Common.h	/^    typedef uint64_t uint64;$/;"	t	namespace:NAME_SPACE
uint8	Common.h	/^    typedef unsigned char uint8;$/;"	t	namespace:NAME_SPACE
unlock	Sigslot.cpp	/^    void multi_threaded_global::unlock() {$/;"	f	class:sigslot::multi_threaded_global	signature:()
unlock	Sigslot.cpp	/^    void multi_threaded_local::unlock() {$/;"	f	class:sigslot::multi_threaded_local	signature:()
unlock	Sigslot.h	/^        virtual void unlock() {}$/;"	f	class:sigslot::single_threaded	access:public	signature:()
unlock	Sigslot.h	/^        virtual void unlock();$/;"	p	class:sigslot::multi_threaded_global	access:public	signature:()
unlock	Sigslot.h	/^        virtual void unlock();$/;"	p	class:sigslot::multi_threaded_local	access:public	signature:()
userdata	Thread.cpp	/^        void* userdata;$/;"	m	struct:NAME_SPACE::ThreadInit	file:	access:public
~ActiveTCPClient	ActiveTCPClient.cpp	/^    ActiveTCPClient::~ActiveTCPClient() {  $/;"	f	class:NAME_SPACE::ActiveTCPClient	signature:()
~ActiveTCPClient	ActiveTCPClient.h	/^        ~ActiveTCPClient();  $/;"	p	class:NAME_SPACE::ActiveTCPClient	access:public	signature:()
~ConditionVariable	ConditionVariable.cpp	/^    ConditionVariable::~ConditionVariable() {$/;"	f	class:NAME_SPACE::ConditionVariable	signature:()
~ConditionVariable	ConditionVariable.h	/^        ~ConditionVariable();$/;"	p	class:NAME_SPACE::ConditionVariable	access:public	signature:()
~CriticalSection	CriticalSection.cpp	/^    CriticalSection::~CriticalSection() {$/;"	f	class:NAME_SPACE::CriticalSection	signature:()
~CriticalSection	CriticalSection.h	/^        ~CriticalSection();$/;"	p	class:NAME_SPACE::CriticalSection	access:public	signature:()
~CriticalSectionScoped	CriticalSection.h	/^        ~CriticalSectionScoped() { ptr_crit_sec_->Leave(); }$/;"	f	class:NAME_SPACE::CriticalSectionScoped	access:public	signature:()
~Event	Event.cpp	/^    Event::~Event() {$/;"	f	class:NAME_SPACE::Event	signature:()
~Event	Event.h	/^        ~Event();$/;"	p	class:NAME_SPACE::Event	access:public	signature:()
~NetFrame	NetFrame.cpp	/^    NetFrame::~NetFrame(){  $/;"	f	class:NAME_SPACE::NetFrame	signature:()
~NetFrame	NetFrame.h	/^        ~NetFrame();  $/;"	p	class:NAME_SPACE::NetFrame	access:protected	signature:()
~NetRunnable	NetFrame.cpp	/^    NetFrame::NetRunnable::~NetRunnable() {}  $/;"	f	class:NAME_SPACE::NetFrame::NetRunnable	signature:()
~NetRunnable	NetFrame.h	/^            ~NetRunnable();  $/;"	p	class:NAME_SPACE::NetFrame::NetRunnable	access:public	signature:()
~PassiveTCPClient	PassiveTCPClient.cpp	/^    PassiveTCPClient::~PassiveTCPClient() {  $/;"	f	class:NAME_SPACE::PassiveTCPClient	signature:()
~PassiveTCPClient	PassiveTCPClient.h	/^        ~PassiveTCPClient();  $/;"	p	class:NAME_SPACE::PassiveTCPClient	access:public	signature:()
~RWLock	RWLock.cpp	/^    RWLock::~RWLock() {$/;"	f	class:NAME_SPACE::RWLock	signature:()
~RWLock	RWLock.h	/^        ~RWLock();$/;"	p	class:NAME_SPACE::RWLock	access:public	signature:()
~ReadLockScoped	RWLock.h	/^        ~ReadLockScoped() {$/;"	f	class:NAME_SPACE::ReadLockScoped	access:public	signature:()
~Runnable	Thread.h	/^        virtual ~Runnable() {}$/;"	f	class:NAME_SPACE::Runnable	access:public	signature:()
~ServerWorker	ServerWorker.h	/^        ~ServerWorker();  $/;"	p	class:NAME_SPACE::ServerWorker	access:public	signature:()
~TCPClientSignal	NetSignal.h	/^        ~TCPClientSignal() {}  $/;"	f	class:NAME_SPACE::TCPClientSignal	access:public	signature:()
~TCPServerSignal	NetSignal.h	/^        ~TCPServerSignal() {}  $/;"	f	class:NAME_SPACE::TCPServerSignal	access:public	signature:()
~TestClient	main.cpp	/^    ~TestClient() {  $/;"	f	class:TestClient	access:public	signature:()
~Thread	Thread.h	/^        virtual ~Thread() { Stop(); }$/;"	f	class:NAME_SPACE::Thread	access:public	signature:()
~ThreadManager	Thread.cpp	/^    ThreadManager::~ThreadManager() {$/;"	f	class:NAME_SPACE::ThreadManager	signature:()
~ThreadManager	Thread.h	/^        ~ThreadManager();$/;"	p	class:NAME_SPACE::ThreadManager	access:public	signature:()
~WriteLockScoped	RWLock.h	/^        ~WriteLockScoped() {$/;"	f	class:NAME_SPACE::WriteLockScoped	access:public	signature:()
~_connection0	Sigslot.h	/^        virtual ~_connection0()$/;"	f	class:sigslot::_connection0	access:public	signature:()
~_connection1	Sigslot.h	/^        virtual ~_connection1()$/;"	f	class:sigslot::_connection1	access:public	signature:()
~_connection2	Sigslot.h	/^        virtual ~_connection2()$/;"	f	class:sigslot::_connection2	access:public	signature:()
~_connection3	Sigslot.h	/^        virtual ~_connection3()$/;"	f	class:sigslot::_connection3	access:public	signature:()
~_connection4	Sigslot.h	/^        virtual ~_connection4()$/;"	f	class:sigslot::_connection4	access:public	signature:()
~_connection5	Sigslot.h	/^        virtual ~_connection5()$/;"	f	class:sigslot::_connection5	access:public	signature:()
~_connection6	Sigslot.h	/^        virtual ~_connection6()$/;"	f	class:sigslot::_connection6	access:public	signature:()
~_connection7	Sigslot.h	/^        virtual ~_connection7()$/;"	f	class:sigslot::_connection7	access:public	signature:()
~_connection8	Sigslot.h	/^        virtual ~_connection8()$/;"	f	class:sigslot::_connection8	access:public	signature:()
~_connection_base0	Sigslot.h	/^        virtual ~_connection_base0() {}$/;"	f	class:sigslot::_connection_base0	access:public	signature:()
~_connection_base1	Sigslot.h	/^        virtual ~_connection_base1() {}$/;"	f	class:sigslot::_connection_base1	access:public	signature:()
~_connection_base2	Sigslot.h	/^        virtual ~_connection_base2() {}$/;"	f	class:sigslot::_connection_base2	access:public	signature:()
~_connection_base3	Sigslot.h	/^        virtual ~_connection_base3() {}$/;"	f	class:sigslot::_connection_base3	access:public	signature:()
~_connection_base4	Sigslot.h	/^        virtual ~_connection_base4() {}$/;"	f	class:sigslot::_connection_base4	access:public	signature:()
~_connection_base5	Sigslot.h	/^        virtual ~_connection_base5() {}$/;"	f	class:sigslot::_connection_base5	access:public	signature:()
~_connection_base6	Sigslot.h	/^        virtual ~_connection_base6() {}$/;"	f	class:sigslot::_connection_base6	access:public	signature:()
~_connection_base7	Sigslot.h	/^        virtual ~_connection_base7() {}$/;"	f	class:sigslot::_connection_base7	access:public	signature:()
~_connection_base8	Sigslot.h	/^        virtual ~_connection_base8() {}$/;"	f	class:sigslot::_connection_base8	access:public	signature:()
~_signal_base0	Sigslot.h	/^        ~_signal_base0()$/;"	f	class:sigslot::_signal_base0	access:public	signature:()
~_signal_base1	Sigslot.h	/^        ~_signal_base1()$/;"	f	class:sigslot::_signal_base1	access:public	signature:()
~_signal_base2	Sigslot.h	/^        ~_signal_base2()$/;"	f	class:sigslot::_signal_base2	access:public	signature:()
~_signal_base3	Sigslot.h	/^        ~_signal_base3()$/;"	f	class:sigslot::_signal_base3	access:public	signature:()
~_signal_base4	Sigslot.h	/^        ~_signal_base4()$/;"	f	class:sigslot::_signal_base4	access:public	signature:()
~_signal_base5	Sigslot.h	/^        ~_signal_base5()$/;"	f	class:sigslot::_signal_base5	access:public	signature:()
~_signal_base6	Sigslot.h	/^        ~_signal_base6()$/;"	f	class:sigslot::_signal_base6	access:public	signature:()
~_signal_base7	Sigslot.h	/^        ~_signal_base7()$/;"	f	class:sigslot::_signal_base7	access:public	signature:()
~_signal_base8	Sigslot.h	/^        ~_signal_base8()$/;"	f	class:sigslot::_signal_base8	access:public	signature:()
~_signal_base_interface	Sigslot.h	/^        virtual ~_signal_base_interface() {}$/;"	f	class:sigslot::_signal_base_interface	access:public	signature:()
~has_slots	Sigslot.h	/^        virtual ~has_slots()$/;"	f	class:sigslot::has_slots	access:public	signature:()
~has_slots_interface	Sigslot.h	/^        virtual ~has_slots_interface()$/;"	f	class:sigslot::has_slots_interface	access:public	signature:()
~lock_block	Sigslot.h	/^        ~lock_block()$/;"	f	class:sigslot::lock_block	access:public	signature:()
~multi_threaded_global	Sigslot.cpp	/^    multi_threaded_global::~multi_threaded_global() = default;$/;"	p	class:sigslot::multi_threaded_global	file:	signature:()
~multi_threaded_global	Sigslot.h	/^        virtual ~multi_threaded_global();$/;"	p	class:sigslot::multi_threaded_global	access:public	signature:()
~multi_threaded_local	Sigslot.cpp	/^    multi_threaded_local::~multi_threaded_local() {$/;"	f	class:sigslot::multi_threaded_local	signature:()
~multi_threaded_local	Sigslot.h	/^        virtual ~multi_threaded_local();$/;"	p	class:sigslot::multi_threaded_local	access:public	signature:()
~single_threaded	Sigslot.h	/^        virtual ~single_threaded() {}$/;"	f	class:sigslot::single_threaded	access:public	signature:()
